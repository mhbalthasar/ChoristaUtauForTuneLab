<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NWaves</name>
    </assembly>
    <members>
        <member name="T:NWaves.Audio.ByteConverter">
            <summary>
            Provides methods for conversion between PCM bytes and float[] data.
            </summary>
        </member>
        <member name="M:NWaves.Audio.ByteConverter.ToFloats8Bit(System.Byte[],System.Single[][],System.Boolean)">
            <summary>
            Converts Pcm_8bit <paramref name="bytes"/> to arrays of <paramref name="floats"/>.
            </summary>
            <param name="bytes">Array of bytes</param>
            <param name="floats">Arrays of floats</param>
            <param name="normalize">Normalize samples</param>
        </member>
        <member name="M:NWaves.Audio.ByteConverter.FromFloats8Bit(System.Single[][],System.Byte[],System.Boolean)">
            <summary>
            Converts arrays of <paramref name="floats"/> to Pcm_8bit <paramref name="bytes"/>.
            </summary>
            <param name="bytes">Array of bytes</param>
            <param name="floats">Arrays of floats</param>
            <param name="normalized">True if samples are normalized</param>
        </member>
        <member name="M:NWaves.Audio.ByteConverter.ToFloats16Bit(System.Byte[],System.Single[][],System.Boolean,System.Boolean)">
            <summary>
            Converts Pcm_16bit <paramref name="bytes"/> to arrays of <paramref name="floats"/> (little-endian or big-endian).
            </summary>
            <param name="bytes">Array of bytes</param>
            <param name="floats">Arrays of floats</param>
            <param name="normalize">Normalize samples</param>
            <param name="bigEndian">True if Big-endian</param>
        </member>
        <member name="M:NWaves.Audio.ByteConverter.FromFloats16Bit(System.Single[][],System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Converts arrays of <paramref name="floats"/> to Pcm_16bit <paramref name="bytes"/> (little-endian or big-endian).
            </summary>
            <param name="bytes">Array of bytes</param>
            <param name="floats">Arrays of floats</param>
            <param name="normalized">True if samples are normalized</param>
            <param name="bigEndian">True if Big-endian</param>
        </member>
        <member name="T:NWaves.Audio.Channels">
            <summary>
            Defines channel indexing schemes (used for addressing signals inside audio containers).
            </summary>
        </member>
        <member name="F:NWaves.Audio.Channels.Left">
            <summary>
            Left channel ( = 0).
            </summary>
        </member>
        <member name="F:NWaves.Audio.Channels.Right">
            <summary>
            Right channel ( = 1).
            </summary>
        </member>
        <member name="F:NWaves.Audio.Channels.Sum">
            <summary>
            Mono as sum of all channels.
            </summary>
        </member>
        <member name="F:NWaves.Audio.Channels.Average">
            <summary>
            Mono as average from all channels.
            </summary>
        </member>
        <member name="F:NWaves.Audio.Channels.Interleave">
            <summary>
            Interleaved channels.
            </summary>
        </member>
        <member name="T:NWaves.Audio.Interfaces.IAudioContainer">
            <summary>
            Interface for audio containers.
            </summary>
        </member>
        <member name="P:NWaves.Audio.Interfaces.IAudioContainer.Signals">
            <summary>
            Gets the list of discrete signals in container.
            </summary>
        </member>
        <member name="P:NWaves.Audio.Interfaces.IAudioContainer.Item(NWaves.Audio.Channels)">
            <summary>
            Gets the signal from container using indexing scheme based on channel type.
            </summary>
            <param name="channel">Channel (left, right, interleave, sum, average, or ordinary index)</param>
        </member>
        <member name="T:NWaves.Audio.Interfaces.IAudioPlayer">
            <summary>
            Interface for audio players.
            </summary>
        </member>
        <member name="P:NWaves.Audio.Interfaces.IAudioPlayer.Volume">
            <summary>
            Gets or sets sound volume (usually in range [0..1]).
            </summary>
        </member>
        <member name="M:NWaves.Audio.Interfaces.IAudioPlayer.PlayAsync(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Int16)">
            <summary>
            Plays samples contained in <paramref name="signal"/> asynchronously.
            </summary>
            <param name="signal">Signal to play</param>
            <param name="startPos">Index of the first sample to play</param>
            <param name="endPos">Index of the last sample to play</param>
            <param name="bitDepth">Number of bits per one sample</param>
        </member>
        <member name="M:NWaves.Audio.Interfaces.IAudioPlayer.PlayAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Plays samples contained in WAV file (or some other source) asynchronously.
            </summary>
            <param name="source">Path to WAV file (or other source) to play</param>
            <param name="startPos">Index of the first sample to play</param>
            <param name="endPos">Index of the last sample to play</param>
        </member>
        <member name="M:NWaves.Audio.Interfaces.IAudioPlayer.Pause">
            <summary>
            Pauses playing audio.
            </summary>
        </member>
        <member name="M:NWaves.Audio.Interfaces.IAudioPlayer.Resume">
            <summary>
            Resumes playing audio.
            </summary>
        </member>
        <member name="M:NWaves.Audio.Interfaces.IAudioPlayer.Stop">
            <summary>
            Stops playing audio.
            </summary>
        </member>
        <member name="T:NWaves.Audio.Interfaces.IAudioRecorder">
            <summary>
            Interface for audio recorders.
            </summary>
        </member>
        <member name="M:NWaves.Audio.Interfaces.IAudioRecorder.StartRecording(System.Int32,System.Int16,System.Int16)">
            <summary>
            Starts recording audio with specific settings.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="channelCount">Number of channels (1=mono, 2=stereo)</param>
            <param name="bitsPerSample">Number of bits per sample (8, 16, 24 or 32)</param>
        </member>
        <member name="M:NWaves.Audio.Interfaces.IAudioRecorder.StopRecording(System.String)">
            <summary>
            Stops recording audio and saves recorded sound to file or any other destination.
            </summary>
            <param name="destination">Path to output file (destination)</param>
        </member>
        <member name="T:NWaves.Audio.Mci.Mci">
            <summary>
            Provides MCI functions imported from winmm.dll.
            </summary>
        </member>
        <member name="T:NWaves.Audio.Mci.MciAudioPlayer">
            <summary>
            <para>Audio player based on MCI.</para>
            <para>
            MciAudioPlayer works only on Windows, since it uses winmm.dll and MCI commands.
            </para>
            <para>
            MciAudioPlayer lets MCI do all the heavy-lifting with sound playback. 
            It launches MCI command and just awaits for amount of time 
            corresponding to the duration of a given segment.
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Audio.Mci.MciAudioPlayer._alias">
            <summary>
            Hidden alias for an MCI waveaudio device.
            </summary>
        </member>
        <member name="F:NWaves.Audio.Mci.MciAudioPlayer._pauseDuration">
            <summary>
            Duration of pause in milliseconds.
            </summary>
        </member>
        <member name="F:NWaves.Audio.Mci.MciAudioPlayer._pauseTime">
            <summary>
            The exact time when playback was paused.
            </summary>
        </member>
        <member name="F:NWaves.Audio.Mci.MciAudioPlayer._isPaused">
            <summary>
            The flag indicating whether audio playback is currently paused.
            </summary>
        </member>
        <member name="P:NWaves.Audio.Mci.MciAudioPlayer.Volume">
            <summary>
            Gets or sets audio volume (measured in percents from the range [0..1]).
            </summary>
        </member>
        <member name="M:NWaves.Audio.Mci.MciAudioPlayer.PlayAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Plays audio contained in WAV file asynchronously.
            </summary>
            <param name="source">Path to WAV file to play</param>
            <param name="startPos">Index of the first sample to play</param>
            <param name="endPos">Index of the last sample to play</param>
        </member>
        <member name="M:NWaves.Audio.Mci.MciAudioPlayer.PlayAsync(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Int16)">
            <summary>
            <para><see cref="T:NWaves.Audio.Mci.MciAudioPlayer"/> does not implement this method.</para>
            <para>
            Unfortunately, MCI does not provide means for playing audio from buffers in memory. 
            Moreover, since NWaves library is portable, there's even no easy way to write the buffer 
            into temporary file and play it here (it could be a workaround for the problem).
            </para>
            </summary>
            <param name="signal">Signal to play</param>
            <param name="startPos">Index of the first sample to play</param>
            <param name="endPos">Index of the last sample to play</param>
            <param name="bitDepth">Number of bits per one sample</param>
        </member>
        <member name="M:NWaves.Audio.Mci.MciAudioPlayer.Pause">
            <summary>
            Pauses playing audio.
            </summary>
        </member>
        <member name="M:NWaves.Audio.Mci.MciAudioPlayer.Resume">
            <summary>
            Resumes playing audio.
            </summary>
        </member>
        <member name="M:NWaves.Audio.Mci.MciAudioPlayer.Stop">
            <summary>
            Stops playing audio and close MCI device.
            </summary>
        </member>
        <member name="T:NWaves.Audio.Mci.MciAudioRecorder">
            <summary>
            <para>Audio recorder based on MCI.</para>
            <para>
            MciAudioRecorder works only with Windows, since it uses winmm.dll and MCI commands.
            </para>
            </summary>
        </member>
        <member name="M:NWaves.Audio.Mci.MciAudioRecorder.StartRecording(System.Int32,System.Int16,System.Int16)">
            <summary>
            Starts recording audio with specific settings.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="channelCount">Number of channels (1=mono, 2=stereo)</param>
            <param name="bitsPerSample">Number of bits per sample (8, 16, 24 or 32)</param>
        </member>
        <member name="M:NWaves.Audio.Mci.MciAudioRecorder.StopRecording(System.String)">
            <summary>
            Stops recording audio and save it to WAV file.
            </summary>
            <param name="destination">Path to output WAV file containing recorded sound</param>
        </member>
        <member name="T:NWaves.Audio.WaveFile">
            <summary>
            <para>Represents PCM WAV container.</para>
            <para>
            <see cref="T:NWaves.Audio.WaveFile"/> is essentially a constructor of signals in memory based on data 
            from the WAV stream, and its lifetime is not synchronized with the stream whatsoever. 
            <see cref = "T:NWaves.Audio.WaveFile" /> is not intended to be a wrapper around the stream, or to acquire any resource
            (it doesn't affect the underlying stream). The synonym name of this class could be also WaveContainer.
            </para>
            </summary>
        </member>
        <member name="P:NWaves.Audio.WaveFile.Signals">
            <summary>
            Gets the list of discrete signals in container.
            </summary>
        </member>
        <member name="P:NWaves.Audio.WaveFile.WaveFmt">
            <summary>
            Gets WAV header (WAVE format).
            </summary>
        </member>
        <member name="F:NWaves.Audio.WaveFile.SupportedBitDepths">
            <summary>
            Supported bit depths.
            </summary>
        </member>
        <member name="M:NWaves.Audio.WaveFile.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructs WAV container by loading signals from <paramref name="waveStream"/>.
            </summary>
            <param name="waveStream">Input stream</param>
            <param name="normalized">Normalize samples</param>
        </member>
        <member name="M:NWaves.Audio.WaveFile.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructs WAV container by loading signals from a byte array (i.e. byte content of WAV file).
            </summary>
            <param name="waveBytes">Input array of bytes</param>
            <param name="normalized">Normalize samples</param>
        </member>
        <member name="M:NWaves.Audio.WaveFile.#ctor(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Constructs WAV container by loading signals from part of a byte array (i.e. byte content of WAV file).
            </summary>
            <param name="waveBytes">Input array of bytes</param>
            <param name="index">Start position in byte array</param>
            <param name="normalized">Normalize samples</param>
        </member>
        <member name="M:NWaves.Audio.WaveFile.ReadWaveStream(System.IO.Stream,System.Boolean)">
            <summary>
            Reads PCM WAV binary data and fills <see cref="P:NWaves.Audio.WaveFile.Signals"/> and <see cref="P:NWaves.Audio.WaveFile.WaveFmt"/> structure.
            </summary>
            <param name="waveStream">Input stream of PCM WAV binary data</param>
            <param name="normalized">Normalize samples</param>
        </member>
        <member name="M:NWaves.Audio.WaveFile.#ctor(System.Collections.Generic.IList{NWaves.Signals.DiscreteSignal},System.Int16)">
            <summary>
            Constructs WAV container by loading into it collection of <paramref name="signals"/> with given <paramref name="bitsPerSample"/>.
            </summary>
            <param name="signals">Signals to be loaded into container</param>
            <param name="bitsPerSample">Bit depth</param>
        </member>
        <member name="M:NWaves.Audio.WaveFile.#ctor(NWaves.Signals.DiscreteSignal,System.Int16)">
            <summary>
            Constructs WAV container by loading into it one <paramref name="signal"/> with given <paramref name="bitsPerSample"/>.
            </summary>
            <param name="signal">Signal to be loaded into container</param>
            <param name="bitsPerSample">Bit depth</param>
        </member>
        <member name="M:NWaves.Audio.WaveFile.GetBytes(System.Boolean)">
            <summary>
            Returns the contents of PCM WAV container as array of bytes.
            </summary>
            <param name="normalized">True if samples are normalized</param>
        </member>
        <member name="M:NWaves.Audio.WaveFile.SaveTo(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the contents of PCM WAV container to <paramref name="waveStream"/>.
            </summary>
            <param name="waveStream">Output stream</param>
            <param name="normalized">True if samples are normalized</param>
        </member>
        <member name="P:NWaves.Audio.WaveFile.Item(NWaves.Audio.Channels)">
            <summary>
            <para>Gets the signal from container using indexing scheme based on channel type. Examples</para>
            <code>
                waveFile[Channels.Left]  -> waveFile.Signals[0]
                <br/>
                waveFile[Channels.Right] -> waveFile.Signals[1] (if it exists)
                <br/>
                waveFile[(Channels)2]    -> waveFile.Signals[2] (if it exists)
                <br/>
                waveFile[Channels.Average] -> returns channel-averaged (new) signal
                <br/>
                waveFile[Channels.Interleave] -> returns interleaved (new) signal
            </code>
            </summary>
            <param name="channel">Channel (left, right, interleave, sum, average, or ordinary index)</param>
        </member>
        <member name="T:NWaves.Audio.WaveFormat">
            <summary>
            PCM WAVE header structure.
            </summary>
        </member>
        <member name="F:NWaves.Audio.WaveFormat.AudioFormat">
            <summary>
            Audio format (PCM = 1).
            </summary>
        </member>
        <member name="F:NWaves.Audio.WaveFormat.ChannelCount">
            <summary>
            Number of channels (1 - mono, 2 - stereo).
            </summary>
        </member>
        <member name="F:NWaves.Audio.WaveFormat.SamplingRate">
            <summary>
            Sampling rate (e.g. 8000 Hz, 11025 Hz, 16000 Hz, 22050 Hz, 44100 Hz).
            </summary>
        </member>
        <member name="F:NWaves.Audio.WaveFormat.ByteRate">
            <summary>
            SamplingRate * NumChannels * BitsPerSample / 8.
            </summary>
        </member>
        <member name="F:NWaves.Audio.WaveFormat.Align">
            <summary>
            ChannelCount * BitsPerSample / 8.
            </summary>
        </member>
        <member name="F:NWaves.Audio.WaveFormat.BitsPerSample">
            <summary>
            Bit depth (bits per sample) (e.g. 8, 16, 24, 32).
            </summary>
        </member>
        <member name="T:NWaves.Effects.AutowahEffect">
            <summary>
            Represents AutoWah audio effect (envelope follower + Wah-Wah effect).
            </summary>
        </member>
        <member name="P:NWaves.Effects.AutowahEffect.Q">
            <summary>
            Gets or sets Q factor (a.k.a. Quality Factor, resonance).
            </summary>
        </member>
        <member name="P:NWaves.Effects.AutowahEffect.MinFrequency">
            <summary>
            Gets or sets minimal LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.AutowahEffect.MaxFrequency">
            <summary>
            Gets or sets maximal LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.AutowahEffect.AttackTime">
            <summary>
            Gets or sets attack time (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.AutowahEffect.ReleaseTime">
            <summary>
            Gets or sets release time (in seconds).
            </summary>
        </member>
        <member name="F:NWaves.Effects.AutowahEffect._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="F:NWaves.Effects.AutowahEffect._envelopeFollower">
            <summary>
            Internal envelope follower.
            </summary>
        </member>
        <member name="M:NWaves.Effects.AutowahEffect.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.AutowahEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="minFrequency">Minimal LFO frequency (in Hz)</param>
            <param name="maxFrequency">Maximal LFO frequency (in Hz)</param>
            <param name="q">Q factor (a.k.a. Quality Factor, resonance)</param>
            <param name="attackTime">Attack time (in seconds)</param>
            <param name="releaseTime">Release time (in seconds)</param>
        </member>
        <member name="M:NWaves.Effects.AutowahEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.AutowahEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.Base.AudioEffect">
            <summary>
            Abstract class for audio effects.
            </summary>
        </member>
        <member name="M:NWaves.Effects.Base.AudioEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.Base.AudioEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="M:NWaves.Effects.Base.AudioEffect.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies effect to entire <paramref name="signal"/> and returns new processed signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Effects.Base.IMixable">
            <summary>
            Interface for wet/dry mixers.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Base.IMixable.Wet">
            <summary>
            Gets or sets wet gain.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Base.IMixable.Dry">
            <summary>
            Gets or sets dry gain.
            </summary>
        </member>
        <member name="T:NWaves.Effects.Base.MixingRule">
            <summary>
            Defines wet/dry mixing rules.
            </summary>
        </member>
        <member name="T:NWaves.Effects.Base.WetDryMixer">
            <summary>
            Base class implementing wet/dry mixing logic.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Base.WetDryMixer.Wet">
            <summary>
            Gets or sets wet gain (by default, 1).
            </summary>
        </member>
        <member name="P:NWaves.Effects.Base.WetDryMixer.Dry">
            <summary>
            Gets or sets dry gain (by default, 0).
            </summary>
        </member>
        <member name="M:NWaves.Effects.Base.WetDryMixer.WetDryMix(System.Single,NWaves.Effects.Base.MixingRule)">
            <summary>
            Sets wet/dry mix (in range [0..1]).
            </summary>
            <param name="mix">Wet/dry mix</param>
            <param name="mixingRule">Mixing rule</param>
        </member>
        <member name="M:NWaves.Effects.Base.WetDryMixer.WetDryDb(System.Double,System.Double)">
            <summary>
            Sets wet/dry gains in decibels and applies linear mix rule.
            </summary>
            <param name="wetDb">Wet gain in decibels</param>
            <param name="dryDb">Dry gain in decibels</param>
        </member>
        <member name="T:NWaves.Effects.BitCrusherEffect">
            <summary>
            Represents Bitcrusher (distortion) audio effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.BitCrusherEffect._step">
            <summary>
            Step is calculated from bit depth.
            </summary>
        </member>
        <member name="P:NWaves.Effects.BitCrusherEffect.BitDepth">
            <summary>
            Gets or sets the bit depth (number of bits).
            </summary>
        </member>
        <member name="M:NWaves.Effects.BitCrusherEffect.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.BitCrusherEffect"/> with given <paramref name="bitDepth"/>.
            </summary>
            <param name="bitDepth">Bit depth (number of bits)</param>
        </member>
        <member name="M:NWaves.Effects.BitCrusherEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.BitCrusherEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.ChorusEffect">
            <summary>
            Represents Chorus audio effect.
            </summary>
        </member>
        <member name="P:NWaves.Effects.ChorusEffect.Widths">
            <summary>
            Gets or sets widths for each voice (max delays in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.ChorusEffect.LfoFrequencies">
            <summary>
            Gets or sets LFO frequencies for each voice.
            </summary>
        </member>
        <member name="F:NWaves.Effects.ChorusEffect._voices">
            <summary>
            Chorus voices.
            </summary>
        </member>
        <member name="M:NWaves.Effects.ChorusEffect.#ctor(System.Int32,System.Single[],System.Single[])">
            <summary>
            Constructs <see cref="T:NWaves.Effects.ChorusEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfoFrequencies">LFO frequencies for each voice</param>
            <param name="widths">Widths (max delays, in seconds) for each voice</param>
        </member>
        <member name="M:NWaves.Effects.ChorusEffect.#ctor(System.Int32,NWaves.Signals.Builders.Base.SignalBuilder[],System.Single[])">
            <summary>
            Constructs <see cref="T:NWaves.Effects.ChorusEffect"/> from <paramref name="lfos"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfos">LFOs (in the form of signal builders)</param>
            <param name="widths">Widths (max delays, in seconds) for each voice</param>
        </member>
        <member name="M:NWaves.Effects.ChorusEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.ChorusEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.DelayEffect">
            <summary>
            Represents Delay audio effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.DelayEffect._delayLine">
            <summary>
            Internal fractional delay line.
            </summary>
        </member>
        <member name="F:NWaves.Effects.DelayEffect._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="P:NWaves.Effects.DelayEffect.Delay">
            <summary>
            Gets or sets delay (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.DelayEffect.Feedback">
            <summary>
            Gets or sets feedback parameter.
            </summary>
        </member>
        <member name="M:NWaves.Effects.DelayEffect.#ctor(System.Int32,System.Single,System.Single,NWaves.Utils.InterpolationMode,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.DelayEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="delay">Delay (in seconds)</param>
            <param name="feedback">Feedback</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveDelay">Max delay for reserving the size of delay line</param>
        </member>
        <member name="M:NWaves.Effects.DelayEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.DelayEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.DistortionEffect">
            <summary>
            Represents Distortion audio effect.
            </summary>
        </member>
        <member name="P:NWaves.Effects.DistortionEffect.Mode">
            <summary>
            Gets or sets distortion mode (soft/hard clipping, exponential, full/half-wave rectify).
            </summary>
        </member>
        <member name="P:NWaves.Effects.DistortionEffect.InputGain">
            <summary>
            Gets or sets input gain (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Effects.DistortionEffect.OutputGain">
            <summary>
            Gets or sets output gain (in dB).
            </summary>
        </member>
        <member name="M:NWaves.Effects.DistortionEffect.#ctor(NWaves.Effects.DistortionMode,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.DistortionEffect"/>.
            </summary>
            <param name="mode">Distortion mode</param>
            <param name="inputGain">Input gain (in dB)</param>
            <param name="outputGain">Output gain (in dB)</param>
        </member>
        <member name="M:NWaves.Effects.DistortionEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.DistortionEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.EchoEffect">
            <summary>
            Represents Echo audio effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.EchoEffect._delayLine">
            <summary>
            Internal fractional delay line.
            </summary>
        </member>
        <member name="F:NWaves.Effects.EchoEffect._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="P:NWaves.Effects.EchoEffect.Delay">
            <summary>
            Gets or sets delay (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.EchoEffect.Feedback">
            <summary>
            Gets or sets feedback parameter.
            </summary>
        </member>
        <member name="M:NWaves.Effects.EchoEffect.#ctor(System.Int32,System.Single,System.Single,NWaves.Utils.InterpolationMode,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.EchoEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="delay">Delay (in seconds)</param>
            <param name="feedback">Feedback</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveDelay">Max delay for reserving the size of delay line</param>
        </member>
        <member name="M:NWaves.Effects.EchoEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.EchoEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.FlangerEffect">
            <summary>
            Represents Flanger audio effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.FlangerEffect._delayLine">
            <summary>
            Internal fractional delay line.
            </summary>
        </member>
        <member name="F:NWaves.Effects.FlangerEffect._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="P:NWaves.Effects.FlangerEffect.Width">
            <summary>
            Gets or sets width (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.FlangerEffect.LfoFrequency">
            <summary>
            Gets or sets LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.FlangerEffect.Lfo">
            <summary>
            Gets or sets LFO signal generator.
            </summary>
        </member>
        <member name="P:NWaves.Effects.FlangerEffect.Depth">
            <summary>
            Gets or sets depth.
            </summary>
        </member>
        <member name="P:NWaves.Effects.FlangerEffect.Feedback">
            <summary>
            Gets or sets feedback parameter.
            </summary>
        </member>
        <member name="P:NWaves.Effects.FlangerEffect.Inverted">
            <summary>
            Gets or sets Inverted mode flag.
            </summary>
        </member>
        <member name="P:NWaves.Effects.FlangerEffect.InterpolationMode">
            <summary>
            Gets or sets interpolation mode.
            </summary>
        </member>
        <member name="M:NWaves.Effects.FlangerEffect.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Boolean,NWaves.Utils.InterpolationMode,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.FlangerEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfoFrequency">LFO frequency (in Hz)</param>
            <param name="width">Width (in seconds)</param>
            <param name="depth">Depth</param>
            <param name="feedback">Feedback</param>
            <param name="inverted">Inverted mode</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveWidth">Max width (in seconds) for reserving the size of delay line</param>
        </member>
        <member name="M:NWaves.Effects.FlangerEffect.#ctor(System.Int32,NWaves.Signals.Builders.Base.SignalBuilder,System.Single,System.Single,System.Single,System.Boolean,NWaves.Utils.InterpolationMode,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.FlangerEffect"/> from <paramref name="lfo"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfo">LFO signal generator</param>
            <param name="width">Width (in seconds)</param>
            <param name="depth">Depth</param>
            <param name="feedback">Feedback</param>
            <param name="inverted">Inverted mode</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveWidth">Max width (in seconds) for reserving the size of delay line</param>
        </member>
        <member name="M:NWaves.Effects.FlangerEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.FlangerEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.MorphEffect">
            <summary>
            Represents effect of morphing (blending) two sound signals.
            </summary>
        </member>
        <member name="F:NWaves.Effects.MorphEffect._hopSize">
            <summary>
            Hop length.
            </summary>
        </member>
        <member name="F:NWaves.Effects.MorphEffect._fftSize">
            <summary>
            Size of FFT for analysis and synthesis.
            </summary>
        </member>
        <member name="F:NWaves.Effects.MorphEffect._overlapSize">
            <summary>
            Size of frame overlap.
            </summary>
        </member>
        <member name="F:NWaves.Effects.MorphEffect._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Effects.MorphEffect._window">
            <summary>
            Window coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Effects.MorphEffect._inOffset">
            <summary>
            Offset in the input delay line.
            </summary>
        </member>
        <member name="F:NWaves.Effects.MorphEffect._outOffset">
            <summary>
            Offset in the output buffer.
            </summary>
        </member>
        <member name="M:NWaves.Effects.MorphEffect.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.MorphEffect"/>.
            </summary>
            <param name="hopSize">Hop size (hop length, number of samples)</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Effects.MorphEffect.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input signal and one sample of the signal to be mixed.
            </summary>
            <param name="sample">Sample of input signal</param>
            <param name="mix">Sample of the signal to mix with input signal</param>
        </member>
        <member name="M:NWaves.Effects.MorphEffect.ProcessFrame">
            <summary>
            Processes one frame (block).
            </summary>
        </member>
        <member name="M:NWaves.Effects.MorphEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="M:NWaves.Effects.MorphEffect.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Blends (mixes) entire input <paramref name="signal"/> with entire <paramref name="mix"/> signal.
            </summary>
            <param name="signal">Input signal</param>
            <param name="mix">Signal to mix with input signal</param>
        </member>
        <member name="M:NWaves.Effects.MorphEffect.Process(System.Single)">
            <summary>
            Processes one sample. This method is not implemented in <see cref="T:NWaves.Effects.MorphEffect"/> class.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="T:NWaves.Effects.PhaserEffect">
            <summary>
            Represents Phaser audio effect.
            </summary>
        </member>
        <member name="P:NWaves.Effects.PhaserEffect.Q">
            <summary>
            Gets or sets Q factor (a.k.a. Quality Factor, resonance).
            </summary>
        </member>
        <member name="P:NWaves.Effects.PhaserEffect.LfoFrequency">
            <summary>
            Gets or sets LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.PhaserEffect.MinFrequency">
            <summary>
            Gets or sets minimal LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.PhaserEffect.MaxFrequency">
            <summary>
            Gets or sets maximal LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.PhaserEffect.Lfo">
            <summary>
            Get or sets LFO signal generator.
            </summary>
        </member>
        <member name="F:NWaves.Effects.PhaserEffect._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="F:NWaves.Effects.PhaserEffect._filter">
            <summary>
            Notch filter with varying center frequency.
            </summary>
        </member>
        <member name="M:NWaves.Effects.PhaserEffect.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.PhaserEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfoFrequency">LFO frequency (in Hz)</param>
            <param name="minFrequency">Minimal LFO frequency (in Hz)</param>
            <param name="maxFrequency">Maximal LFO frequency (in Hz)</param>
            <param name="q">Q factor (a.k.a. Quality Factor, resonance)</param>
        </member>
        <member name="M:NWaves.Effects.PhaserEffect.#ctor(System.Int32,NWaves.Signals.Builders.Base.SignalBuilder,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.PhaserEffect"/> from <paramref name="lfo"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfo">LFO signal generator</param>
            <param name="q">Q factor (a.k.a. Quality Factor, resonance)</param>
        </member>
        <member name="M:NWaves.Effects.PhaserEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.PhaserEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.PitchShiftEffect">
            <summary>
            Represents offline Pitch Shift audio effect 
            based on one of the available TSM algorithms and linear interpolation. 
            <see cref="T:NWaves.Effects.PitchShiftEffect"/> does not implement online processing (method <see cref="M:NWaves.Effects.PitchShiftEffect.Process(System.Single)"/>).
            </summary>
        </member>
        <member name="P:NWaves.Effects.PitchShiftEffect.Shift">
            <summary>
            Gets or sets pitch shift ratio.
            </summary>
        </member>
        <member name="P:NWaves.Effects.PitchShiftEffect.Tsm">
            <summary>
            Gets or sets time-scale modification algorithm.
            </summary>
        </member>
        <member name="P:NWaves.Effects.PitchShiftEffect.WindowSize">
            <summary>
            Gets or sets window size (frame length).
            </summary>
        </member>
        <member name="P:NWaves.Effects.PitchShiftEffect.HopSize">
            <summary>
            Gets or sets hop length.
            </summary>
        </member>
        <member name="M:NWaves.Effects.PitchShiftEffect.#ctor(System.Double,System.Int32,System.Int32,NWaves.Operations.Tsm.TsmAlgorithm)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.PitchShiftEffect"/>.
            </summary>
            <param name="shift">Pitch shift ratio</param>
            <param name="windowSize">Window size (frame length)</param>
            <param name="hopSize">Hop length</param>
            <param name="tsm">Time-scale modification algorithm</param>
        </member>
        <member name="M:NWaves.Effects.PitchShiftEffect.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies effect to entire <paramref name="signal"/> and returns new pitch-shifted signal.
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Effects.PitchShiftEffect.Process(System.Single)">
            <summary>
            Processes one sample. This method is not implemented in <see cref="T:NWaves.Effects.PitchShiftEffect"/> class.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.PitchShiftEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.PitchShiftVocoderEffect">
            <summary>
            Represents pitch shift audio effect 
            based on overlap-add filtering and pitch shifting in frequency domain.
            </summary>
        </member>
        <member name="P:NWaves.Effects.PitchShiftVocoderEffect.Shift">
            <summary>
            Gets or sets pitch shift ratio.
            </summary>
        </member>
        <member name="F:NWaves.Effects.PitchShiftVocoderEffect._freqResolution">
            <summary>
            Frequency resolution.
            </summary>
        </member>
        <member name="F:NWaves.Effects.PitchShiftVocoderEffect._mag">
            <summary>
            Array of spectrum magnitudes (at the current step).
            </summary>
        </member>
        <member name="F:NWaves.Effects.PitchShiftVocoderEffect._phase">
            <summary>
            Array of spectrum phases (at the current step).
            </summary>
        </member>
        <member name="F:NWaves.Effects.PitchShiftVocoderEffect._prevPhase">
            <summary>
            Array of phases computed at the previous step.
            </summary>
        </member>
        <member name="F:NWaves.Effects.PitchShiftVocoderEffect._phaseTotal">
            <summary>
            Array of new synthesized phases (at the current step).
            </summary>
        </member>
        <member name="M:NWaves.Effects.PitchShiftVocoderEffect.#ctor(System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.PitchShiftVocoderEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="shift">Pitch shift ratio</param>
            <param name="fftSize">FFT size</param>
            <param name="hopSize">Hop length</param>
        </member>
        <member name="M:NWaves.Effects.PitchShiftVocoderEffect.ProcessSpectrum(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Processes one spectrum at each Overlap-Add STFT step.
            </summary>
            <param name="re">Real parts of input spectrum</param>
            <param name="im">Imaginary parts of input spectrum</param>
            <param name="filteredRe">Real parts of output spectrum</param>
            <param name="filteredIm">Imaginary parts of output spectrum</param>
        </member>
        <member name="M:NWaves.Effects.PitchShiftVocoderEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.RobotEffect">
            <summary>
            <para>Represents audio effect of speech robotization.</para>
            <para>Usual settings: 
            <list type="bullet">
                <item>fftSize = 512, hopSize = 70 .. 270</item>
                <item>fftSize = 1024, hopSize = 140 .. 540</item>
                <item>fftSize = 2048, hopSize = 280 .. 1080</item>
                <item>etc.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:NWaves.Effects.RobotEffect.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.RobotEffect"/>.
            </summary>
            <param name="hopSize">Hop size (hop length, number of samples)</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Effects.RobotEffect.ProcessSpectrum(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Processes one spectrum at each Overlap-Add STFT step (simply set phases to 0).
            </summary>
            <param name="re">Real parts of input spectrum</param>
            <param name="im">Imaginary parts of input spectrum</param>
            <param name="filteredRe">Real parts of output spectrum</param>
            <param name="filteredIm">Imaginary parts of output spectrum</param>
        </member>
        <member name="T:NWaves.Effects.Stereo.BinauralPanEffect">
            <summary>
            Represents binaural panning audio effect 
            (HRIR/BRIR interpolation + optional crossover filter).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._leftEarHrir">
            <summary>
            Left ear HRIR.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._rightEarHrir">
            <summary>
            Right ear HRIR.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._leftHrirTable">
            <summary>
            HRIRs table (left ear).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._rightHrirTable">
            <summary>
            HRIRs table (right ear).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._azimuths">
            <summary>
            Azimuths (thetas).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._elevations">
            <summary>
            Elevations (phis).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._leftEarConvolver">
            <summary>
            Left ear HRIR convolver.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._rightEarConvolver">
            <summary>
            Right ear HRIR convolver.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._useCrossover">
            <summary>
            Turn on/off crossover filtering.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._crossoverLpFilterLeft">
            <summary>
            Crossover filters (low-pass part).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._crossoverLpFilterRight">
            <summary>
            Crossover filters (low-pass part).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._crossoverHpFilterLeft">
            <summary>
            Crossover filters (high-pass part).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.BinauralPanEffect._crossoverHpFilterRight">
            <summary>
            Crossover filters (high-pass part).
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.BinauralPanEffect.Azimuth">
            <summary>
            Gets or sets azimuth.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.BinauralPanEffect.Elevation">
            <summary>
            Gets or sets elevation.
            </summary>
        </member>
        <member name="M:NWaves.Effects.Stereo.BinauralPanEffect.#ctor(System.Single[],System.Single[],System.Single[][][],System.Single[][][])">
            <summary>
            <para>Constructs <see cref="T:NWaves.Effects.Stereo.BinauralPanEffect"/>.</para>
            <para>
            For example (CIPIC):
            <code>
              25 azimuths (theta): <br/>
                [-80 -65 -55 -45 -40 -35 -30 -25 -20 -15 -10 -5 0 5 10 15 20 25 30 35 40 45 55 65 80]  <br/>
            <br/> 
              50 elevations (phi): <br/>
                [-45 -39 -34 -28 -23 -17 -11 -6 0 6 11 17 23 28 34 39 45 51 56 62 68 73 79 84 90 96  <br/>
                  101 107 113 118 124 129 135 141 146 152 158 163 169 174 180 186 191 197 203 208 214 219 225 231] <br/>
            </code>
            </para>
            </summary>
            <param name="azimuths">Azimuths (thetas) - must be sorted in ascending order</param>
            <param name="elevations">Elevations (phis) - must be sorted in ascending order</param>
            <param name="leftHrirs">HRIR collection (left ear)</param>
            <param name="rightHrirs">HRIR collection (right ear)</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.BinauralPanEffect.UseCrossover(System.Boolean)">
            <summary>
            Turns on/off crossover filtering.
            </summary>
        </member>
        <member name="M:NWaves.Effects.Stereo.BinauralPanEffect.SetCrossoverParameters(System.Double,System.Int32)">
            <summary>
            Updates frequency of the crossover filter (works only for BiQuadFilters). 
            Filters of other types / parameters can be passed to constructor.
            </summary>
            <param name="freq">Frequency</param>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.BinauralPanEffect.SetCrossoverFilters(NWaves.Filters.Base.IOnlineFilter,NWaves.Filters.Base.IOnlineFilter,NWaves.Filters.Base.IOnlineFilter,NWaves.Filters.Base.IOnlineFilter)">
            <summary>
            Sets custom crossover filters.
            </summary>
            <param name="lowpassLeft">Crossover filter (low-pass part) for left channel</param>
            <param name="highpassLeft">Crossover filter (high-pass part) for left channel</param>
            <param name="lowpassRight">Crossover filter (low-pass part) for right channel</param>
            <param name="highpassRight">Crossover filter (high-pass part) for right channel</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.BinauralPanEffect.UpdateHrir(System.Single,System.Single)">
            <summary>
            Updates HRIR (interpolates it using HRIR tables).
            </summary>
            <param name="azimuth">Azimuth (theta)</param>
            <param name="elevation">Elevation (phi)</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.BinauralPanEffect.Process(System.Single@,System.Single@)">
            <summary>
            Processes one sample in each of two channels : [ input left , input right ] -> [ output left , output right ].
            </summary>
            <param name="left">Input sample in left channel</param>
            <param name="right">Input sample in right channel</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.BinauralPanEffect.Reset">
            <summary>
            Resets binaural pan effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.Stereo.ItdIldPanEffect">
            <summary>
            Represents stereo pan audio effect based on ITD-ILD 
            (Interaural Time Difference - Interaural Level Difference).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect.SpeedOfSound">
            <summary>
            Speed of sound.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect.Pi2">
            <summary>
            Constant pi/2.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.ItdIldPanEffect.HeadRadius">
            <summary>
            Gets head radius.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect._samplingRate">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect._headFactor">
            <summary>
            Head factor.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect._itdDelayLeft">
            <summary>
            ITD delay lines.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect._itdDelayRight">
            <summary>
            ITD delay lines.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect._ildFilterLeft">
            <summary>
            ILD filters.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect._ildFilterRight">
            <summary>
            ILD filters.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect._delayLeft">
            <summary>
            Time delays (in seconds).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.ItdIldPanEffect._delayRight">
            <summary>
            Time delays (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.ItdIldPanEffect.Pan">
            <summary>
            Gets or sets pan.
            </summary>
        </member>
        <member name="M:NWaves.Effects.Stereo.ItdIldPanEffect.Itd(System.Double)">
            <summary>
            Interaural Time Difference.
            </summary>
            <param name="angle">Angle</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.ItdIldPanEffect.#ctor(System.Int32,System.Single,NWaves.Utils.InterpolationMode,System.Double,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.Stereo.ItdIldPanEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="pan">Pan</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveDelay">Max delay (in seconds) for reserving the size of delay line</param>
            <param name="headRadius">Head radius</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.ItdIldPanEffect.Process(System.Single@,System.Single@)">
            <summary>
            Processes one sample in each of two channels : [ input left , input right ] -> [ output left , output right ].
            </summary>
            <param name="left">Input sample in left channel</param>
            <param name="right">Input sample in right channel</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.ItdIldPanEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.Stereo.PanEffect">
            <summary>
            Represents stereo panning audio effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.PanEffect._pan">
            <summary>
            Pan value (must be in range [-1..1]).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.PanEffect._mappedPan">
            <summary>
            Pan value for calculations (in range [0..1]).
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.PanEffect._constantPowerPan">
            <summary>
            Pan value for calculations in constant-power mode (in range [0..1]).
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.PanEffect.Pan">
            <summary>
            Gets or sets pan (in range [-1..1]).
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.PanEffect.PanRule">
            <summary>
            Gets or sets pan rule (pan law).
            </summary>
        </member>
        <member name="M:NWaves.Effects.Stereo.PanEffect.#ctor(System.Single,NWaves.Effects.Stereo.PanRule)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.Stereo.PanEffect"/>.
            </summary>
            <param name="pan">Pan</param>
            <param name="panRule">Pan rule (pan law)</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.PanEffect.Process(System.Single@,System.Single@)">
            <summary>
            Processes one sample in each of two channels : [ input left , input right ] -> [ output left , output right ].
            </summary>
            <param name="left">Input sample in left channel</param>
            <param name="right">Input sample in right channel</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.PanEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.Stereo.PanRule">
            <summary>
            Defines pan rules (pan laws).
            </summary>
        </member>
        <member name="T:NWaves.Effects.Stereo.PingPongDelayEffect">
            <summary>
            Represents stereo ping-pong delay audio effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.PingPongDelayEffect._delayLineLeft">
            <summary>
            Left channel delay line.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.PingPongDelayEffect._delayLineRight">
            <summary>
            Righ channel delay line.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.PingPongDelayEffect._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.PingPongDelayEffect.Pan">
            <summary>
            Gets or sets pan.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.PingPongDelayEffect.Delay">
            <summary>
            Gets or sets delay (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.PingPongDelayEffect.Feedback">
            <summary>
            Gets or sets feedback coefficient.
            </summary>
        </member>
        <member name="M:NWaves.Effects.Stereo.PingPongDelayEffect.#ctor(System.Int32,System.Single,System.Single,System.Single,NWaves.Utils.InterpolationMode,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.Stereo.PingPongDelayEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="pan">Pan</param>
            <param name="delay">Delay (in seconds)</param>
            <param name="feedback">Feedback</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveDelay">Max delay for reserving the size of delay line</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.PingPongDelayEffect.Process(System.Single@,System.Single@)">
            <summary>
            Processes one sample in each of two channels : [ input left , input right ] -> [ output left , output right ].
            </summary>
            <param name="left">Input sample in left channel</param>
            <param name="right">Input sample in right channel</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.PingPongDelayEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.Stereo.StereoDelayEffect">
            <summary>
            Represents stereo delay audio effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.StereoDelayEffect._delayEffectLeft">
            <summary>
            Left channel delay effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.Stereo.StereoDelayEffect._delayEffectRight">
            <summary>
            Right channel delay effect.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.StereoDelayEffect.DelayLeft">
            <summary>
            Gets or sets left channel delay (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.StereoDelayEffect.DelayRight">
            <summary>
            Gets or sets right channel delay (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.StereoDelayEffect.FeedbackLeft">
            <summary>
            Gets or sets left channel feedback.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.StereoDelayEffect.FeedbackRight">
            <summary>
            Gets or sets right channel feedback.
            </summary>
        </member>
        <member name="P:NWaves.Effects.Stereo.StereoDelayEffect.Pan">
            <summary>
            Gets or sets pan.
            </summary>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoDelayEffect.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,NWaves.Utils.InterpolationMode,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.Stereo.StereoDelayEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="pan">Pan</param>
            <param name="delayLeft">Left channel delay (in seconds)</param>
            <param name="feedbackLeft">Left channel feedback</param>
            <param name="delayRight">Right channel delay (in seconds)</param>
            <param name="feedbackRight">Right channel feedback</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveDelay">Max delay for reserving the size of delay line</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoDelayEffect.Process(System.Single@,System.Single@)">
            <summary>
            Processes one sample in each of two channels : [ input left , input right ] -> [ output left , output right ].
            </summary>
            <param name="left">Input sample in left channel</param>
            <param name="right">Input sample in right channel</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoDelayEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.Stereo.StereoEffect">
            <summary>
            Abstract class for stereo audio effects.
            </summary>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoEffect.Process(System.Single@,System.Single@)">
            <summary>
            Processes one sample in each of two channels : [ input left , input right ] -> [ output left , output right ].
            </summary>
            <param name="left">Input sample in left channel</param>
            <param name="right">Input sample in right channel</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoEffect.Process(System.Single,System.Single@,System.Single@)">
            <summary>
            Processes one sample in mono channel : input sample -> [ output left , output right ].
            </summary>
            <param name="sample">Input sample in mono channel</param>
            <param name="left">Output sample for left channel</param>
            <param name="right">Output sample for right channel</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoEffect.Process(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Processes blocks of samples in each of two channels : [ input left , input right ] -> [ output left , output right ].
            </summary>
            <param name="inputLeft">Input block of samples (left channel)</param>
            <param name="inputRight">Input block of samples (right channel)</param>
            <param name="outputLeft">Output block of samples (left channel)</param>
            <param name="outputRight">Output block of samples (right channel)</param>
            <param name="count">Number of samples to process</param>
            <param name="inputPos">Input starting index</param>
            <param name="outputPos">Output starting index</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoEffect.Process(System.Single[],System.Single[],System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Processes block of samples in mono channel : [ input ] -> [ output left , output right ].
            </summary>
            <param name="input">Input block of samples (mono channel)</param>
            <param name="outputLeft">Output block of samples (left channel)</param>
            <param name="outputRight">Output block of samples (right channel)</param>
            <param name="count">Number of samples to process</param>
            <param name="inputPos">Input starting index</param>
            <param name="outputPos">Output starting index</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoEffect.ApplyTo(NWaves.Signals.DiscreteSignal)">
            <summary>
            Applies effect to entire <paramref name="signal"/> and returns tuple of output signals [left signal, right signal].
            </summary>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoEffect.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Applies effect to entire signals (in left and right channels) 
            and returns tuple of output signals [left signal, right signal].
            </summary>
            <param name="leftSignal">Input signal (left channel)</param>
            <param name="rightSignal">Input signal (right channel)</param>
        </member>
        <member name="M:NWaves.Effects.Stereo.StereoEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.TremoloEffect">
            <summary>
            Represents Tremolo audio effect.
            </summary>
        </member>
        <member name="P:NWaves.Effects.TremoloEffect.Depth">
            <summary>
            Gets or sets depth.
            </summary>
        </member>
        <member name="P:NWaves.Effects.TremoloEffect.Frequency">
            <summary>
            Gets or sets tremolo frequency (modulation frequency) (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.TremoloEffect.Index">
            <summary>
            Gets or sets tremolo index (modulation index).
            </summary>
        </member>
        <member name="P:NWaves.Effects.TremoloEffect.Lfo">
            <summary>
            Gets or sets LFO signal generator.
            </summary>
        </member>
        <member name="M:NWaves.Effects.TremoloEffect.#ctor(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.TremoloEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="depth">Depth</param>
            <param name="frequency">Tremolo frequency (modulation frequency) (in Hz)</param>
            <param name="tremoloIndex">Tremolo index (modulation index)</param>
        </member>
        <member name="M:NWaves.Effects.TremoloEffect.#ctor(NWaves.Signals.Builders.Base.SignalBuilder,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.TremoloEffect"/> from <paramref name="lfo"/>.
            </summary>
            <param name="lfo">LFO signal generator</param>
            <param name="depth">Depth</param>
        </member>
        <member name="M:NWaves.Effects.TremoloEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.TremoloEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.TubeDistortionEffect">
            <summary>
            Represents Tube Distortion audio effect.
            </summary>
        </member>
        <member name="P:NWaves.Effects.TubeDistortionEffect.InputGain">
            <summary>
            Gets or sets input gain (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Effects.TubeDistortionEffect.OutputGain">
            <summary>
            Gets or sets output gain (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Effects.TubeDistortionEffect.Q">
            <summary>
            Gets or sets Q factor (Work point). 
            Controls the linearity of the transfer function for low input levels. 
            More negative - more linear.
            </summary>
        </member>
        <member name="P:NWaves.Effects.TubeDistortionEffect.Dist">
            <summary>
            Gets or sets distortion's character. 
            Higher number - harder distortion.
            </summary>
        </member>
        <member name="P:NWaves.Effects.TubeDistortionEffect.Rh">
            <summary>
            Gets filter coefficient (close to 1.0) defining placement of poles 
            in the HP filter that removes DC component.
            </summary>
        </member>
        <member name="P:NWaves.Effects.TubeDistortionEffect.Rl">
            <summary>
            Gets filter coefficient (in range [0, 1]) defining placement of pole 
            in the LP filter used to simulate capacitances in tube amplifier.
            </summary>
        </member>
        <member name="F:NWaves.Effects.TubeDistortionEffect._outputFilter">
            <summary>
            Internal filter for output signal 
            that combines HP and LP filters mentioned above.
            </summary>
        </member>
        <member name="M:NWaves.Effects.TubeDistortionEffect.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.TubeDistortionEffect"/>.
            </summary>
            <param name="inputGain">Input gain (in dB)</param>
            <param name="outputGain">Output gain (in dB)</param>
            <param name="q">Q factor (controls the linearity of the transfer function for low input levels. More negative means more linear)</param>
            <param name="dist">Distortion's character (higher number means harder distortion)</param>
            <param name="rh">Filter coefficient (close to 1.0) defining placement of poles in the HP filter that removes DC component</param>
            <param name="rl">Filter coefficient (in range [0, 1]) defining placement of pole in the LP filter used to simulate capacitances in tube amplifier</param>
        </member>
        <member name="M:NWaves.Effects.TubeDistortionEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.TubeDistortionEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.VibratoEffect">
            <summary>
            Represents Vibrato audio effect.
            </summary>
        </member>
        <member name="F:NWaves.Effects.VibratoEffect._delayLine">
            <summary>
            Internal fractional delay line.
            </summary>
        </member>
        <member name="F:NWaves.Effects.VibratoEffect._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="P:NWaves.Effects.VibratoEffect.Width">
            <summary>
            Gets or sets width (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Effects.VibratoEffect.LfoFrequency">
            <summary>
            Gets or sets LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.VibratoEffect.Lfo">
            <summary>
            Gets or sets LFO signal generator.
            </summary>
        </member>
        <member name="P:NWaves.Effects.VibratoEffect.InterpolationMode">
            <summary>
            Gets or sets interpolation mode.
            </summary>
        </member>
        <member name="M:NWaves.Effects.VibratoEffect.#ctor(System.Int32,System.Single,System.Single,NWaves.Utils.InterpolationMode,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.VibratoEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfoFrequency">LFO frequency (in Hz)</param>
            <param name="width">Width (in seconds)</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveWidth">Max width (in seconds) for reserving the size of delay line</param>
        </member>
        <member name="M:NWaves.Effects.VibratoEffect.#ctor(System.Int32,NWaves.Signals.Builders.Base.SignalBuilder,System.Single,NWaves.Utils.InterpolationMode,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.VibratoEffect"/> from <paramref name="lfo"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfo">LFO signal generator</param>
            <param name="width">Width (in seconds)</param>
            <param name="interpolationMode">Interpolation mode for fractional delay line</param>
            <param name="reserveWidth">Max width (in seconds) for reserving the size of delay line</param>
        </member>
        <member name="M:NWaves.Effects.VibratoEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.VibratoEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.WahwahEffect">
            <summary>
            Represents Wah-Wah audio effect.
            </summary>
        </member>
        <member name="P:NWaves.Effects.WahwahEffect.LfoFrequency">
            <summary>
            Gets or sets LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.WahwahEffect.MinFrequency">
            <summary>
            Gets or sets minimal LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.WahwahEffect.MaxFrequency">
            <summary>
            Gets or sets maximal LFO frequency (in Hz).
            </summary>
        </member>
        <member name="P:NWaves.Effects.WahwahEffect.Q">
            <summary>
            Gets or sets Q factor (a.k.a. Quality Factor, resonance).
            </summary>
        </member>
        <member name="P:NWaves.Effects.WahwahEffect.Lfo">
            <summary>
            Gets or sets LFO signal generator.
            </summary>
        </member>
        <member name="F:NWaves.Effects.WahwahEffect._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="M:NWaves.Effects.WahwahEffect.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.WahwahEffect"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfoFrequency">LFO frequency (in Hz)</param>
            <param name="minFrequency">Minimal LFO frequency (in Hz)</param>
            <param name="maxFrequency">Maximal LFO frequency (in Hz)</param>
            <param name="q">Q factor (a.k.a. Quality Factor, resonance)</param>
        </member>
        <member name="M:NWaves.Effects.WahwahEffect.#ctor(System.Int32,NWaves.Signals.Builders.Base.SignalBuilder,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.WahwahEffect"/> from <paramref name="lfo"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="lfo">LFO signal generator</param>
            <param name="q">Q factor (a.k.a. Quality Factor, resonance)</param>
        </member>
        <member name="M:NWaves.Effects.WahwahEffect.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Effects.WahwahEffect.Reset">
            <summary>
            Resets effect.
            </summary>
        </member>
        <member name="T:NWaves.Effects.WhisperEffect">
            <summary>
            <para>Represents audio effect of speech whisperization.</para>
            <para>
            Hint. Choose relatively small FFT and hop sizes (e.g., 256 and 40).
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Effects.WhisperEffect._rand">
            <summary>
            Phase randomizer.
            </summary>
        </member>
        <member name="M:NWaves.Effects.WhisperEffect.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Effects.WhisperEffect"/>.
            </summary>
            <param name="hopSize">Hop size (hop length, number of samples)</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Effects.WhisperEffect.ProcessSpectrum(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Processes one spectrum at each Overlap-Add STFT step.
            </summary>
            <param name="re">Real parts of input spectrum</param>
            <param name="im">Imaginary parts of input spectrum</param>
            <param name="filteredRe">Real parts of output spectrum</param>
            <param name="filteredIm">Imaginary parts of output spectrum</param>
        </member>
        <member name="T:NWaves.FeatureExtractors.AmsExtractor">
            <summary>
            Represents amplitude modulation spectra (AMS) extractor.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.AmsExtractor.FeatureDescriptions">
            <summary>
            Gets feature annotations. 
            They are initialized in constructor in the following manner (example):
            <code>
                band_1_mf_0.5_Hz   band_1_mf_1.0_Hz   ...    band_1_mf_8.0_Hz  <br/>
                band_2_mf_0.5_Hz   band_2_mf_1.0_Hz   ...    band_2_mf_8.0_Hz  <br/>
                                                      ...                      <br/>
                band_32_mf_0.5_Hz  band_32_mf_1.0_Hz  ...    band_32_mf_8.0_Hz <br/>
            </code>
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._featuregram">
            <summary>
            The "featuregram": the sequence of feature vectors. 
            If this sequence is given, then <see cref="T:NWaves.FeatureExtractors.AmsExtractor"/> computes 
            modulation spectral coefficients from sequences in each 'feature channel'.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._filterbank">
            <summary>
            Filterbank matrix of dimension [filterCount * (fftSize/2 + 1)].
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.AmsExtractor.Filterbank">
            <summary>
            Gets filterbank matrix of dimension [filterCount * (fftSize/2 + 1)].
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._envelopes">
            <summary>
            Signal envelopes in different frequency bands.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.AmsExtractor.Envelopes">
            <summary>
            Gets signal envelopes in different frequency bands.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._fftSize">
            <summary>
            Size of FFT.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._modulationFft">
            <summary>
            FFT transformer for modulation spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._modulationFftSize">
            <summary>
            Size of FFT applied to signal envelopes.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._modulationHopSize">
            <summary>
            Hop size for analysis of signal envelopes.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._block">
            <summary>
            Internal buffer for a signal block at each step.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._spectrum">
            <summary>
            Internal buffer for a signal spectrum at each step.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._filteredSpectrum">
            <summary>
            Internal buffer for filtered spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._modBlock">
            <summary>
            Internal buffer for modulation spectrum analysis.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.AmsExtractor._modSpectrum">
            <summary>
            Modulation spectrum (in one band).
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.AmsExtractor.#ctor(NWaves.FeatureExtractors.Options.AmsOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.AmsExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32)">
            <summary>
            Computes modulation spectra. 
            Each vector representing one modulation spectrum is a flattened version of 2D spectrum.
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.AmsExtractor.MakeSpectrum2D(System.Single[])">
            <summary>
            Creates 2D modulation spectrum from its flattened version. 
            Axes are: [short-time-frequency] x [modulation-frequency].
            </summary>
            <param name="featureVector">AMS feature vector</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.AmsExtractor.VectorsAtHerz(System.Collections.Generic.IList{System.Single[]},System.Single)">
            <summary>
            Gets sequence of short-time spectra corresponding to particular modulation frequency 
            (by default, the most perceptually important modulation frequency of 4 Hz).
            </summary>
            <param name="featureVectors">Sequence of AMS feature vectors</param>
            <param name="herz">Modulation frequency</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.AmsExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            <para><see cref="T:NWaves.FeatureExtractors.AmsExtractor"/> does not provide this function.</para>
            <para>Call method <see cref="M:NWaves.FeatureExtractors.AmsExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32)"/> instead.</para>
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.AmsExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32,System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <see cref="T:NWaves.FeatureExtractors.AmsExtractor"/> does not provide this function. 
            Call overloaded method <see cref="M:NWaves.FeatureExtractors.AmsExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32)"/>.
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
            <param name="vectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="T:NWaves.FeatureExtractors.Base.FeatureExtractor">
            <summary>
            Abstract class for all NWaves-style feature extractors.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.FeatureCount">
            <summary>
            Gets number of features to extract (feature vector size).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.FeatureDescriptions">
            <summary>
            Gets string annotations (or simply names) of features.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.DeltaFeatureDescriptions">
            <summary>
            Gets string annotations (or simply names) of delta features (1st order derivatives).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.DeltaDeltaFeatureDescriptions">
            <summary>
            Gets string annotations (or simply names) of delta-delta features (2nd order derivatives).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.FrameDuration">
            <summary>
            Gets length of analysis frame (duration in seconds).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.HopDuration">
            <summary>
            Gets hop length (duration in seconds).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.FrameSize">
            <summary>
            Gets size of analysis frame (number of samples).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.HopSize">
            <summary>
            Gets hop size (number of samples).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.FeatureExtractor.SamplingRate">
            <summary>
            Gets expected sampling rate of signals for analysis.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Base.FeatureExtractor._blockSize">
            <summary>
            Size of the block for processing at each step. 
            This field is usually set in subclass methods.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Base.FeatureExtractor._preEmphasis">
            <summary>
            Pre-emphasis coefficient.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Base.FeatureExtractor._window">
            <summary>
            Type of the window function.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Base.FeatureExtractor._windowSamples">
            <summary>
            Window samples.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.#ctor(NWaves.FeatureExtractors.Options.FeatureExtractorOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32,System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/> and stores them in <paramref name="vectors"/>.</para>
            <para>Returns the number of actually computed feature vectors</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample (exclusive) in array for processing</param>
            <param name="vectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ComputeFrom(System.Single[],System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/> and stores them in <paramref name="vectors"/>.</para>
            <para>Returns the number of actually computed feature vectors</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="vectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32)">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample (exclusive) in array for processing</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.TimeMarkers(System.Int32,System.Double)">
            <summary>
            Returns time markers (in seconds).
            </summary>
            <param name="vectorCount">Number of feature vectors</param>
            <param name="startFrom">Starting time position (in seconds)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            Processes one frame in block of data at each step 
            (in general block can be longer than frame, e.g. zero-padded block for FFT).
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ComputeFrom(System.Single[])">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="samples">Array of samples</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ComputeFrom(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32)">
            <summary>
            <para>Computes feature vectors from <paramref name="signal"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the signal length is less than the size of analysis frame.</para>
            </summary>
            <param name="signal">Discrete signal</param>
            <param name="startSample">Index of the first sample in signal for processing</param>
            <param name="endSample">Index of the last sample (exclusive) in signal for processing</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ComputeFrom(NWaves.Signals.DiscreteSignal)">
            <summary>
            <para>Computes feature vectors from <paramref name="signal"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the signal length is less than the size of analysis frame.</para>
            </summary>
            <param name="signal">Discrete signal</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.Reset">
            <summary>
            Resets feature extractor.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.IsParallelizable">
            <summary>
            Returns true if the extractor supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ParallelCopy">
            <summary>
            <para>Creates thread-safe copy of the extractor for parallel computations.</para>
            <para>Returns null if the extractor does not support parallelization.</para>
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ParallelChunksComputeFrom(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Computes parallelly feature vectors from <paramref name="samples"/>.</para>
            <para>Returns chunks of fecture vector lists computed in each separate thread.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
            <param name="parallelThreads">Number of threads (all available processors, by default)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ParallelComputeFrom(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Computes parallelly feature vectors from <paramref name="samples"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
            <param name="parallelThreads">Number of threads (all available processors, by default)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ParallelComputeFrom(System.Single[],System.Int32)">
            <summary>
            <para>Computes parallelly feature vectors from <paramref name="samples"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="parallelThreads">Number of threads (all available processors, by default)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ParallelComputeFrom(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Computes parallelly feature vectors from <paramref name="signal"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="signal">Discrete signal</param>
            <param name="startSample">Index of the first sample in signal for processing</param>
            <param name="endSample">Index of the last sample in signal for processing</param>
            <param name="parallelThreads">Number of threads (all available processors, by default)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureExtractor.ParallelComputeFrom(NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            <para>Computes parallelly feature vectors from <paramref name="signal"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="signal">Discrete signal</param>
            <param name="parallelThreads">Number of threads (all available processors, by default)</param>
        </member>
        <member name="T:NWaves.FeatureExtractors.Base.FeaturePostProcessing">
            <summary>
            Provides methods for post-processing of feature vector sequences.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeaturePostProcessing.NormalizeMean(System.Collections.Generic.IList{System.Single[]})">
            <summary>
            Does mean subtraction (in particular, CMN).
            </summary>
            <param name="vectors">Sequence of feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeaturePostProcessing.NormalizeVariance(System.Collections.Generic.IList{System.Single[]},System.Int32)">
            <summary>
            Does variance normalization (division by estimate of std.deviation (biased or not biased)).
            </summary>
            <param name="vectors">Sequence of feature vectors</param>
            <param name="bias">Bias in estimate of variance (1 = not biased, 0 = biased)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeaturePostProcessing.AddDeltas(System.Collections.Generic.IList{System.Single[]},System.Collections.Generic.IList{System.Single[]},System.Collections.Generic.IList{System.Single[]},System.Boolean,System.Int32)">
            <summary>
            Extends feature vectors with delta-features (1st and optionally 2nd order derivatives).
            
            <para>According to formula:</para>
            
              <para>d_t = \frac{\sum_{n=1}^N n (c_{t+n} - c_{t-n})}{2 \sum_{n=1}^N n^2}</para>
              
            <paramref name="N"/> vectors should be introduced before and after input vectors for computations.<br/>
            By default, these vectors will be created automatically and copied from the first and the last input vector.<br/>
            They can also be specified explicitly in <paramref name="previous"/> and <paramref name="next"/> parameters.
            </summary>
            <param name="vectors">Sequence of feature vectors that will be extended</param>
            <param name="previous">Sequence of <paramref name="N"/> feature vectors that will be prepended to <paramref name="vectors"/> for computations</param>
            <param name="next">Sequence of <paramref name="N"/> feature vectors that will be appended to <paramref name="vectors"/> for computations</param>
            <param name="includeDeltaDelta">Should delta-delta features be computed</param>
            <param name="N">Number of feature vectors before and after input <paramref name="vectors"/> for computations</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeaturePostProcessing.Join(System.Collections.Generic.IList{System.Single[]}[])">
            <summary>
            Joins (merges) feature vectors from different collections into one combined feature vector. 
            For example, it can join 12 MFCC and 10 PLP coeffs into one 22-dimensional vector. 
            Collections of feature vectors must have the same size and contain at least one vector.
            </summary>
            <param name="vectors">Sequences of feature vectors</param>
        </member>
        <member name="T:NWaves.FeatureExtractors.Base.FeatureVectorExtensions">
            <summary>
            Provides extension methods for feature vectors.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.FeatureVectorExtensions.Statistics(System.Single[])">
            <summary>
            Creates dictionary with feature vector statistics (keys are: min, max, mean, var).
            </summary>
            <param name="vector">Feature vector</param>
        </member>
        <member name="T:NWaves.FeatureExtractors.Base.IFeatureExtractor">
            <summary>
            Interface for feature extractors.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.IFeatureExtractor.FeatureCount">
            <summary>
            Gets number of features to extract (feature vector size).
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.IFeatureExtractor.ComputeFrom(System.Single[])">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="samples">Array of samples</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.IFeatureExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32)">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.IFeatureExtractor.ComputeFrom(System.Single[],System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/> and stores them in <paramref name="vectors"/>.</para>
            <para>Returns the number of actually computed feature vectors</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="vectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.IFeatureExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32,System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/> and stores them in <paramref name="vectors"/>.</para>
            <para>Returns the number of actually computed feature vectors</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
            <param name="vectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.IFeatureExtractor.Reset">
            <summary>
            Resets feature extractor.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Base.IParallelFeatureExtractor">
            <summary>
            Interface for feature extractors that support parallelized computations.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.IParallelFeatureExtractor.ParallelComputeFrom(System.Single[],System.Int32)">
            <summary>
            <para>Computes parallelly the feature vectors from <paramref name="samples"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="parallelThreads">Number of threads</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.IParallelFeatureExtractor.ParallelComputeFrom(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Computes parallelly the feature vectors from <paramref name="samples"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
            <param name="parallelThreads">Number of threads</param>
        </member>
        <member name="T:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor">
            <summary>
            <see cref="T:NWaves.FeatureExtractors.Base.FeatureExtractor"/> adapter for online feature extraction.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.Extractor">
            <summary>
            Gets or sets underlying feature extractor.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.FeatureCount">
            <summary>
            Gets number of features to extract (feature vector size).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor._ignoreLastSamples">
            <summary>
            Should the last non-processed samples in the current block be ignored in the next block.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor._skippedCount">
            <summary>
            The number of last non-processed samples in the current block that will be processed in the next block.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor._tempBuffer">
            <summary>
            Internal buffer for accumulated samples.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.#ctor(NWaves.FeatureExtractors.Base.FeatureExtractor,System.Boolean,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor"/> as a wrapper around <paramref name="extractor"/>.
            </summary>
            <param name="extractor">Underlying feature extractor</param>
            <param name="ignoreLastSamples">Should the last non-processed samples in the current block be ignored in the next block</param>
            <param name="maxDataSize">Reserved max size of the internal buffer for accumulated samples</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.VectorCount(System.Int32)">
            <summary>
            <para>Returns maximally possible number of output feature vectors (based on maximally possible online data portion size).</para>
            <para>This number is intended to be used for pre-allocation of feature vector lists.</para>
            </summary>
            <param name="dataSize">Maximally possible online data portion size (number of samples)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.VectorCountFromSeconds(System.Double)">
            <summary>
            <para>Returns maximally possible number of output feature vectors (based on maximally possible duration of online data portion).</para>
            <para>This number is intended to be used for pre-allocation of feature vector lists.</para>
            </summary>
            <param name="seconds">Maximally possible duration of online data portion (in seconds)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.EnsureSize(System.Int32)">
            <summary>
            <para>Ensures the size of internal buffer for accumulated samples.</para>
            <para>If the new size exceeds the buffer size, it will be auto-resized.</para>
            </summary>
            <param name="dataSize">Required size (measured in sample count)</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.EnsureSizeFromSeconds(System.Double)">
            <summary>
            <para>Ensures the size of internal buffer for accumulated samples based on required duration.</para>
            <para>If the new size (computed from duration) exceeds the buffer size, it will be auto-resized.</para>
            </summary>
            <param name="seconds">Required duration in seconds</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.ComputeFrom(System.Single[],System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <para>Computes feature vectors from <paramref name="data"/> and stores them in <paramref name="featureVectors"/>.</para>
            <para>Returns the number of actually computed feature vectors.</para>
            </summary>
            <param name="data">Block of data</param>
            <param name="featureVectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.ComputeFrom(System.Single[])">
            <summary>
            <para>Computes feature vectors from <paramref name="data"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="data">Block of data</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32,System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <para>Computes feature vectors from <paramref name="data"/> and stores them in <paramref name="featureVectors"/>.</para>
            <para>Returns the number of actually computed feature vectors.</para>
            </summary>
            <param name="data">Block of data</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
            <param name="featureVectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32)">
            <summary>
            <para>Computes feature vectors from <paramref name="data"/>.</para>
            <para>Returns the list of computed feature vectors or empty list, if the number of samples is less than the size of analysis frame.</para>
            </summary>
            <param name="data">Block of data</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Base.OnlineFeatureExtractor.Reset">
            <summary>
            Resets online feature extractor.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.ChromaExtractor">
            <summary>
            Represents chroma features extractor.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.ChromaExtractor.FeatureDescriptions">
            <summary>
            <para>Gets feature names:</para>
            <para>"C", "C#", "D", "D#", etc. if chroma count == 12 and baseC == true; </para>
            <para>"A", "A#", "B", "C",  etc. if chroma count == 12 and baseC == false; </para>
            <para>"chroma1", "chroma2", etc. otherwise.</para>
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.ChromaExtractor._filterBank">
            <summary>
            Filterbank matrix of dimension [ChromaCount * (blockSize/2 + 1)].
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.ChromaExtractor.FilterBank">
            <summary>
            Gets filterbank matrix of dimension [ChromaCount * (blockSize/2 + 1)].
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.ChromaExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.ChromaExtractor._spectrum">
            <summary>
            Internal buffer for a signal spectrum at each step.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.ChromaExtractor._options">
            <summary>
            Chroma extractor options.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.ChromaExtractor.#ctor(NWaves.FeatureExtractors.Options.ChromaOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.ChromaExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            Computes chroma feature vector in one frame.
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one chroma feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.ChromaExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.ChromaExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.ChromaExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.FilterbankExtractor">
            <summary>
            <para>
            <see cref="T:NWaves.FeatureExtractors.FilterbankExtractor"/> computes in each frame 
            spectral energies in frequency bands defined by a given filterbank (channel outputs).
            </para>
            
            <para>So it's like MFCC but without DCT-compressing of the filterbank-mapped spectrum.</para>
            
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.FilterbankExtractor.FeatureDescriptions">
            <summary>
            Gets feature names (simply "fb0", "fb1", "fb2", etc.)
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.FilterbankExtractor.FilterBank">
            <summary>
            Gets filterbank matrix of dimension [filterbankSize * (blockSize/2 + 1)].
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.FilterbankExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.FilterbankExtractor._nonLinearityType">
            <summary>
            Non-linearity type (logE, log10, decibel, cubic root).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.FilterbankExtractor._spectrumType">
            <summary>
            Spectrum calculation scheme (power/magnitude normalized/not normalized).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.FilterbankExtractor._logFloor">
            <summary>
            Floor value for LOG calculations.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.FilterbankExtractor._getSpectrum">
            <summary>
            Delegate for calculating spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.FilterbankExtractor._postProcessSpectrum">
            <summary>
            Delegate for post-processing spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.FilterbankExtractor._spectrum">
            <summary>
            Internal buffer for a signal spectrum at each step.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.FilterbankExtractor._bandSpectrum">
            <summary>
            Internal buffer for a post-processed band spectrum at each step.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.FilterbankExtractor.#ctor(NWaves.FeatureExtractors.Options.FilterbankOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.FilterbankExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            Computes vector of filter bank channel outputs in one frame.
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.FilterbankExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.FilterbankExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.FilterbankExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.LpccExtractor">
            <summary>
            Represents Linear Prediction Cepstral Coefficients (LPCC) extractor.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.LpccExtractor.FeatureDescriptions">
            <summary>
            Gets feature names (simply "lpcc0", "lpcc1", etc.)
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpccExtractor._order">
            <summary>
            Order of an LPC-filter.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpccExtractor._lifterSize">
            <summary>
            Size of liftering window.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpccExtractor._lifterCoeffs">
            <summary>
            Liftering window coefficients.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpccExtractor._convolver">
            <summary>
            Internal convolver.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpccExtractor._cc">
            <summary>
            Internal buffer for cross-correlation signal.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpccExtractor._lpc">
            <summary>
            Internal buffer for LPC-coefficients.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpccExtractor._reversed">
            <summary>
            Internal buffer for reversed real parts of the currently processed block.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.LpccExtractor.#ctor(NWaves.FeatureExtractors.Options.LpccOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.LpccExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            Computes LPCC vector in one frame.
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one LPCC feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.LpccExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.LpccExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.LpccExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.LpcExtractor">
            <summary>
            Represents Linear Predictive Coding (LPC) coefficients extractor.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.LpcExtractor.FeatureDescriptions">
            <summary>
            Gets feature names ("error", "lpc1", "lpc2", etc.)
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpcExtractor._order">
            <summary>
            Order of an LPC-filter.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpcExtractor._convolver">
            <summary>
            Internal convolver.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpcExtractor._reversed">
            <summary>
            Internal buffer for reversed real parts of the currently processed block.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.LpcExtractor._cc">
            <summary>
            Internal buffer for cross-correlation signal.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.LpcExtractor.#ctor(NWaves.FeatureExtractors.Options.LpcOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.LpcExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            <para>Computes LPC vector in one frame.</para>
            <para>
            Note:
                The first LP coefficient is always equal to 1.0. 
                This method replaces it with the value of prediction error.
            </para>
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one LPC feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.LpcExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.LpcExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.LpcExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.MfccExtractor">
            <summary>
            <para>Represents Mel Frequency Cepstral Coefficients (MFCC) extractor.</para>
            <para>
            Since so many variations of MFCC have been developed since 1980, 
            this class is very general and allows customizing a lot of parameters:
            <list type="bullet">
               <item>filterbank (by default it's MFCC-FB24 HTK/Kaldi-style)</item>
               <item>non-linearity type (logE, log10, decibel (librosa power_to_db analog), cubic root)</item>
               <item>spectrum calculation type (power/magnitude normalized/not normalized)</item>
               <item>DCT type (1,2,3,4 normalized or not): "1", "1N", "2", "2N", etc.</item>
               <item>floor value for LOG-calculations (usually it's float.Epsilon; HTK default seems to be 1.0 and in librosa 1e-10 is used)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.MfccExtractor.FeatureDescriptions">
            <summary>
            Gets feature names (simply "mfcc0", "mfcc1", "mfcc2", etc.)
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.MfccExtractor.FilterBank">
            <summary>
            Gets filterbank matrix of dimension [filterbankSize * (fftSize/2 + 1)]. 
            By default it's mel filterbank.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._lifterSize">
            <summary>
            Size of liftering window.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._lifterCoeffs">
            <summary>
            Liftering window coefficients.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._dct">
            <summary>
            DCT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._dctType">
            <summary>
            DCT type ("1", "1N", "2", "2N", "3", "3N", "4", "4N").
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._nonLinearityType">
            <summary>
            Non-linearity type (logE, log10, decibel, cubic root).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._spectrumType">
            <summary>
            Spectrum calculation scheme (power/magnitude normalized/not normalized).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._logFloor">
            <summary>
            Floor value for LOG calculations.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._includeEnergy">
            <summary>
            Should the first MFCC coefficient be replaced with LOG(energy).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._logEnergyFloor">
            <summary>
            Floor value for LOG-energy calculation.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._getSpectrum">
            <summary>
            Delegate for calculating spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._postProcessSpectrum">
            <summary>
            Delegate for post-processing spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._applyDct">
            <summary>
            Delegate for applying DCT.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._spectrum">
            <summary>
            Internal buffer for a signal spectrum at each step.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.MfccExtractor._melSpectrum">
            <summary>
            Internal buffer for a post-processed mel-spectrum at each step
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.MfccExtractor.#ctor(NWaves.FeatureExtractors.Options.MfccOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.MfccExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            <para>Computes MFCC feature vector in one frame.</para>
            <para>
            General algorithm:
            <list type="number">
                <item>Apply window</item>
                <item>Obtain power spectrum</item>
                <item>Apply mel filterbank (or any other filterbank)</item>
                <item>Apply nonlinearity (log, by default)</item>
                <item>Do DCT</item>
                <item>[Optional] lifter MFCC-cepstrum</item>
            </list>
            </para>
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one MFCC feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.MfccExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.MfccExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.MfccExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor">
            <summary>
            <para><see cref="T:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor"/> follows MPEG-7 recommendations to evaluate the following features:</para>
            <list type="bullet">
                <item>Spectral features (MPEG-7)</item>
                <item>Harmonic features</item>
                <item>Perceptual features</item>
            </list>
            <para>It's a flexible extractor that allows varying almost everything.</para>
            <para>
            The difference between <see cref="T:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor"/> and <see cref="T:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor"/> 
            is that former calculates spectral features from total energy in frequency BANDS 
            while latter analyzes signal energy at particular frequencies (spectral bins).
            </para>
            <para>
            Check FeatureSet and HarmonicSet to see the full list of supported features.
            </para>
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.FeatureSet">
            <summary>
            Full set of supported spectral features.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.HarmonicSet">
            <summary>
            Full set of supported harmonic features.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.FeatureDescriptions">
            <summary>
            Gets string annotations (or simply names) of features.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._filterbank">
            <summary>
            Filterbank from frequency bands.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._frequencyBands">
            <summary>
            Internal buffer for frequency bands.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._frequencies">
            <summary>
            Internal buffer for central frequencies.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._peakFrequencies">
            <summary>
            Internal buffer for harmonic peak frequencies (optional).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._peaks">
            <summary>
            Internal buffer for spectral positions of harmonic peaks (optional).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._extractors">
            <summary>
            Extractor functions.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._parameters">
            <summary>
            Extractor parameters.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._harmonicExtractors">
            <summary>
            Harmonic extractor functions (optional).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._spectrum">
            <summary>
            Internal buffer for magnitude spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._mappedSpectrum">
            <summary>
            Internal buffer for total energies in frequency bands.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._pitchEstimator">
            <summary>
            Pitch estimator function (optional).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._pitchTrack">
            <summary>
            Array of precomputed pitches (optional).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._pitchPos">
            <summary>
            Current position in pitch track.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor._peaksDetector">
            <summary>
            Harmonic peaks detector function (optional).
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.#ctor(NWaves.FeatureExtractors.Options.MultiFeatureOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.IncludeHarmonicFeatures(System.String,System.Int32,System.Func{System.Single[],System.Single},System.Action{System.Single[],System.Int32[],System.Single[],System.Int32,System.Single},System.Single,System.Single)">
            <summary>
            <para>Adds set of harmonic features to extractor's list.</para>
            <para>
            <paramref name="pitchEstimator"/> is the function that should be used for pitch estimation. 
            By default, method <see cref="M:NWaves.Features.Pitch.FromSpectralPeaks(System.Single[],System.Int32,System.Single,System.Single)"/> is called.
            </para>
            <para>
            <paramref name="peaksDetector"/> is the function that should be used for peak detection. 
            By default, method <see cref="M:NWaves.Features.Harmonic.Peaks(System.Single[],System.Int32[],System.Single[],System.Int32,System.Single)"/> is called.
            </para>
            </summary>
            <param name="featureList">String names/annotations of newly added harmonic features</param>
            <param name="peakCount">Max number of harmonic peaks</param>
            <param name="pitchEstimator">Function that should be used for pitch estimation</param>
            <param name="peaksDetector">Function that should be used for peak detection</param>
            <param name="lowPitch">Lower frequency of expected pitch range</param>
            <param name="highPitch">Upper frequency of expected pitch range</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.AddHarmonicFeature(System.String,System.Func{System.Single[],System.Int32[],System.Single[],System.Single})">
            <summary>
            Adds user-defined harmonic feature to extractor's list (and the routine for its calculation).
            </summary>
            <param name="name">Feature name/annotation</param>
            <param name="algorithm">Routine for calculation of the feature</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.SetPitchTrack(System.Single[])">
            <summary>
            Sets array of precomputed pitches.
            </summary>
            <param name="pitchTrack">Array of pitches computed elsewhere</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32,System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <para>Computes MPEG-7 feature vectors from <paramref name="samples"/> and stores them in <paramref name="vectors"/>.</para>
            <para>Returns the number of actually computed feature vectors</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
            <param name="vectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            Computes MPEG-7 features in one frame.
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.IsParallelizable">
            <summary>
            Returns false if array of pitches was set manually, 
            since in this case <see cref="T:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor"/> does not support parallelization. 
            Returns true in all other cases.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.Mpeg7SpectralFeaturesExtractor.ParallelCopy">
            <summary>
            <para>Creates thread-safe copy of the extractor for parallel computations.</para>
            <para>Returns null if the extractor does not support parallelization.</para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor">
            <summary>
            <para>Represents extractor of spectral features.</para>
            <para>
            It's a flexible extractor that allows setting frequencies of interest. 
            At least one spectral feature must be specified.
            </para>
            <para>
            Check FeatureSet to see the full list of supported features.
            </para>
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor.FeatureSet">
            <summary>
            Full set of supported spectral features.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor.FeatureDescriptions">
            <summary>
            Gets string annotations (or simply names) of features.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor._extractors">
            <summary>
            Extractor functions.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor._parameters">
            <summary>
            Extractor parameters.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor._frequencies">
            <summary>
            Center frequencies (uniform in Herz scale by default; could be uniform in mel-scale or octave-scale, for example).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor._spectrum">
            <summary>
            Internal buffer for magnitude spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor._mappedSpectrum">
            <summary>
            Internal buffer for magnitude spectrum taken only at frequencies of interest.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor._frequencyPositions">
            <summary>
            Internal buffer for spectral positions of frequencies of interest.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor.#ctor(NWaves.FeatureExtractors.Options.MultiFeatureOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor.AddFeature(System.String,System.Func{System.Single[],System.Single[],System.Single})">
            <summary>
            Adds user-defined spectral feature to extractor's list (and the routine for its calculation).
            </summary>
            <param name="name">Feature name/annotation</param>
            <param name="algorithm">Routine for calculation of the feature</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            Computes spectral features in one frame.
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor">
            <summary>
            Represents extractor of time-domain features (energy, rms, ZCR, entropy).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.FeatureSet">
            <summary>
            Full set of features.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.FeatureDescriptions">
            <summary>
            Gets string annotations (or simply names) of features.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor._extractors">
            <summary>
            Extractor functions.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor._parameters">
            <summary>
            Parameters.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.#ctor(NWaves.FeatureExtractors.Options.MultiFeatureOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.AddFeature(System.String,System.Func{NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Single})">
            <summary>
            Adds user-defined feature to extractor's list (and the routine for its calculation).
            </summary>
            <param name="name">Feature name/annotation</param>
            <param name="algorithm">Routine for calculation of the feature</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32,System.Collections.Generic.IList{System.Single[]})">
            <summary>
            <para>Computes feature vectors from <paramref name="samples"/> and stores them in <paramref name="vectors"/>.</para>
            <para>Returns the number of actually computed feature vectors.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="startSample">Index of the first sample in array for processing</param>
            <param name="endSample">Index of the last sample in array for processing</param>
            <param name="vectors">Pre-allocated sequence for storing the resulting feature vectors</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            <para>Processes one frame in block of data at each step.</para>
            <para><see cref="T:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor"/> does not provide this function.</para>
            <para>Call <see cref="M:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.ComputeFrom(System.Single[],System.Int32,System.Int32,System.Collections.Generic.IList{System.Single[]})"/> method instead.</para>
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.AmsOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.AmsExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Rectangular</item>
                <item>ModulationFftSize = 64</item>
                <item>ModulationHopSize = 4</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.ChromaOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.ChromaExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            Specific contracts are:
            <list type="bullet">
                <item>Number of chroma coefficients must be positive</item>
                <item>Norm must be positive</item>
                <item>Octave width must be positive</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>FeatureCount = 12</item>
                <item>Window = WindowType.Hann</item>
                <item>OctaveWidth = 2</item>
                <item>CenterOctave = 5.0</item>
                <item>Norm = 2</item>
                <item>BaseC = true</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.FeatureExtractorOptions">
            <summary>
            Defines basic properties for configuring feature extractors. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Rectangular</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.FeatureCount">
            <summary>
            Gets or sets number of features to extract (feature vector size).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.SamplingRate">
            <summary>
            Gets or sets expected sampling rate of signals for analysis.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.FrameDuration">
            <summary>
            Gets or sets length of analysis frame (duration in seconds). By default, 0.025 (25ms).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.HopDuration">
            <summary>
            Gets or sets hop length (duration in seconds). By default, 0.01 (10ms).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.FrameSize">
            <summary>
            Gets or sets size of analysis frame (number of samples). Has priority over <see cref="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.FrameDuration"/>. 
            If it is not specified explicitly, then it is auto-computed from <see cref="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.FrameDuration"/>.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.HopSize">
            <summary>
            Gets or sets hop size (number of samples). Has priority over <see cref="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.HopDuration"/>. 
            If it is not specified explicitly, then it is auto-computed from <see cref="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.HopDuration"/>.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.PreEmphasis">
            <summary>
            Gets or sets pre-emphasis filter coefficient.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.Window">
            <summary>
            Gets or sets window function (by default, rectangular window, i.e. no windowing). 
            In <see cref="T:NWaves.FeatureExtractors.Options.FilterbankOptions"/> and its subclasses (MFCC, PLP, etc.) default window is Hamming.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.FeatureExtractorOptions.Errors">
            <summary>
            Returns the list of error messages describing particular configuration validation problem.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.FeatureExtractorOptionsExtensions">
            <summary>
            Provides methods for serializing and casting feature extractor configuration options. 
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Options.FeatureExtractorOptionsExtensions.SaveOptions(System.IO.Stream,NWaves.FeatureExtractors.Options.FeatureExtractorOptions)">
            <summary>
            Serializes feature extractor configuration options to JSON.
            </summary>
            <param name="stream">Output stream for JSON data</param>
            <param name="options">Feature extractor configuration options</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Options.FeatureExtractorOptionsExtensions.LoadOptions``1(System.IO.Stream)">
            <summary>
            Deserializes feature extractor configuration options from JSON.
            </summary>
            <typeparam name="T">Options type</typeparam>
            <param name="stream">Input stream containing JSON data</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Options.FeatureExtractorOptionsExtensions.Cast``2(``0)">
            <summary>
            Casts feature extractor configuration options of one type to options of another type.
            </summary>
            <typeparam name="T">Original options type</typeparam>
            <typeparam name="U">Required options type</typeparam>
            <param name="options">Feature extractor configuration options</param>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.FilterbankOptions">
            <summary>
            Defines properties for configuring filterbank-based extractors (including MFCC, PLP, etc.). 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            Specific contracts are:
            <list type="bullet">
                <item>Filter bank size must be positive number or the entire filter bank must be specified (not null)</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Hamming</item>
                <item>FilterbankSize = 12 (acts as FeatureCount)</item>
                <item>LowFrequency = 0</item>
                <item>HighFrequency = 0 (i.e. it will be auto-computed as SamplingRate/2)</item>
                <item>NonLinearity = NonLineriatyType.None</item>
                <item>SpectrumType = SpectrumType.Power</item>
                <item>LogFloor = 1.4e-45 (float epsilon)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.LpccOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.LpccExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            Specific contracts are:
            <list type="bullet">
                <item>FeatureCount must be positive mumber</item>
                <item>LPC order must be positive mumber (usually, FeatureCount-1)</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Rectangular</item>
                <item>LifterSize = 22</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.LpccOptions.LifterSize">
            <summary>
            Gets or sets number of liftered coefficients (by default, 22).
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.LpcOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.LpcExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            Specific contracts are:
            <list type="bullet">
                <item>LPC order must be positive mumber</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>FeatureCount = LPC order + 1 (auto-computed)</item>
                <item>Window = WindowType.Rectangular</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.LpcOptions.LpcOrder">
            <summary>
            Gets or sets order of LPC. 
            This property is required. It has priority over FeatureCount. 
            FeatureCount will be autocomputed by <see cref="T:NWaves.FeatureExtractors.LpcExtractor"/> as LpcOrder+1.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.MfccOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.MfccExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            Specific contracts are:
            <list type="bullet">
                <item>FeatureCount must be positive mumber</item>
                <item>DCT type must have one of these values: "1", "2", "3", "4", "1N", "2N", "3N", "4N"</item>
                <item>Filter bank size must be positive number or the entire filter bank must be specified (not null)</item>
                <item>FeatureCount must not exceed filterbank size</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Hamming</item>
                <item>FilterbankSize = 24</item>
                <item>LowFrequency = 0</item>
                <item>HighFrequency = 0 (i.e. it will be auto-computed as SamplingRate/2)</item>
                <item>DctType = "2N"</item>
                <item>NonLinearity = NonLineriatyType.Log10</item>
                <item>SpectrumType = SpectrumType.Power</item>
                <item>LifterSize = 0 (no liftering)</item>
                <item>LogFloor = 1.4e-45 (float epsilon)</item>
                <item>LogEnergyFloor = 1.4e-45 (float epsilon)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.MfccOptions.LifterSize">
            <summary>
            Gets or sets number of liftered coefficients (0, by default, i.e. there will be no liftering).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.MfccOptions.DctType">
            <summary>
            Gets or sets DCT type (by default, it's normalized DCT-II, or "2N").
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.MultiFeatureOptions">
            <summary>
            Defines properties for configuring multi-feature extractors. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Rectangular</item>
                <item>FeatureList = "all"</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.NonLinearityType">
            <summary>
            Defines non-linear post-processing schemes.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.PitchOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.PitchExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            Specific contracts are:
            <list type="bullet">
                <item>HighFrequency must be greater than LowFrequency</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>LowFrequency = 80 (Hz)</item>
                <item>HighFrequency = 400 (Hz)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.PlpOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.PlpExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            Specific contracts are:
            <list type="bullet">
                <item>FeatureCount must be positive mumber</item>
                <item>Filter bank size must be positive number or the entire filter bank must be specified (not null)</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Hamming</item>
                <item>FilterbankSize = 24</item>
                <item>LowFrequency = 0</item>
                <item>HighFrequency = 0 (i.e. it will be auto-computed as SamplingRate/2)</item>
                <item>LpcOrder = 0 (i.e. it will be autocomputed as FeatureCount-1)</item>
                <item>NonLinearity = NonLineriatyType.Log10</item>
                <item>SpectrumType = SpectrumType.Power</item>
                <item>LifterSize = 0 (no liftering)</item>
                <item>Rasta = 0 (no RASTA-filtering)</item>
                <item>LogFloor = 1.4e-45 (float epsilon)</item>
                <item>LogEnergyFloor = 1.4e-45 (float epsilon)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.PlpOptions.LpcOrder">
            <summary>
            Gets or sets order of LPC (0, by default, i.e. it will be autocomputed as FeatureCount-1).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.PlpOptions.Rasta">
            <summary>
            Gets or sets coefficient of RASTA-filter (0, by default, i.e. there will be no RASTA-filtering).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.Options.PlpOptions.LifterSize">
            <summary>
            Gets or sets number of liftered coefficients (0, by default, i.e. there will be no liftering).
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.PnccOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.PnccExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            Specific contracts are:
            <list type="bullet">
                <item>FeatureCount must be positive mumber</item>
                <item>Filter bank size must be positive number or the entire filter bank must be specified (not null)</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Hamming</item>
                <item>FilterbankSize = 40</item>
                <item>LowFrequency = 100</item>
                <item>HighFrequency = 6800</item>
                <item>Power = 15</item>
                <item>SpectrumType = SpectrumType.Power</item>
                <item>LifterSize = 0 (no liftering)</item>
                <item>LogFloor = 1.4e-45 (float epsilon)</item>
                <item>LogEnergyFloor = 1.4e-45 (float epsilon)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.SpectrumType">
            <summary>
            Defines spectrum calculation modes.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Options.SpectrumType.Magnitude">
            <summary>
            Sqrt(re*re + im*im).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Options.SpectrumType.Power">
            <summary>
            re*re + im*im.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Options.SpectrumType.MagnitudeNormalized">
            <summary>
            Sqrt(re*re + im*im) / fftSize.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Options.SpectrumType.PowerNormalized">
            <summary>
            (re*re + im*im) / fftSize.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Options.WaveletOptions">
            <summary>
            Defines properties for configuring <see cref="T:NWaves.FeatureExtractors.WaveletExtractor"/>. 
            General contracts are:
            <list type="bullet">
                <item>Sampling rate must be positive number</item>
                <item>Frame duration must be positive number</item>
                <item>Hop duration must be positive number</item>
            </list>
            <para>
            Default values:
            <list type="bullet">
                <item>FrameDuration = 0.025</item>
                <item>HopDuration = 0.01</item>
                <item>Window = WindowType.Rectangular</item>
                <item>WaveletName = "haar"</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.PitchExtractor">
            <summary>
            Represents pitch extractor / tracker.
            <para>
            Pitch extractor calls autocorrelation method since it's best in terms of universality and quality. 
            The feature vector contains 1 component : pitch.
            </para>
            <para>
            If there's a need to create pitch extractor based on other time-domain method (YIN or ZcrSchmitt), 
            then <see cref="T:NWaves.FeatureExtractors.Multi.TimeDomainFeaturesExtractor"/> can be used.
            </para>
            <para>
            If there's a need to create pitch extractor based on a certain spectral method (HSS or HPS), 
            then <see cref="T:NWaves.FeatureExtractors.Multi.SpectralFeaturesExtractor"/> can be used.
            </para>
            <para>
            Example:
            
            <code>
            var extractor = new TimeDomainFeaturesExtractor(sr, "en", 0.0256, 0.010);
            <br/>
            extractor.AddFeature("yin", (s, start, end) => { return Pitch.FromYin(s, start, end); });
            <br/>
            var pitches = extractor.ComputeFrom(signal);
            </code>
            </para>
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PitchExtractor.FeatureDescriptions">
            <summary>
            Gets names of pitch estimation algorithms.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PitchExtractor._low">
            <summary>
            Lower frequency of expected pitch range.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PitchExtractor._high">
            <summary>
            Upper frequency of expected pitch range.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PitchExtractor._convolver">
            <summary>
            Internal convolver.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PitchExtractor._reversed">
            <summary>
            Internal buffer for reversed real parts of the currently processed block.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PitchExtractor._cc">
            <summary>
            Internal buffer for cross-correlation signal.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PitchExtractor.#ctor(NWaves.FeatureExtractors.Options.PitchOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PitchExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            Computes pitch in one frame.
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Pitch (feature vector containing only pitch) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.PitchExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.PitchExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PitchExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.PlpExtractor">
            <summary>
            Represents Perceptual Linear Predictive Coefficients extractor (PLP-RASTA).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PlpExtractor.FeatureDescriptions">
            <summary>
            Gets feature names (simply "plp0", "plp1", "plp2", etc.)
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PlpExtractor.FilterBank">
            <summary>
            <para>Gets filterbank matrix of dimension [filterbankSize * (fftSize/2 + 1)].</para>
            <para>
            By default it's bark filterbank like in original H.Hermansky's work 
            (although many specialists prefer mel bands).
            </para>
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._centerFrequencies">
            <summary>
            Filterbank center frequencies.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._rasta">
            <summary>
            RASTA coefficient (if zero, then no RASTA filtering).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._rastaFilters">
            <summary>
            RASTA filters for each critical band.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._lifterSize">
            <summary>
            Size of liftering window.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._lifterCoeffs">
            <summary>
            Liftering window coefficients.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._includeEnergy">
            <summary>
            Should the first PLP coefficient be replaced with LOG(energy).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._logEnergyFloor">
            <summary>
            Floor value for LOG-energy calculation.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._spectrum">
            <summary>
            Internal buffer for a signal spectrum at each step.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._bandSpectrum">
            <summary>
            Internal buffer for a signal spectrum grouped to frequency bands.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._equalLoudnessCurve">
            <summary>
            Equal loudness weighting coefficients.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._lpcOrder">
            <summary>
            LPC order.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._lpc">
            <summary>
            Internal buffer for LPC-coefficients.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._idftTable">
            <summary>
            Precomputed IDFT table.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PlpExtractor._cc">
            <summary>
            Autocorrelation samples (computed as IDFT of power spectrum).
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PlpExtractor.#ctor(NWaves.FeatureExtractors.Options.PlpOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PlpExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            <para>Computes PLP-RASTA feature vector in one frame.</para>
            <para>
            General algorithm:
            <list type="number">
                <item>Apply window</item>
                <item>Obtain power spectrum</item>
                <item>Apply filterbank of bark bands (or mel bands)</item>
                <item>[Optional] filter each component of the processed spectrum with a RASTA filter</item>
                <item>Apply equal loudness curve</item>
                <item>Apply nonlinearity (take cubic root)</item>
                <item>Do LPC</item>
                <item>Convert LPC to cepstrum</item>
                <item>[Optional] lifter cepstrum</item>
            </list>
            </para>
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one PLP feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.PlpExtractor.Reset">
            <summary>
            Resets extractor.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PlpExtractor.IsParallelizable">
            <summary>
            Returns false in RASTA-filtering mode (i.e. if RASTA-coefficient is not 0), 
            since in this case <see cref="T:NWaves.FeatureExtractors.PlpExtractor"/> does not support parallelization. 
            Returns true in all other cases.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PlpExtractor.ParallelCopy">
            <summary>
            <para>Creates thread-safe copy of the extractor for parallel computations.</para>
            <para>Returns null if the extractor does not support parallelization.</para>
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.PnccExtractor">
            <summary>
            Represents Power-Normalized Cepstral Coefficients (PNCC) extractor.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.FeatureDescriptions">
            <summary>
            Gets feature names (simply "pncc0", "pncc1", "pncc2", etc.)
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.M">
            <summary>
            Gets or sets window length for median-time power (2 * M + 1).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.N">
            <summary>
            Gets or sets window length for spectral smoothing (2 * N + 1).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.LambdaA">
            <summary>
            Gets or sets lambda_a used in asymmetric noise suppression formula (4).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.LambdaB">
            <summary>
            Gets or sets lambda_b used in asymmetric noise suppression formula (4).
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.LambdaT">
            <summary>
            Gets or sets the forgetting factor in temporal masking formula.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.LambdaMu">
            <summary>
            Gets or sets the forgetting factor in formula (15) in [Kim and Stern, 2016].
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.C">
            <summary>
            Gets or sets threshold for detecting excitation/non-excitation segments.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.MuT">
            <summary>
            Gets or sets the multiplier in formula (12) in [Kim and Stern, 2016].
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.PnccExtractor.FilterBank">
            <summary>
            Gets filterbank matrix of dimension [filterbankSize * (fftSize/2 + 1)]. 
            By default it's gammatone filterbank.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._power">
            <summary>
            Nonlinearity coefficient (if 0 then Log10 is applied).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._includeEnergy">
            <summary>
            Should the first PNCC coefficient be replaced with LOG(energy).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._logEnergyFloor">
            <summary>
            Floor value for LOG-energy calculation.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._dct">
            <summary>
            DCT-II transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._spectrum">
            <summary>
            Internal buffer for a signal spectrum at each step.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._mean">
            <summary>
            Value for mean normalization.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._ringBuffer">
            <summary>
            Ring buffer for efficient processing of consecutive spectra.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.PnccExtractor._step">
            <summary>
            Step of PNCC algorithm.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PnccExtractor.#ctor(NWaves.FeatureExtractors.Options.PnccOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PnccExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            <para>Computes PNCC vector in one frame according to [Kim and Stern, 2016].</para>
            <para>
            General algorithm:
            <list type="number">
                <item>Apply window</item>
                <item>Obtain power spectrum</item>
                <item>Apply gammatone filters (squared)</item>
                <item>Medium-time processing (asymmetric noise suppression, temporal masking, spectral smoothing)</item>
                <item>Apply nonlinearity</item>
                <item>Do DCT-II (normalized)</item>
            </list>
            </para>
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one PNCC feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.PnccExtractor.Reset">
            <summary>
            Resets extractor.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.PnccExtractor.SpectraRingBuffer">
            <summary>
            Helper Ring Buffer class for efficient processing of consecutive spectra.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PnccExtractor.SpectraRingBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.FeatureExtractors.PnccExtractor.SpectraRingBuffer"/> with given <paramref name="capacity"/> and <paramref name="spectrumSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PnccExtractor.SpectraRingBuffer.Add(System.Single[])">
            <summary>
            Adds <paramref name="spectrum"/> to the ring buffer.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.PnccExtractor.SpectraRingBuffer.Reset">
            <summary>
            Resets ring buffer.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.Serializers.CsvFeatureSerializer">
            <summary>
            Provides functionality of simple CSV serialization of feature vectors.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Serializers.CsvFeatureSerializer._vectors">
            <summary>
            Sequence of feature vectors for serialization.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Serializers.CsvFeatureSerializer._timeMarkers">
            <summary>
            Sequence of time markers for serialization.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Serializers.CsvFeatureSerializer._names">
            <summary>
            Sequence of feature names/annotations for serialization.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.Serializers.CsvFeatureSerializer._delimiter">
            <summary>
            Delimiter symbol.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.Serializers.CsvFeatureSerializer.#ctor(System.Collections.Generic.IList{System.Single[]},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.String},System.Char)">
            <summary>
            Constructs <see cref="T:NWaves.FeatureExtractors.Serializers.CsvFeatureSerializer"/> from the list of feature vectors for serialization.
            </summary>
            <param name="featureVectors">Sequence of feature vectors for serialization</param>
            <param name="timeMarkers">Sequence of time markers for serialization</param>
            <param name="featureNames">Sequence of feature names/annotations for serialization</param>
            <param name="delimiter">Delimiter char</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.Serializers.CsvFeatureSerializer.SerializeAsync(System.IO.Stream,System.String,System.String)">
            <summary>
            Serializes feature vectors into <paramref name="stream"/> using <paramref name="format"/> for values.
            </summary>
            <param name="stream">Output stream</param>
            <param name="format">Format/precision of values</param>
            <param name="timeFormat">Format/precision of time markers</param>
        </member>
        <member name="T:NWaves.FeatureExtractors.SpnccExtractor">
            <summary>
            Represents Simplified Power-Normalized Cepstral Coefficients (SPNCC) extractor.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.SpnccExtractor.FeatureDescriptions">
            <summary>
            Gets feature names (simply "spncc0", "spncc1", "spncc2", etc.)
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.SpnccExtractor.LambdaMu">
            <summary>
            Gets or sets the forgetting factor in formula (15) in [Kim, Stern, 2016].
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.SpnccExtractor.FilterBank">
            <summary>
            Gets filterbank (gammatone by default).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.SpnccExtractor._power">
            <summary>
            Nonlinearity coefficient (if 0 then Log10 is applied).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.SpnccExtractor._includeEnergy">
            <summary>
            Should the first SPNCC coefficient be replaced with LOG(energy).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.SpnccExtractor._logEnergyFloor">
            <summary>
            Floor value for LOG-energy calculation.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.SpnccExtractor._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.SpnccExtractor._dct">
            <summary>
            DCT-II transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.SpnccExtractor._spectrum">
            <summary>
            Internal buffer for a signal spectrum at each step.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.SpnccExtractor._filteredSpectrum">
            <summary>
            Internal buffer for gammatone spectrum.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.SpnccExtractor._mean">
            <summary>
            Value for mean normalization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.SpnccExtractor.#ctor(NWaves.FeatureExtractors.Options.PnccOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.SpnccExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            <para>Computes S(implified)PNCC vector in one frame according to [Kim and Stern, 2016].</para>
            <para>
            General algorithm:
            <list type="number">
                <item>Apply window</item>
                <item>Obtain power spectrum</item>
                <item>Apply gammatone filters (squared)</item>
                <item>Mean power normalization</item>
                <item>Apply nonlinearity</item>
                <item>Do DCT-II (normalized)</item>
            </list>
            </para>
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one SPNCC feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.SpnccExtractor.Reset">
            <summary>
            Resets extractor.
            </summary>
        </member>
        <member name="T:NWaves.FeatureExtractors.WaveletExtractor">
            <summary>
            Represents wavelet extractor.
            </summary>
        </member>
        <member name="P:NWaves.FeatureExtractors.WaveletExtractor.FeatureDescriptions">
            <summary>
            Gets feature names (simply "w0", "w1", etc.)
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.WaveletExtractor._fwt">
            <summary>
            Fast Wavelet Transformer.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.WaveletExtractor._waveletName">
            <summary>
            Wavelet name.
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.WaveletExtractor._level">
            <summary>
            FWT level (0 = auto).
            </summary>
        </member>
        <member name="F:NWaves.FeatureExtractors.WaveletExtractor._coeffs">
            <summary>
            Internal buffer for FWT coefficients.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.WaveletExtractor.#ctor(NWaves.FeatureExtractors.Options.WaveletOptions)">
            <summary>
            Constructs extractor from configuration <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.WaveletExtractor.ProcessFrame(System.Single[],System.Single[])">
            <summary>
            Computes vector of FWT coefficients in one frame.
            </summary>
            <param name="block">Block of data</param>
            <param name="features">Features (one FWT feature vector) computed in the block</param>
        </member>
        <member name="M:NWaves.FeatureExtractors.WaveletExtractor.IsParallelizable">
            <summary>
            Returns true, since <see cref="T:NWaves.FeatureExtractors.WaveletExtractor"/> always supports parallelization.
            </summary>
        </member>
        <member name="M:NWaves.FeatureExtractors.WaveletExtractor.ParallelCopy">
            <summary>
            Creates thread-safe copy of the extractor for parallel computations.
            </summary>
        </member>
        <member name="T:NWaves.Features.Harmonic">
            <summary>
            Provides methods for computing harmonic spectral features.
            </summary>
        </member>
        <member name="M:NWaves.Features.Harmonic.Peaks(System.Single[],System.Int32[],System.Single[],System.Int32,System.Single)">
            <summary>
            <para>Finds harmonic peaks (peak indices and frequencies) in spectrum.</para>
            <para>
            If <paramref name="pitch"/> is not specified explicitly, 
            it will be auto-estimated using method <see cref="M:NWaves.Features.Pitch.FromSpectralPeaks(System.Single[],System.Int32,System.Single,System.Single)"/>.
            </para>
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="peaks">Array for storing computed peak positions</param>
            <param name="peakFrequencies">Array for storing computed peak frequencies</param>
            <param name="samplingRate">Sampling rate</param>
            <param name="pitch">Pitch in Hz, or any negative number if the pitch is unknown</param>
        </member>
        <member name="M:NWaves.Features.Harmonic.Centroid(System.Single[],System.Int32[],System.Single[])">
            <summary>
            Computes harmonic centroid.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="peaks">Peak positions (indices in spectrum)</param>
            <param name="peakFrequencies">Peak frequencies</param>
        </member>
        <member name="M:NWaves.Features.Harmonic.Spread(System.Single[],System.Int32[],System.Single[])">
            <summary>
            Computes harmonic spread.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="peaks">Peak positions (indices in spectrum)</param>
            <param name="peakFrequencies">Peak frequencies</param>
        </member>
        <member name="M:NWaves.Features.Harmonic.Inharmonicity(System.Single[],System.Int32[],System.Single[])">
            <summary>
            Computes inharmonicity.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="peaks">Peak positions (indices in spectrum)</param>
            <param name="peakFrequencies">Peak frequencies</param>
        </member>
        <member name="M:NWaves.Features.Harmonic.OddToEvenRatio(System.Single[],System.Int32[])">
            <summary>
            Computes harmonic odd-to-even ratio.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="peaks">Peak positions (indices in spectrum)</param>
        </member>
        <member name="M:NWaves.Features.Harmonic.Tristimulus(System.Single[],System.Int32[],System.Int32)">
            <summary>
            Computes tristimulus (<paramref name="n"/>th component).
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="peaks">Peak positions (indices in spectrum)</param>
            <param name="n">Tristimulus component index: 1, 2 or 3</param>
        </member>
        <member name="T:NWaves.Features.Perceptual">
            <summary>
            Provides methods for computing perceptual audio features.
            </summary>
        </member>
        <member name="M:NWaves.Features.Perceptual.Loudness(System.Single[])">
            <summary>
            Computes perceptual loudness (the sum of specific loudnesses: N'(z) = E(z)^0.23).
            </summary>
            <param name="spectralBands">Array of energies in given spectral bands</param>
        </member>
        <member name="M:NWaves.Features.Perceptual.Sharpness(System.Single[])">
            <summary>
            <para>Computes perceptual sharpness (essentially, the equivalent of spectral centroid).</para>
            </summary>
            <param name="spectralBands">Array of energies in given spectral bands</param>
        </member>
        <member name="T:NWaves.Features.Pitch">
            <summary>
            Provides methods for pitch estimation and tracking.
            </summary>
        </member>
        <member name="M:NWaves.Features.Pitch.FromAutoCorrelation(System.Single[],System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Estimates pitch from <paramref name="samples"/> using autocorrelation method.
            </summary>
            <param name="samples">Array of samples</param>
            <param name="samplingRate">Sampling rate</param>
            <param name="startPos">Index of the first sample in array for processing</param>
            <param name="endPos">Index of the last sample in array for processing</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromAutoCorrelation(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Estimates pitch from <paramref name="signal"/> using autocorrelation method.
            </summary>
            <param name="signal">Signal</param>
            <param name="startPos">Index of the first sample in signal for processing</param>
            <param name="endPos">Index of the last sample in signal for processing</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromZeroCrossingsSchmitt(System.Single[],System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Estimates pitch from <paramref name="samples"/> based on zero crossing rate and Schmitt trigger.
            </summary>
            <param name="samples">Array of samples</param>
            <param name="samplingRate">Sampling rate</param>
            <param name="startPos">Index of the first sample in array for processing</param>
            <param name="endPos">Index of the last sample in array for processing</param>
            <param name="lowSchmittThreshold">Lower threshold in Schmitt trigger</param>
            <param name="highSchmittThreshold">Upper threshold in Schmitt trigger</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromZeroCrossingsSchmitt(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Estimates pitch from <paramref name="signal"/> based on zero crossing rate and Schmitt trigger.
            </summary>
            <param name="signal">Signal</param>
            <param name="startPos">Index of the first sample in array for processing</param>
            <param name="endPos">Index of the last sample in array for processing</param>
            <param name="lowSchmittThreshold">Lower threshold in Schmitt trigger</param>
            <param name="highSchmittThreshold">Upper threshold in Schmitt trigger</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromYin(System.Single[],System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            <para>Estimates pitch from <paramref name="samples"/> using YIN algorithm:</para>
            <para>
            De Cheveigne, A., Kawahara, H. YIN, a fundamental frequency estimator for speech and music. 
            The Journal of the Acoustical Society of America, 111(4). - 2002.
            </para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="samplingRate">Sampling rate</param>
            <param name="startPos">Index of the first sample in array for processing</param>
            <param name="endPos">Index of the last sample in array for processing</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
            <param name="cmdfThreshold">CMDF threshold</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromYin(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Estimates pitch from <paramref name="signal"/> using YIN algorithm.
            </summary>
            <param name="signal">Signal</param>
            <param name="startPos">Index of the first sample in signal for processing</param>
            <param name="endPos">Index of the last sample in signal for processing</param>>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
            <param name="cmdfThreshold">CMDF threshold</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromHss(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Estimates pitch from <paramref name="signal"/> using Harmonic Sum Spectrum (HSS) method.
            </summary>
            <param name="signal">Signal</param>
            <param name="startPos">Index of the first sample in signal for processing</param>
            <param name="endPos">Index of the last sample in signal for processing</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromHss(System.Single[],System.Int32,System.Single,System.Single)">
            <summary>
            Estimates pitch from <paramref name="spectrum"/> using Harmonic Sum Spectrum (HSS) method.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="samplingRate">Sampling rate</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromHps(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Estimates pitch from <paramref name="signal"/> using Harmonic Product Spectrum (HPS) method.
            </summary>
            <param name="signal">Signal</param>
            <param name="startPos">Index of the first sample in signal for processing</param>
            <param name="endPos">Index of the last sample in signal for processing</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromHps(System.Single[],System.Int32,System.Single,System.Single)">
            <summary>
            Estimates pitch from <paramref name="spectrum"/> using Harmonic Product Spectrum (HPS) method.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="samplingRate">Sampling rate</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromSpectralPeaks(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Estimates pitch from <paramref name="signal"/> based on spectral peaks.
            </summary>
            <param name="signal">Signal</param>
            <param name="startPos">Index of the first sample in signal for processing</param>
            <param name="endPos">Index of the last sample in signal for processing</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromSpectralPeaks(System.Single[],System.Int32,System.Single,System.Single)">
            <summary>
            Estimates pitch from <paramref name="spectrum"/> based on spectral peaks.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="samplingRate">Sampling rate</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
        </member>
        <member name="M:NWaves.Features.Pitch.FromCepstrum(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Estimates pitch from <paramref name="signal"/> based on its cepstrum.
            </summary>
            <param name="signal">Signal</param>
            <param name="startPos">Index of the first sample in signal for processing</param>
            <param name="endPos">Index of the last sample in signal for processing</param>
            <param name="low">Lower frequency of expected pitch range</param>
            <param name="high">Upper frequency of expected pitch range</param>
            <param name="cepstrumSize">Size of cepstrum</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="T:NWaves.Features.Spectral">
            <summary>
            Provides methods for computing spectral features.
            </summary>
        </member>
        <member name="M:NWaves.Features.Spectral.Centroid(System.Single[],System.Single[])">
            <summary>
            Computes spectral centroid.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="frequencies">Center frequencies</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Spread(System.Single[],System.Single[])">
            <summary>
            Computes spectral spread.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="frequencies">Center frequencies</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Decrease(System.Single[])">
            <summary>
            Computes spectral decrease.
            </summary>
            <param name="spectrum">Spectrum</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Flatness(System.Single[],System.Single)">
            <summary>
            Computes spectral flatness.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="minLevel">Amplitude threshold</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Noiseness(System.Single[],System.Single[],System.Single)">
            <summary>
            Computes spectral noiseness.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="frequencies">Center frequencies</param>
            <param name="noiseFrequency">Lower frequency of noise</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Rolloff(System.Single[],System.Single[],System.Single)">
            <summary>
            Computes spectral rolloff frequency.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="frequencies">Center frequencies</param>
            <param name="rolloffPercent">Rolloff percent</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Crest(System.Single[])">
            <summary>
            Computes spectral crest.
            </summary>
            <param name="spectrum">Spectrum</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Contrast(System.Single[],System.Single[],System.Single,System.Int32)">
            <summary>
            Computes array of spectral contrasts in spectral bands.
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="frequencies">Center frequencies</param>
            <param name="minFrequency">Starting frequency</param>
            <param name="bandCount">Number of spectral bands</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Contrast(System.Single[],System.Single[],System.Int32,System.Single)">
            <summary>
            Computes spectral contrast in a spectral band with index <paramref name="bandNo"/>. 
            </summary>
            <param name="spectrum">Spectrum</param>
            <param name="frequencies">Center frequencies</param>
            <param name="bandNo">Spectral band index</param>
            <param name="minFrequency">Starting frequency</param>
        </member>
        <member name="M:NWaves.Features.Spectral.Entropy(System.Single[])">
            <summary>
            Computes Shannon entropy of a spectrum (spectrum is treated as p.d.f.)
            </summary>
            <param name="spectrum">Spectrum</param>
        </member>
        <member name="T:NWaves.Filters.Adaptive.AdaptiveFilter">
            <summary>
            Abstract class for adaptive filters.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Adaptive.AdaptiveFilter.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Adaptive.AdaptiveFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.AdaptiveFilter.Init(System.Single[])">
            <summary>
            Inits weights of adaptive filter.
            </summary>
            <param name="weights">Weights (filter kernel)</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.AdaptiveFilter.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input and desired signals and adapts filter coefficients.
            </summary>
            <param name="input">Sample of input signal</param>
            <param name="desired">Sample of desired signal</param>
        </member>
        <member name="T:NWaves.Filters.Adaptive.LmfFilter">
            <summary>
            Represents LMF Adaptive filter (Least-Mean-Fourth algorithm).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Adaptive.LmfFilter.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Adaptive.LmfFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="mu">Mu</param>
            <param name="leakage">Leakage</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.LmfFilter.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input and desired signals and adapts filter coefficients.
            </summary>
            <param name="input">Sample of input signal</param>
            <param name="desired">Sample of desired signal</param>
        </member>
        <member name="T:NWaves.Filters.Adaptive.LmsFilter">
            <summary>
            Represents LMS Adaptive filter (Least-Mean-Squares algorithm).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Adaptive.LmsFilter.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Adaptive.LmsFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="mu">Mu</param>
            <param name="leakage">Leakage</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.LmsFilter.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input and desired signals and adapts filter coefficients.
            </summary>
            <param name="input">Sample of input signal</param>
            <param name="desired">Sample of desired signal</param>
        </member>
        <member name="T:NWaves.Filters.Adaptive.NlmfFilter">
            <summary>
            Represents NLMF Adaptive filter (Normalized Least-Mean-Fourth algorithm + Epsilon).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Adaptive.NlmfFilter.#ctor(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Adaptive.NlmfFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="mu">Mu</param>
            <param name="eps">Epsilon</param>
            <param name="leakage">Leakage</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.NlmfFilter.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input and desired signals and adapts filter coefficients.
            </summary>
            <param name="input">Sample of input signal</param>
            <param name="desired">Sample of desired signal</param>
        </member>
        <member name="T:NWaves.Filters.Adaptive.NlmsFilter">
            <summary>
            Represents NLMS Adaptive filter (Normalized Least-Mean-Squares algorithm + Epsilon).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Adaptive.NlmsFilter.#ctor(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Adaptive.NlmsFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="mu">Mu</param>
            <param name="eps">Epsilon</param>
            <param name="leakage">Leakage</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.NlmsFilter.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input and desired signals and adapts filter coefficients.
            </summary>
            <param name="input">Sample of input signal</param>
            <param name="desired">Sample of desired signal</param>
        </member>
        <member name="T:NWaves.Filters.Adaptive.RlsFilter">
            <summary>
            Represents Adaptive RLS filter (Recursive-Least-Squares algorithm).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Adaptive.RlsFilter._lambda">
            <summary>
            Lambda.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Adaptive.RlsFilter._p">
            <summary>
            Inverse corr matrix.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Adaptive.RlsFilter._gains">
            <summary>
            Matrix of gain coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Adaptive.RlsFilter._dp">
            <summary>
            Temporary matrices for calculations.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Adaptive.RlsFilter._tmp">
            <summary>
            Temporary matrices for calculations.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Adaptive.RlsFilter.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Adaptive.RlsFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Order</param>
            <param name="lambda">Lambda</param>
            <param name="initCorrMatrix">Value to initialize inverse corr matrix</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.RlsFilter.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input and desired signals and adapts filter coefficients.
            </summary>
            <param name="input">Sample of input signal</param>
            <param name="desired">Sample of desired signal</param>
        </member>
        <member name="T:NWaves.Filters.Adaptive.SignLmsFilter">
            <summary>
            Represents Sign LMS Adaptive filter (Sign Least-Mean-Squares algorithm).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Adaptive.SignLmsFilter.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Adaptive.SignLmsFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="mu">Mu</param>
            <param name="leakage">Leakage</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.SignLmsFilter.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input and desired signals and adapts filter coefficients.
            </summary>
            <param name="input">Sample of input signal</param>
            <param name="desired">Sample of desired signal</param>
        </member>
        <member name="T:NWaves.Filters.Adaptive.VariableStepLmsFilter">
            <summary>
            Represents LMS Adaptive filter (Least-Mean-Squares) with variable steps.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Adaptive.VariableStepLmsFilter.#ctor(System.Int32,System.Single[],System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Adaptive.VariableStepLmsFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="mu">Mu</param>
            <param name="leakage">Leakage</param>
        </member>
        <member name="M:NWaves.Filters.Adaptive.VariableStepLmsFilter.Process(System.Single,System.Single)">
            <summary>
            Processes one sample of input and desired signals and adapts filter coefficients.
            </summary>
            <param name="input">Sample of input signal</param>
            <param name="desired">Sample of desired signal</param>
        </member>
        <member name="T:NWaves.Filters.Base64.FilterChain64">
            <summary>
            Represents the chain of sequentially connected filters (double precision).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.FilterChain64._filters">
            <summary>
            List of filters in the chain.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.FilterChain64.#ctor(System.Collections.Generic.IEnumerable{NWaves.Filters.Base64.IOnlineFilter64})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base64.FilterChain64"/> from collection of <paramref name="filters"/>.
            </summary>
            <param name="filters">Collection of online filters</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FilterChain64.#ctor(System.Collections.Generic.IEnumerable{NWaves.Filters.Base.TransferFunction})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base64.FilterChain64"/> from collection of transfer functions (e.g., SOS sections). 
            This constructor creates objects of <see cref="T:NWaves.Filters.Base.IirFilter"/> under the hood.
            </summary>
            <param name="tfs">Collection of transfer functions</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FilterChain64.Add(NWaves.Filters.Base64.IOnlineFilter64)">
            <summary>
            Adds <paramref name="filter"/> to the chain.
            </summary>
            <param name="filter">Online filter</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FilterChain64.Insert(System.Int32,NWaves.Filters.Base64.IOnlineFilter64)">
            <summary>
            Inserts <paramref name="filter"/> at specified <paramref name="index"/> in the chain.
            </summary>
            <param name="index">Index of the filter in chain</param>
            <param name="filter">Online filter</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FilterChain64.RemoveAt(System.Int32)">
            <summary>
            Removes filter at specified <paramref name="index"/> from the chain.
            </summary>
            <param name="index">Index of the filter in chain</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FilterChain64.Process(System.Double)">
            <summary>
            Processes one sample by the chain of filters.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FilterChain64.Reset">
            <summary>
            Resets all filters in the chain.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.FilterChain64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filters to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base64.FirFilter64">
            <summary>
            Represents Finite Impulse Response (FIR) filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base64.FirFilter64.Kernel">
            <summary>
            Gets copy of the filter kernel (impulse response).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.FirFilter64._b">
            <summary>
            Numerator part coefficients in filter's transfer function 
            (non-recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.FirFilter64._kernelSize">
            <summary>
            Kernel length.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.FirFilter64._tf">
            <summary>
            Transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base64.FirFilter64.Tf">
            <summary>
            Gets transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base64.FirFilter64.KernelSizeForBlockConvolution">
            <summary>
            Gets or sets the minimum kernel length for switching to OverlapSave algorithm in auto mode.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.FirFilter64._delayLine">
            <summary>
            Internal buffer for delay line.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.FirFilter64._delayLineOffset">
            <summary>
            Current offset in delay line.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.FirFilter64.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base64.FirFilter64"/> from <paramref name="kernel"/>.
            </summary>
            <param name="kernel">FIR filter kernel</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FirFilter64.#ctor(NWaves.Filters.Base.TransferFunction)">
            <summary>
            <para>Constructs <see cref="T:NWaves.Filters.Base64.FirFilter64"/> from transfer function <paramref name="tf"/>.</para>
            <para>
            Coefficients (used for filtering) will be cast to floats anyway, 
            but filter will store the reference to TransferFunction object for FDA.
            </para>
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FirFilter64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FirFilter64.Process(System.Double)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FirFilter64.ProcessAllSamples(System.Double[])">
            <summary>
            Processes all <paramref name="samples"/> in loop.
            </summary>
            <param name="samples">Samples</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FirFilter64.ChangeKernel(System.Double[])">
            <summary>
            Changes filter kernel online.
            </summary>
            <param name="kernel">New kernel</param>
        </member>
        <member name="M:NWaves.Filters.Base64.FirFilter64.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.Base64.IFilter64">
            <summary>
            Interface for offline filters (double precision).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.IFilter64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base64.IirFilter64">
            <summary>
            Represents Infinite Impulse Response (IIR) filter (double precision).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._b">
            <summary>
            Numerator part coefficients in filter's transfer function 
            (non-recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._a">
            <summary>
            Denominator part coefficients in filter's transfer function 
            (recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._numeratorSize">
            <summary>
            Number of numerator coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._denominatorSize">
            <summary>
            Number of denominator (feedback) coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._tf">
            <summary>
            Transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base64.IirFilter64.Tf">
            <summary>
            Gets transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base64.IirFilter64.DefaultImpulseResponseLength">
            <summary>
            Gets or sets default length of truncated impulse response.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._delayLineA">
            <summary>
            Internal delay line (recursive part).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._delayLineB">
            <summary>
            Internal delay line (non-recursive part).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._delayLineOffsetA">
            <summary>
            Current offset in delay line (recursive part).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.IirFilter64._delayLineOffsetB">
            <summary>
            Current offset in delay line (non-recursive part).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.IirFilter64.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base64.IirFilter64"/> from numerator <paramref name="b"/> and denominator <paramref name="a"/>.
            </summary>
            <param name="b">Numerator of transfer function</param>
            <param name="a">Denominator of transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base64.IirFilter64.#ctor(NWaves.Filters.Base.TransferFunction)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base64.IirFilter64"/> from transfer function <paramref name="tf"/>.
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base64.IirFilter64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.Base64.IirFilter64.Process(System.Double)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base64.IirFilter64.ChangeNumeratorCoeffs(System.Double[])">
            <summary>
            Changes filter coefficients online (numerator / non-recursive part).
            </summary>
            <param name="b">New coefficients</param>
        </member>
        <member name="M:NWaves.Filters.Base64.IirFilter64.ChangeDenominatorCoeffs(System.Double[])">
            <summary>
            Changes filter coefficients online (denominator / recursive part).
            </summary>
            <param name="a">New coefficients</param>
        </member>
        <member name="M:NWaves.Filters.Base64.IirFilter64.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.IirFilter64.Normalize">
            <summary>
            Normalizes transfer function 
            (divides all filter coefficients by the first coefficient of TF denominator).
            </summary>
        </member>
        <member name="T:NWaves.Filters.Base64.IOnlineFilter64">
            <summary>
            Interface for all signal processors that support online filtering (double precision).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.IOnlineFilter64.Process(System.Double)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base64.IOnlineFilter64.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.Base64.LtiFilter64">
            <summary>
            Abstract class for Linear Time-Invariant (LTI) filters (double precision).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base64.LtiFilter64.Tf">
            <summary>
            Gets transfer function of LTI filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.LtiFilter64.Process(System.Double)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base64.LtiFilter64.Reset">
            <summary>
            Resets LTI filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.LtiFilter64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base64.StereoFilter64">
            <summary>
            Represents filter for processing data in interleaved stereo buffers. 
            <see cref="T:NWaves.Filters.Base64.StereoFilter64"/> is wrapped around two separate filters: 
            filter for signal in left channel and filter for signal in right channel.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.StereoFilter64._filterLeft">
            <summary>
            Filter for signal in left channel.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.StereoFilter64._filterRight">
            <summary>
            Filter for signal in right channel.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.StereoFilter64._isRight">
            <summary>
            Internal flag for switching between left and right channels.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.StereoFilter64.#ctor(NWaves.Filters.Base64.IOnlineFilter64,NWaves.Filters.Base64.IOnlineFilter64)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base64.StereoFilter64"/> from two separate filters.
            </summary>
            <param name="filterLeft">Filter for signal in left channel</param>
            <param name="filterRight">Filter for signal in right channel</param>
        </member>
        <member name="M:NWaves.Filters.Base64.StereoFilter64.Process(System.Double)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base64.StereoFilter64.Reset">
            <summary>
            Resets filters.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.StereoFilter64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base64.ZiFilter64">
            <summary>
            <see cref="T:NWaves.Filters.Base64.ZiFilter64"/> is the special implementation of an LTI filter based on state vector (instead of delay lines). 
            <see cref="T:NWaves.Filters.Base64.ZiFilter64"/> allows setting initial state (initial conditions for filter delays) and 
            provides additional method for zero-phase filtering <see cref="M:NWaves.Filters.Base64.ZiFilter64.ZeroPhase(System.Double[],System.Int32)"/>.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.ZiFilter64._b">
            <summary>
            Numerator part coefficients in filter's transfer function 
            (non-recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.ZiFilter64._a">
            <summary>
            Denominator part coefficients in filter's transfer function 
            (recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.ZiFilter64._zi">
            <summary>
            State vector.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base64.ZiFilter64.Zi">
            <summary>
            Gets state vector.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base64.ZiFilter64._tf">
            <summary>
            Transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base64.ZiFilter64.Tf">
            <summary>
            Gets transfer function.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base64.ZiFilter64"/> from numerator <paramref name="b"/> and denominator <paramref name="a"/>.
            </summary>
            <param name="b">Numerator of transfer function</param>
            <param name="a">Denominator of transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.#ctor(NWaves.Filters.Base.TransferFunction)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base64.ZiFilter64"/> from transfer function <paramref name="tf"/>.
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.Init(System.Double[])">
            <summary>
            Initializes filter with initial conditions <paramref name="zi"/>.
            </summary>
            <param name="zi">Vector of initial conditions</param>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.Process(System.Double)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.ZeroPhase(System.Double[],System.Int32)">
            <summary>
            Does zero-phase filtering (analog of filtfilt() in MATLAB/sciPy).
            </summary>
            <param name="signal">Input signal</param>
            <param name="padLength">
            Number of elements by which to extend <paramref name="signal"/> at both ends before applying the filter. 
            The default value is 3 * (max{len(numerator), len(denominator)} - 1).
            </param>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.ChangeNumeratorCoeffs(System.Double[])">
            <summary>
            Changes filter coefficients online (numerator / non-recursive part).
            </summary>
            <param name="b">New coefficients</param>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.ChangeDenominatorCoeffs(System.Double[])">
            <summary>
            Changes filter coefficients online (denominator / recursive part).
            </summary>
            <param name="a">New coefficients</param>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.Change(NWaves.Filters.Base.TransferFunction)">
            <summary>
            Changes filter coefficients online (from transfer function <paramref name="tf"/>).
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base64.ZiFilter64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base.FilterChain">
            <summary>
            Represents the chain of sequentially connected filters.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FilterChain._filters">
            <summary>
            List of filters in the chain.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.FilterChain.#ctor(System.Collections.Generic.IEnumerable{NWaves.Filters.Base.IOnlineFilter})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.FilterChain"/> from collection of <paramref name="filters"/>.
            </summary>
            <param name="filters">Collection of online filters</param>
        </member>
        <member name="M:NWaves.Filters.Base.FilterChain.#ctor(System.Collections.Generic.IEnumerable{NWaves.Filters.Base.TransferFunction})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.FilterChain"/> from collection of transfer functions (e.g., SOS sections). 
            This constructor creates objects of <see cref="T:NWaves.Filters.Base.IirFilter"/> under the hood.
            </summary>
            <param name="tfs">Collection of transfer functions</param>
        </member>
        <member name="M:NWaves.Filters.Base.FilterChain.Add(NWaves.Filters.Base.IOnlineFilter)">
            <summary>
            Adds <paramref name="filter"/> to the chain.
            </summary>
            <param name="filter">Online filter</param>
        </member>
        <member name="M:NWaves.Filters.Base.FilterChain.Insert(System.Int32,NWaves.Filters.Base.IOnlineFilter)">
            <summary>
            Inserts <paramref name="filter"/> at specified <paramref name="index"/> in the chain.
            </summary>
            <param name="index">Index of the filter in chain</param>
            <param name="filter">Online filter</param>
        </member>
        <member name="M:NWaves.Filters.Base.FilterChain.RemoveAt(System.Int32)">
            <summary>
            Removes filter at specified <paramref name="index"/> from the chain.
            </summary>
            <param name="index">Index of the filter in chain</param>
        </member>
        <member name="M:NWaves.Filters.Base.FilterChain.Process(System.Single)">
            <summary>
            Processes one sample by the chain of filters.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base.FilterChain.Reset">
            <summary>
            Resets all filters in the chain.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.FilterChain.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filters to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base.FilteringMethod">
            <summary>
            Defines general filtering strategies.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FilteringMethod.Auto">
            <summary>
            Filtering strategy is dynamically defined by NWaves library. 
            Usually it's the processing of each signal sample in a loop. 
            For longer FIR filter kernels it's the Overlap-Save algorithm.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FilteringMethod.DifferenceEquation">
            <summary>
            Filtering in time domain based on difference equations.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FilteringMethod.OverlapAdd">
            <summary>
            Filtering in frequency domain based on OLA algorithm.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FilteringMethod.OverlapSave">
            <summary>
            Filtering in frequency domain based on OLS algorithm.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FilteringMethod.Custom">
            <summary>
            Filtering strategy is defined fully in code by user.
            </summary>
        </member>
        <member name="T:NWaves.Filters.Base.FirFilter">
            <summary>
            Represents Finite Impulse Response (FIR) filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.FirFilter.Kernel">
            <summary>
            Gets copy of the filter kernel (impulse response).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FirFilter._b">
            <summary>
            Numerator part coefficients in filter's transfer function 
            (non-recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FirFilter._kernelSize">
            <summary>
            Kernel length.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FirFilter._tf">
            <summary>
            Transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.FirFilter.Tf">
            <summary>
            Gets transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.FirFilter.KernelSizeForBlockConvolution">
            <summary>
            Gets or sets the minimum kernel length for switching to OverlapSave algorithm in auto mode.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FirFilter._delayLine">
            <summary>
            Internal buffer for delay line.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.FirFilter._delayLineOffset">
            <summary>
            Current offset in delay line.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.FirFilter"/> from <paramref name="kernel"/>.
            </summary>
            <param name="kernel">FIR filter kernel</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            <para>Constructs <see cref="T:NWaves.Filters.Base.FirFilter"/> from 64-bit <paramref name="kernel"/>.</para>
            <para>
            NOTE. 
            It will simply cast values to floats. 
            If you need to preserve precision for filter design and analysis, use constructor <see cref="M:NWaves.Filters.Base.FirFilter.#ctor(NWaves.Filters.Base.TransferFunction)"/>.
            </para>
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.#ctor(NWaves.Filters.Base.TransferFunction)">
            <summary>
            <para>Constructs <see cref="T:NWaves.Filters.Base.FirFilter"/> from transfer function <paramref name="tf"/>.</para>
            <para>
            Coefficients (used for filtering) will be cast to floats anyway, 
            but filter will store the reference to TransferFunction object for FDA.
            </para>
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.ProcessAllSamples(System.Single[])">
            <summary>
            Processes all <paramref name="samples"/> in loop.
            </summary>
            <param name="samples">Samples</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.ApplyFilterDirectly(NWaves.Signals.DiscreteSignal)">
            <summary>
            The most straightforward implementation of the difference equation: 
            code the difference equation as it is (it's slower than ProcessAllSamples).
            </summary>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.ChangeKernel(System.Single[])">
            <summary>
            Changes filter kernel online.
            </summary>
            <param name="kernel">New kernel</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.op_Multiply(NWaves.Filters.Base.FirFilter,NWaves.Filters.Base.FirFilter)">
            <summary>
            Creates <see cref="T:NWaves.Filters.Base.FirFilter"/> from sequential connection of two FIR filters <paramref name="filter1"/> and <paramref name="filter2"/>.
            </summary>
            <param name="filter1">First FIR filter</param>
            <param name="filter2">Second FIR filter</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.op_Multiply(NWaves.Filters.Base.FirFilter,NWaves.Filters.Base.IirFilter)">
            <summary>
            Creates <see cref="T:NWaves.Filters.Base.IirFilter"/> from sequential connection of FIR <paramref name="filter1"/> and IIR <paramref name="filter2"/>.
            </summary>
            <param name="filter1">FIR filter</param>
            <param name="filter2">IIR filter</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.op_Addition(NWaves.Filters.Base.FirFilter,NWaves.Filters.Base.FirFilter)">
            <summary>
            Creates <see cref="T:NWaves.Filters.Base.FirFilter"/> from parallel connection of two FIR filters <paramref name="filter1"/> and <paramref name="filter2"/>.
            </summary>
            <param name="filter1">First FIR filter</param>
            <param name="filter2">Second FIR filter</param>
        </member>
        <member name="M:NWaves.Filters.Base.FirFilter.op_Addition(NWaves.Filters.Base.FirFilter,NWaves.Filters.Base.IirFilter)">
            <summary>
            Creates <see cref="T:NWaves.Filters.Base.IirFilter"/> from parallel connection of FIR <paramref name="filter1"/> and IIR <paramref name="filter2"/>.
            </summary>
            <param name="filter1">FIR filter</param>
            <param name="filter2">IIR filter</param>
        </member>
        <member name="T:NWaves.Filters.Base.IFilter">
            <summary>
            Interface for offline filters.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.IFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base.IFilterExtensions">
            <summary>
            Provides extension methods for online filters.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.IFilterExtensions.Process(NWaves.Filters.Base.IOnlineFilter,System.Single[],System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Filters data frame-wise.
            </summary>
            <param name="filter">Online filter</param>
            <param name="input">Input block of samples</param>
            <param name="output">Block of filtered samples</param>
            <param name="count">Number of samples to filter</param>
            <param name="inputPos">Input starting index</param>
            <param name="outputPos">Output starting index</param>
        </member>
        <member name="M:NWaves.Filters.Base.IFilterExtensions.FilterOnline(NWaves.Filters.Base.IOnlineFilter,NWaves.Signals.DiscreteSignal)">
            <summary>
            Filters entire <paramref name="signal"/> by processing each signal sample in a loop.
            </summary>
            <param name="filter">Online filter</param>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Filters.Base.IFilterExtensions.FilterOnline(NWaves.Filters.Base64.IOnlineFilter64,System.Double[])">
            <summary>
            Filters entire <paramref name="signal"/> by processing each signal sample in a loop.
            </summary>
            <param name="filter">Online filter</param>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Filters.Base.IFilterExtensions.EstimateGain(NWaves.Filters.Base.IOnlineFilter,System.Int32)">
            <summary>
            Calculates extra gain for filtering so that frequency response is normalized onto [0..1] range. 
            Call this function if the filter could not be designed with proper frequency response gain due to numerical problems.
            </summary>
            <param name="filter">Online filter</param>
            <param name="fftSize">FFT size (for evaluating frequency response)</param>
        </member>
        <member name="M:NWaves.Filters.Base.IFilterExtensions.ApplyTo(NWaves.Filters.Base.IOnlineFilter,NWaves.Signals.DiscreteSignal,System.Single)">
            <summary>
            Filters entire <paramref name="signal"/> with extra <paramref name="gain"/>. 
            Call this function if the filter could not be designed with proper frequency response gain due to numerical problems.
            </summary>
            <param name="filter">Online filter</param>
            <param name="signal">Input signal</param>
            <param name="gain">Gain</param>
        </member>
        <member name="M:NWaves.Filters.Base.IFilterExtensions.Process(NWaves.Filters.Base.IOnlineFilter,System.Single,System.Single)">
            <summary>
            Processes one <paramref name="sample"/> of a signal with extra <paramref name="gain"/>. 
            Call this function if the filter could not be designed with proper frequency response gain due to numerical problems.
            </summary>
            <param name="filter">Online filter</param>
            <param name="sample">Input sample</param>
            <param name="gain">Gain</param>
        </member>
        <member name="M:NWaves.Filters.Base.IFilterExtensions.ProcessChunks(NWaves.Filters.Base.IOnlineFilter,NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            NOTE. For educational purposes and for testing online filtering.
            
            Implementation of offline filtering in time domain frame-by-frame.
            
            </summary>
        </member>
        <member name="T:NWaves.Filters.Base.IirFilter">
            <summary>
            Represents Infinite Impulse Response (IIR) filter.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._b">
            <summary>
            Numerator part coefficients in filter's transfer function 
            (non-recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._a">
            <summary>
            Denominator part coefficients in filter's transfer function 
            (recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._numeratorSize">
            <summary>
            Number of numerator coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._denominatorSize">
            <summary>
            Number of denominator (feedback) coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._tf">
            <summary>
            Transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.IirFilter.Tf">
            <summary>
            Gets transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.IirFilter.DefaultImpulseResponseLength">
            <summary>
            Gets or sets default length of truncated impulse response.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._delayLineA">
            <summary>
            Internal delay line (recursive part).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._delayLineB">
            <summary>
            Internal delay line (non-recursive part).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._delayLineOffsetA">
            <summary>
            Current offset in delay line (recursive part).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.IirFilter._delayLineOffsetB">
            <summary>
            Current offset in delay line (non-recursive part).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.#ctor(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.IirFilter"/> from numerator <paramref name="b"/> and denominator <paramref name="a"/>.
            </summary>
            <param name="b">Numerator of transfer function</param>
            <param name="a">Denominator of transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            <para>
            Constructs <see cref="T:NWaves.Filters.Base.IirFilter"/> from numerator <paramref name="b"/> and denominator <paramref name="a"/> (double precision).
            </para>
            <para>
            NOTE. 
            It will simply cast values to floats. 
            If you need to preserve precision for filter design and analysis, use constructor <see cref="M:NWaves.Filters.Base.IirFilter.#ctor(NWaves.Filters.Base.TransferFunction)"/>.
            </para>
            </summary>
            <param name="b">Numerator of transfer function</param>
            <param name="a">Denominator of transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.#ctor(NWaves.Filters.Base.TransferFunction)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.IirFilter"/> from transfer function <paramref name="tf"/>.
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.ApplyFilterDirectly(NWaves.Signals.DiscreteSignal)">
            <summary>
            The most straightforward implementation of the difference equation: 
            code the difference equation as it is.
            </summary>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.ChangeNumeratorCoeffs(System.Single[])">
            <summary>
            Changes filter coefficients online (numerator / non-recursive part).
            </summary>
            <param name="b">New coefficients</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.ChangeDenominatorCoeffs(System.Single[])">
            <summary>
            Changes filter coefficients online (denominator / recursive part).
            </summary>
            <param name="a">New coefficients</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.Change(NWaves.Filters.Base.TransferFunction)">
            <summary>
            Changes filter coefficients online (from transfer function <paramref name="tf"/>).
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.Normalize">
            <summary>
            Normalizes transfer function 
            (divides all filter coefficients by the first coefficient of TF denominator).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.op_Multiply(NWaves.Filters.Base.IirFilter,NWaves.Filters.Base.LtiFilter)">
            <summary>
            Creates <see cref="T:NWaves.Filters.Base.IirFilter"/> from sequential connection of IIR <paramref name="filter1"/> and any LTI <paramref name="filter2"/>.
            </summary>
            <param name="filter1">IIR filter</param>
            <param name="filter2">LTI filter</param>
        </member>
        <member name="M:NWaves.Filters.Base.IirFilter.op_Addition(NWaves.Filters.Base.IirFilter,NWaves.Filters.Base.LtiFilter)">
            <summary>
            Creates <see cref="T:NWaves.Filters.Base.IirFilter"/> from parallel connection of IIR <paramref name="filter1"/> and any LTI <paramref name="filter2"/>.
            </summary>
            <param name="filter1">IIR filter</param>
            <param name="filter2">LTI filter</param>
        </member>
        <member name="T:NWaves.Filters.Base.IOnlineFilter">
            <summary>
            Interface for all signal processors that support online filtering.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.IOnlineFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base.IOnlineFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.Base.LtiFilter">
            <summary>
            Abstract class for Linear Time-Invariant (LTI) filters.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.LtiFilter.Tf">
            <summary>
            Gets transfer function of LTI filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.LtiFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies LTI filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.Base.LtiFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base.LtiFilter.Reset">
            <summary>
            Resets LTI filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.Base.OverlapAddFilter">
            <summary>
            Abstract class for all filters working by the STFT overlap-add scheme:
            <list type="number">
                <item>short-time frame analysis</item>
                <item>short-time frame processing</item>
                <item>short-time frame synthesis (overlap-add)</item>
            </list>
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._hopSize">
            <summary>
            STFT hop length.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._fftSize">
            <summary>
            Size of FFT for analysis and synthesis.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._gain">
            <summary>
            ISTFT normalization gain.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._overlapSize">
            <summary>
            Size of frame overlap.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._window">
            <summary>
            Window coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._dl">
            <summary>
            Delay line.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._inOffset">
            <summary>
            Offset in the input delay line.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.OverlapAddFilter._outOffset">
            <summary>
            Offset in the output buffer.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.OverlapAddFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.OverlapAddFilter"/>.
            </summary>
            <param name="hopSize">Hop size (hop length, number of samples)</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Filters.Base.OverlapAddFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base.OverlapAddFilter.ProcessFrame">
            <summary>
            Processes one frame (FFT block).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.OverlapAddFilter.ProcessSpectrum(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Processes one spectrum at each Overlap-Add STFT step.
            </summary>
            <param name="re">Real parts of input spectrum</param>
            <param name="im">Imaginary parts of input spectrum</param>
            <param name="filteredRe">Real parts of output spectrum</param>
            <param name="filteredIm">Imaginary parts of output spectrum</param>
        </member>
        <member name="M:NWaves.Filters.Base.OverlapAddFilter.Reset">
            <summary>
            Resets filter internals.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.OverlapAddFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base.StateSpace">
            <summary>
            State-space representation of filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.StateSpace.A">
            <summary>
            Gets or sets state matrix.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.StateSpace.B">
            <summary>
            Gets or sets input-to-state matrix.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.StateSpace.C">
            <summary>
            Gets or sets state-to-output matrix.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.StateSpace.D">
            <summary>
            Gets or sets feedthrough matrix.
            </summary>
        </member>
        <member name="T:NWaves.Filters.Base.StereoFilter">
            <summary>
            Represents filter for processing data in interleaved stereo buffers. 
            <see cref="T:NWaves.Filters.Base.StereoFilter"/> is wrapped around two separate filters: 
            filter for signal in left channel and filter for signal in right channel.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.StereoFilter._filterLeft">
            <summary>
            Filter for signal in left channel.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.StereoFilter._filterRight">
            <summary>
            Filter for signal in right channel.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.StereoFilter._isRight">
            <summary>
            Internal flag for switching between left and right channels.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.StereoFilter.#ctor(NWaves.Filters.Base.IOnlineFilter,NWaves.Filters.Base.IOnlineFilter)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.StereoFilter"/> from two separate filters.
            </summary>
            <param name="filterLeft">Filter for signal in left channel</param>
            <param name="filterRight">Filter for signal in right channel</param>
        </member>
        <member name="M:NWaves.Filters.Base.StereoFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base.StereoFilter.Reset">
            <summary>
            Resets filters.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.StereoFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.Base.TransferFunction">
            <summary>
            Represents the transfer function of an LTI filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.TransferFunction.Numerator">
            <summary>
            Gets numerator of transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.TransferFunction.Denominator">
            <summary>
            Gets denominator of transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.TransferFunction.CalculateZpIterations">
            <summary>
            Gets or sets max number of iterations for calculating zeros/poles (roots of polynomials). By default, 25000.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.TransferFunction._zeros">
            <summary>
            Zeros.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.TransferFunction._poles">
            <summary>
            Poles.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.TransferFunction.Zeros">
            <summary>
            Gets zeros ('z' in 'zpk' notation).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.TransferFunction.Poles">
            <summary>
            Gets poles ('p' in 'zpk' notation).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.TransferFunction.Gain">
            <summary>
            Gets gain ('k' in 'zpk' notation).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.TransferFunction"/> from <paramref name="numerator"/> and <paramref name="denominator"/>.
            </summary>
            <param name="numerator">Numerator of transfer function</param>
            <param name="denominator">Denominator of transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.#ctor(System.Numerics.Complex[],System.Numerics.Complex[],System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.TransferFunction"/> from <paramref name="zeros"/>, <paramref name="poles"/> and <paramref name="gain"/>.
            </summary>
            <param name="zeros">Zeros</param>
            <param name="poles">Poles</param>
            <param name="gain">Gain</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.#ctor(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.TransferFunction"/> from <paramref name="zeros"/>, <paramref name="poles"/> and <paramref name="gain"/>.
            </summary>
            <param name="zeros">Zeros</param>
            <param name="poles">Poles</param>
            <param name="gain">Gain</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.#ctor(NWaves.Filters.Base.StateSpace)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.TransferFunction"/> from <paramref name="stateSpace"/> representation.
            </summary>
            <param name="stateSpace">State space representation</param>
        </member>
        <member name="P:NWaves.Filters.Base.TransferFunction.StateSpace">
            <summary>
            Gets state-space representation.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.TransferFunction.Zi">
            <summary>
            Gets initial state for <see cref="T:NWaves.Filters.Base.ZiFilter"/> that corresponds to the steady state of the step response.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.ImpulseResponse(System.Int32)">
            <summary>
            Evaluates impulse response of given <paramref name="length"/>. 
            In case of FIR filters method returns full copy of numerator.
            </summary>
            <param name="length">Length of the impulse response</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.FrequencyResponse(System.Int32)">
            <summary>
            Evaluates frequency response of given <paramref name="length"/>.
            </summary>
            <param name="length">Length of the frequency response</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.GroupDelay(System.Int32)">
            <summary>
            Evaluates group delay in array of given <paramref name="length"/>.
            </summary>
            <param name="length">Length of group delay array</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.PhaseDelay(System.Int32)">
            <summary>
            Evaluates phase delay in array of given <paramref name="length"/>.
            </summary>
            <param name="length">Length of phase delay array</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.NormalizeAt(System.Double)">
            <summary>
            Normalizes frequency response at given frequency 
            (normalizes numerator to map frequency response onto [0, 1])
            </summary>
            <param name="freq">Frequency</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.Normalize">
            <summary>
            Normalizes numerator and denominator (divides them by the first coefficient of denominator).
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.ZpToTf(System.Numerics.Complex[])">
            <summary>
            Converts zeros (or poles) to numerator (or denominator) of transfer function.
            </summary>
            <param name="zp">Zeros (or poles)</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.ZpToTf(NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Converts zeros (or poles) to numerator (or denominator) of transfer function.
            </summary>
            <param name="zp">Zeros (or poles)</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.ZpToTf(System.Double[],System.Double[])">
            <summary>
            Converts zeros (or poles) to numerator (or denominator) of transfer function. 
            Zeros (poles) are given in the form double arrays of real and imaginary parts.
            </summary>
            <param name="re">Real parts of complex zeros (poles)</param>
            <param name="im">Imaginary parts of complex zeros (poles)</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.TfToZp(System.Double[],System.Int32)">
            <summary>
            Converts numerator (or denominator) of transfer function to zeros (or poles).
            </summary>
            <param name="numeratorOrDenominator">Numerator or denominator (polynomial)</param>
            <param name="maxIterations">Max number of iterations for calculating zeros/poles (roots of polynomials). By default, 25000.</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.op_Multiply(NWaves.Filters.Base.TransferFunction,NWaves.Filters.Base.TransferFunction)">
            <summary>
            Creates transfer function from sequential connection of <paramref name="tf1"/> and <paramref name="tf2"/>.
            </summary>
            <param name="tf1">First transfer function</param>
            <param name="tf2">Second transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.op_Addition(NWaves.Filters.Base.TransferFunction,NWaves.Filters.Base.TransferFunction)">
            <summary>
            Creates transfer function from parallel connection of <paramref name="tf1"/> and <paramref name="tf2"/>.
            </summary>
            <param name="tf1">First transfer function</param>
            <param name="tf2">Second transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.FromCsv(System.IO.Stream,System.Char)">
            <summary>
            Loads numerator and denominator of transfer function from csv stream.
            </summary>
            <param name="stream">Input stream</param>
            <param name="delimiter">Delimiter</param>
        </member>
        <member name="M:NWaves.Filters.Base.TransferFunction.ToCsv(System.IO.Stream,System.Char)">
            <summary>
            Serializes numerator and denominator of transfer function to csv stream.
            </summary>
            <param name="stream">Output stream</param>
            <param name="delimiter">Delimiter</param>
        </member>
        <member name="T:NWaves.Filters.Base.ZiFilter">
            <summary>
            <see cref="T:NWaves.Filters.Base.ZiFilter"/> is the special implementation of an LTI filter based on state vector (instead of delay lines). 
            <see cref="T:NWaves.Filters.Base.ZiFilter"/> allows setting initial state (initial conditions for filter delays) and 
            provides additional method for zero-phase filtering <see cref="M:NWaves.Filters.Base.ZiFilter.ZeroPhase(NWaves.Signals.DiscreteSignal,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.ZiFilter._b">
            <summary>
            Numerator part coefficients in filter's transfer function 
            (non-recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.ZiFilter._a">
            <summary>
            Denominator part coefficients in filter's transfer function 
            (recursive part in difference equations).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.ZiFilter._zi">
            <summary>
            State vector.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.ZiFilter.Zi">
            <summary>
            Gets state vector.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Base.ZiFilter._tf">
            <summary>
            Transfer function.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Base.ZiFilter.Tf">
            <summary>
            Gets transfer function.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.#ctor(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.ZiFilter"/> from numerator <paramref name="b"/> and denominator <paramref name="a"/>.
            </summary>
            <param name="b">Numerator of transfer function</param>
            <param name="a">Denominator of transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            <para>
            Constructs <see cref="T:NWaves.Filters.Base.ZiFilter"/> from numerator <paramref name="b"/> and denominator <paramref name="a"/> (double precision).
            </para>
            <para>
            NOTE. 
            It will simply cast values to floats. 
            If you need to preserve precision for filter design and analysis, use constructor <see cref="M:NWaves.Filters.Base.ZiFilter.#ctor(NWaves.Filters.Base.TransferFunction)"/>.
            </para>
            </summary>
            <param name="b">Numerator of transfer function</param>
            <param name="a">Denominator of transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.#ctor(NWaves.Filters.Base.TransferFunction)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Base.ZiFilter"/> from transfer function <paramref name="tf"/>.
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.Init(System.Single[])">
            <summary>
            Initializes filter with initial conditions <paramref name="zi"/>.
            </summary>
            <param name="zi">Vector of initial conditions</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.Init(System.Double[])">
            <summary>
            Initializes filter with initial conditions <paramref name="zi"/>.
            </summary>
            <param name="zi">Vector of initial conditions</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.ZeroPhase(NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            Does zero-phase filtering (analog of filtfilt() in MATLAB/sciPy).
            </summary>
            <param name="signal">Input signal</param>
            <param name="padLength">
            Number of elements by which to extend <paramref name="signal"/> at both ends before applying the filter. 
            The default value is 3 * (max{len(numerator), len(denominator)} - 1).
            </param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.ChangeNumeratorCoeffs(System.Single[])">
            <summary>
            Changes filter coefficients online (numerator / non-recursive part).
            </summary>
            <param name="b">New coefficients</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.ChangeDenominatorCoeffs(System.Single[])">
            <summary>
            Changes filter coefficients online (denominator / recursive part).
            </summary>
            <param name="a">New coefficients</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.Change(NWaves.Filters.Base.TransferFunction)">
            <summary>
            Changes filter coefficients online (from transfer function <paramref name="tf"/>).
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.Base.ZiFilter.FilterIc(NWaves.Signals.DiscreteSignal)">
            <summary>
            Offline filtering with initial conditions (for tests)
            </summary>
        </member>
        <member name="T:NWaves.Filters.Bessel.BandPassFilter">
            <summary>
            Represents bandpass Bessel filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.BandPassFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.BandPassFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.BandPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Bessel.BandPassFilter.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Bessel.BandPassFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.BandPassFilter.MakeTf(System.Double,System.Double,System.Int32)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.BandPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
        </member>
        <member name="T:NWaves.Filters.Bessel.BandStopFilter">
            <summary>
            Represents bandstop Bessel filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.BandStopFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.BandStopFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.BandStopFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Bessel.BandStopFilter.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Bessel.BandStopFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.BandStopFilter.MakeTf(System.Double,System.Double,System.Int32)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.BandStopFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
        </member>
        <member name="T:NWaves.Filters.Bessel.HighPassFilter">
            <summary>
            Represents highpass Bessel filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.HighPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.HighPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Bessel.HighPassFilter.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Bessel.HighPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.HighPassFilter.MakeTf(System.Double,System.Int32)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.HighPassFilter.Change(System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
        </member>
        <member name="T:NWaves.Filters.Bessel.LowPassFilter">
            <summary>
            Represents lowpass Bessel filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.LowPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Bessel.LowPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Bessel.LowPassFilter.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Bessel.LowPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.LowPassFilter.MakeTf(System.Double,System.Int32)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.LowPassFilter.Change(System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
        </member>
        <member name="T:NWaves.Filters.Bessel.PrototypeBessel">
            <summary>
            Bessel filter prototype.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Bessel.PrototypeBessel.Reverse(System.Int32,System.Int32)">
            <summary>
            Gets <paramref name="k"/>-th coefficient of <paramref name="n"/>-th order Bessel polynomial.
            </summary>
            <param name="k">k</param>
            <param name="n">n</param>
        </member>
        <member name="M:NWaves.Filters.Bessel.PrototypeBessel.Poles(System.Int32)">
            <summary>
            Evaluates analog poles of Bessel filter of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.AllPassFilter">
            <summary>
            Represents BiQuad allpass filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.AllPassFilter.Frequency">
            <summary>
            Gets center frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.AllPassFilter.Q">
            <summary>
            Gets Q factor.
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.AllPassFilter.#ctor(System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.AllPassFilter"/>.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.AllPassFilter.SetCoefficients(System.Double,System.Double)">
            <summary>
            Sets filter coefficients.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.AllPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.BandPassFilter">
            <summary>
            Represents BiQuad bandpass filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.BandPassFilter.Frequency">
            <summary>
            Gets center frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.BandPassFilter.Q">
            <summary>
            Gets Q factor.
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.BandPassFilter.#ctor(System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.BandPassFilter"/>.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.BandPassFilter.SetCoefficients(System.Double,System.Double)">
            <summary>
            Sets filter coefficients.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.BandPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.BiQuadFilter">
            <summary>
            Represents BiQuad IIR filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.BiQuadFilter.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.BiQuadFilter"/>.
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.BiQuadFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.BiQuadFilter"/> from filter coefficients 
            (numerator {B0, B1, B2} and denominator {A0, A1, A2}).
            </summary>
            <param name="b0">B0</param>
            <param name="b1">B1</param>
            <param name="b2">B2</param>
            <param name="a0">A0</param>
            <param name="a1">A1</param>
            <param name="a2">A2</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.BiQuadFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.BiQuadFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.BiQuadFilter.Change(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="b0">B0</param>
            <param name="b1">B1</param>
            <param name="b2">B2</param>
            <param name="a0">A0</param>
            <param name="a1">A1</param>
            <param name="a2">A2</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.HighPassFilter">
            <summary>
            Represents BiQuad highpass filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.HighPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.HighPassFilter.Q">
            <summary>
            Gets Q factor.
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.HighPassFilter.#ctor(System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.HighPassFilter"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.HighPassFilter.SetCoefficients(System.Double,System.Double)">
            <summary>
            Sets filter coefficients.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.HighPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.HighShelfFilter">
            <summary>
            Represents BiQuad high-shelving filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.HighShelfFilter.Frequency">
            <summary>
            Gets shelf midpoint frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.HighShelfFilter.Q">
            <summary>
            Gets Q factor.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.HighShelfFilter.Gain">
            <summary>
            Gets gain (in dB).
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.HighShelfFilter.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.HighShelfFilter"/>.
            </summary>
            <param name="frequency">Normalized shelf midpoint frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.HighShelfFilter.SetCoefficients(System.Double,System.Double,System.Double)">
            <summary>
            Sets filter coefficients.
            </summary>
            <param name="frequency">Normalized shelf midpoint frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.HighShelfFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized shelf midpoint frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.LowPassFilter">
            <summary>
            Represents BiQuad lowpass filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.LowPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.LowPassFilter.Q">
            <summary>
            Gets Q factor.
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.LowPassFilter.#ctor(System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.LowPassFilter"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.LowPassFilter.SetCoefficients(System.Double,System.Double)">
            <summary>
            Sets filter coefficients.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.LowPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.LowShelfFilter">
            <summary>
            Represents BiQuad low-shelving filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.LowShelfFilter.Frequency">
            <summary>
            Gets shelf midpoint frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.LowShelfFilter.Q">
            <summary>
            Gets Q factor.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.LowShelfFilter.Gain">
            <summary>
            Gets gain (in dB).
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.LowShelfFilter.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.LowShelfFilter"/>.
            </summary>
            <param name="frequency">Normalized shelf midpoint frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.LowShelfFilter.SetCoefficients(System.Double,System.Double,System.Double)">
            <summary>
            Sets filter coefficients.
            </summary>
            <param name="frequency">Normalized shelf midpoint frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.LowShelfFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized shelf midpoint frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.NotchFilter">
            <summary>
            Represents BiQuad notch filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.NotchFilter.Frequency">
            <summary>
            Gets center frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.NotchFilter.Q">
            <summary>
            Gets Q factor.
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.NotchFilter.#ctor(System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.NotchFilter"/>.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.NotchFilter.SetCoefficients(System.Double,System.Double)">
            <summary>
            Sets filter coefficients.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.NotchFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
        </member>
        <member name="T:NWaves.Filters.BiQuad.PeakFilter">
            <summary>
            Represents BiQuad peaking EQ filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.PeakFilter.Frequency">
            <summary>
            Gets center frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.PeakFilter.Q">
            <summary>
            Gets Q factor.
            </summary>
        </member>
        <member name="P:NWaves.Filters.BiQuad.PeakFilter.Gain">
            <summary>
            Gets gain (in dB).
            </summary>
        </member>
        <member name="M:NWaves.Filters.BiQuad.PeakFilter.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.BiQuad.PeakFilter"/>.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.PeakFilter.SetCoefficients(System.Double,System.Double,System.Double)">
            <summary>
            Sets filter coefficients.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.BiQuad.PeakFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor</param>
            <param name="gain">Gain (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.Butterworth.BandPassFilter">
            <summary>
            Represents bandpass Butterworth filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.BandPassFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.BandPassFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.BandPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Butterworth.BandPassFilter.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Butterworth.BandPassFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Butterworth.BandPassFilter.MakeTf(System.Double,System.Double,System.Int32)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Butterworth.BandPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
        </member>
        <member name="T:NWaves.Filters.Butterworth.BandStopFilter">
            <summary>
            Represents bandstop Butterworth filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.BandStopFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.BandStopFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.BandStopFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Butterworth.BandStopFilter.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Butterworth.BandStopFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Butterworth.BandStopFilter.MakeTf(System.Double,System.Double,System.Int32)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Butterworth.BandStopFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
        </member>
        <member name="T:NWaves.Filters.Butterworth.HighPassFilter">
            <summary>
            Represents highpass Butterworth filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.HighPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.HighPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Butterworth.HighPassFilter.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Butterworth.HighPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Butterworth.HighPassFilter.MakeTf(System.Double,System.Int32)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Butterworth.HighPassFilter.Change(System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
        </member>
        <member name="T:NWaves.Filters.Butterworth.LowPassFilter">
            <summary>
            Represents lowpass Butterworth filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.LowPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Butterworth.LowPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Butterworth.LowPassFilter.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Butterworth.LowPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Butterworth.LowPassFilter.MakeTf(System.Double,System.Int32)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
        </member>
        <member name="M:NWaves.Filters.Butterworth.LowPassFilter.Change(System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
        </member>
        <member name="T:NWaves.Filters.Butterworth.PrototypeButterworth">
            <summary>
            Butterworth filter prototype.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Butterworth.PrototypeButterworth.Poles(System.Int32)">
            <summary>
            Evaluates analog poles of Butterworth filter of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevII.BandPassFilter">
            <summary>
            Represents bandpass Chebyshev-II filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.BandPassFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.BandPassFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.BandPassFilter.Ripple">
            <summary>
            Gets ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.BandPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.BandPassFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ChebyshevII.BandPassFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.BandPassFilter.MakeTf(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.BandPassFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevII.BandStopFilter">
            <summary>
            Represents bandstop Chebyshev-II filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.BandStopFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.BandStopFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.BandStopFilter.Ripple">
            <summary>
            Gets ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.BandStopFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.BandStopFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ChebyshevII.BandStopFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.BandStopFilter.MakeTf(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.BandStopFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevII.HighPassFilter">
            <summary>
            Represents highpass Chebyshev-II filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.HighPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.HighPassFilter.Ripple">
            <summary>
            Gets ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.HighPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.HighPassFilter.#ctor(System.Double,System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ChebyshevII.HighPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.HighPassFilter.MakeTf(System.Double,System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.HighPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevII.LowPassFilter">
            <summary>
            Represents lowpass Chebyshev-II filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.LowPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.LowPassFilter.Ripple">
            <summary>
            Gets ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevII.LowPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.LowPassFilter.#ctor(System.Double,System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ChebyshevII.LowPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.LowPassFilter.MakeTf(System.Double,System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.LowPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevII.PrototypeChebyshevII">
            <summary>
            Chebyshev-II filter prototype.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.PrototypeChebyshevII.Poles(System.Int32,System.Double)">
            <summary>
            Evaluates analog poles of Chebyshev-II filter of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevII.PrototypeChebyshevII.Zeros(System.Int32)">
            <summary>
            Evaluates analog zeros of Chebyshev-II filter of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevI.BandPassFilter">
            <summary>
            Represents bandpass Chebyshev-I filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.BandPassFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.BandPassFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.BandPassFilter.Ripple">
            <summary>
            Gets ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.BandPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.BandPassFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ChebyshevI.BandPassFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.BandPassFilter.MakeTf(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.BandPassFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevI.BandStopFilter">
            <summary>
            Represents bandstop Chebyshev-I filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.BandStopFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.BandStopFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.BandStopFilter.Ripple">
            <summary>
            Gets ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.BandStopFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.BandStopFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ChebyshevI.BandStopFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.BandStopFilter.MakeTf(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.BandStopFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevI.HighPassFilter">
            <summary>
            Represents highpass Chebyshev-I filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.HighPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.HighPassFilter.Ripple">
            <summary>
            Gets ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.HighPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.HighPassFilter.#ctor(System.Double,System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ChebyshevI.HighPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.HighPassFilter.MakeTf(System.Double,System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.HighPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevI.LowPassFilter">
            <summary>
            Represents lowpass Chebyshev-I filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.LowPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.LowPassFilter.Ripple">
            <summary>
            Gets ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.ChebyshevI.LowPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.LowPassFilter.#ctor(System.Double,System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ChebyshevI.LowPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.LowPassFilter.MakeTf(System.Double,System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.LowPassFilter.Change(System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.ChebyshevI.PrototypeChebyshevI">
            <summary>
            Chebyshev-I filter prototype.
            </summary>
        </member>
        <member name="M:NWaves.Filters.ChebyshevI.PrototypeChebyshevI.Poles(System.Int32,System.Double)">
            <summary>
            Evaluates analog poles of Chebyshev-I filter of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.CombFeedbackFilter">
            <summary>
            Represents feedback comb filter:
            <code>
                y[n] = b0 * x[n] - am * y[n - m]
            </code>
            </summary>
        </member>
        <member name="F:NWaves.Filters.CombFeedbackFilter._delay">
            <summary>
            Delay (m).
            </summary>
        </member>
        <member name="M:NWaves.Filters.CombFeedbackFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.CombFeedbackFilter"/>.
            </summary>
            <param name="m">Delay</param>
            <param name="b0">Coefficient b0</param>
            <param name="am">Coefficient am</param>
        </member>
        <member name="M:NWaves.Filters.CombFeedbackFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.CombFeedbackFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.CombFeedbackFilter.Change(System.Double,System.Double)">
            <summary>
            Changes coefficients (preserving the state of the filter).
            </summary>
            <param name="b0">Coefficient b0</param>
            <param name="am">Coefficient am</param>
        </member>
        <member name="T:NWaves.Filters.CombFeedforwardFilter">
            <summary>
            Represents feedforward comb filter:
            <code>
                y[n] = b0 * x[n] + bm * x[n - m]
            </code>
            </summary>
        </member>
        <member name="F:NWaves.Filters.CombFeedforwardFilter._delay">
            <summary>
            Delay (m).
            </summary>
        </member>
        <member name="M:NWaves.Filters.CombFeedforwardFilter.#ctor(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.CombFeedforwardFilter"/>.
            </summary>
            <param name="m">Delay</param>
            <param name="b0">Coefficient b0</param>
            <param name="bm">Coefficient bm</param>
            <param name="normalize"></param>
        </member>
        <member name="M:NWaves.Filters.CombFeedforwardFilter.MakeKernel(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Generates filter kernel.
            </summary>
            <param name="m">Delay</param>
            <param name="b0">Coefficient b0</param>
            <param name="bm">Coefficient bm</param>
            <param name="normalize">Normalize freq response to unit gain</param>
        </member>
        <member name="M:NWaves.Filters.CombFeedforwardFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.CombFeedforwardFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.CombFeedforwardFilter.Change(System.Double,System.Double)">
            <summary>
            Changes coefficients (preserving the state of the filter).
            </summary>
            <param name="b0">Coefficient b0</param>
            <param name="bm">Coefficient bm</param>
        </member>
        <member name="T:NWaves.Filters.DcRemovalFilter">
            <summary>
            Represents DC removal IIR filter.
            </summary>
        </member>
        <member name="F:NWaves.Filters.DcRemovalFilter._r">
            <summary>
            R parameter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.DcRemovalFilter.#ctor(System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.DcRemovalFilter"/>.
            </summary>
            <param name="r">R coefficient (usually in [0.9, 1] range)</param>
        </member>
        <member name="M:NWaves.Filters.DcRemovalFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.DcRemovalFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.DeEmphasisFilter">
            <summary>
            Represents de-emphasis IIR filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.DeEmphasisFilter.#ctor(System.Double,System.Boolean)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.DeEmphasisFilter"/>.
            </summary>
            <param name="a">De-emphasis coefficient</param>
            <param name="normalize">Normalize freq response to unit gain</param>
        </member>
        <member name="T:NWaves.Filters.Elliptic.BandPassFilter">
            <summary>
            Represents bandpass elliptic filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandPassFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandPassFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandPassFilter.RipplePassband">
            <summary>
            Gets passband ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandPassFilter.RippleStopband">
            <summary>
            Gets stopband ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Elliptic.BandPassFilter.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Elliptic.BandPassFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.BandPassFilter.MakeTf(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.BandPassFilter.Change(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.Elliptic.BandStopFilter">
            <summary>
            Represents bandstop elliptic filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandStopFilter.FrequencyLow">
            <summary>
            Gets low cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandStopFilter.FrequencyHigh">
            <summary>
            Gets high cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandStopFilter.RipplePassband">
            <summary>
            Gets passband ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandStopFilter.RippleStopband">
            <summary>
            Gets stopband ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.BandStopFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Elliptic.BandStopFilter.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Elliptic.BandStopFilter"/> of given <paramref name="order"/> 
            with given cutoff frequencies <paramref name="frequencyLow"/> and <paramref name="frequencyHigh"/>.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.BandStopFilter.MakeTf(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.BandStopFilter.Change(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.Elliptic.HighPassFilter">
            <summary>
            Represents highpass elliptic filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.HighPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.HighPassFilter.RipplePassband">
            <summary>
            Gets passband ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.HighPassFilter.RippleStopband">
            <summary>
            Gets stopband ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.HighPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Elliptic.HighPassFilter.#ctor(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Elliptic.HighPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.HighPassFilter.MakeTf(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.HighPassFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.Elliptic.LowPassFilter">
            <summary>
            Represents lowpass elliptic filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.LowPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.LowPassFilter.RipplePassband">
            <summary>
            Gets passband ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.LowPassFilter.RippleStopband">
            <summary>
            Gets stopband ripple (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Elliptic.LowPassFilter.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Elliptic.LowPassFilter.#ctor(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Elliptic.LowPassFilter"/> of given <paramref name="order"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.LowPassFilter.MakeTf(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.LowPassFilter.Change(System.Double,System.Double,System.Double)">
            <summary>
            Changes filter coefficients online (preserving the state of the filter).
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="T:NWaves.Filters.Elliptic.PrototypeElliptic">
            <summary>
            Elliptic filter prototype.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Elliptic.PrototypeElliptic.Poles(System.Int32,System.Double,System.Double)">
            <summary>
            Evaluates analog poles of elliptic filter of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.PrototypeElliptic.Zeros(System.Int32,System.Double,System.Double)">
            <summary>
            Evaluates analog zeros of elliptic filter of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="ripplePass">Passband ripple (in dB)</param>
            <param name="rippleStop">Stopband ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.PrototypeElliptic.Landen(System.Double,System.Int32)">
            <summary>
            Computes Landen sequence.
            </summary>
            <param name="k">K</param>
            <param name="iterCount">Number of iterations</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.PrototypeElliptic.Cde(System.Numerics.Complex,System.Double[])">
            <summary>
            Computes sde.
            </summary>
            <param name="x">X</param>
            <param name="landen">Landen sequence</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.PrototypeElliptic.Sne(System.Numerics.Complex,System.Double[])">
            <summary>
            Computes sne.
            </summary>
            <param name="x">X</param>
            <param name="landen">Landen sequence</param>
        </member>
        <member name="M:NWaves.Filters.Elliptic.PrototypeElliptic.Asne(System.Numerics.Complex,System.Double,System.Int32)">
            <summary>
            Computes inverse sne.
            </summary>
            <param name="x">X</param>
            <param name="k">K</param>
            <param name="iterCount">Number of iterations</param>
        </member>
        <member name="T:NWaves.Filters.Fda.DesignFilter">
            <summary>
            Provides methods for filter design and analysis.
            </summary>
            <summary>
            Provides methods for filter design and analysis.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinFdLp(System.Int32,System.Double,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal lowpass fractional-delay FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="delay">Fractional delay</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinFdHp(System.Int32,System.Double,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal highpass fractional-delay FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="delay">Fractional delay</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinFdBp(System.Int32,System.Double,System.Double,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal bandpass fractional-delay FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="delay">Fractional delay</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinFdBs(System.Int32,System.Double,System.Double,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal bandstop fractional-delay FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="delay">Fractional delay</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinFdAp(System.Int32,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal allpass fractional-delay FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="delay">Fractional delay</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.NormalizeKernel(System.Double[],System.Double)">
            <summary>
            Normalizes frequency response at given frequency 
            (normalizes kernel coefficients to map frequency response onto [0, 1])
            </summary>
            <param name="kernel">Kernel</param>
            <param name="frequency">Frequency</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinLp(System.Int32,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal lowpass FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinHp(System.Int32,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal highpass FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinBp(System.Int32,System.Double,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal bandpass FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirWinBs(System.Int32,System.Double,System.Double,NWaves.Windows.WindowType)">
            <summary>
            Designs ideal bandstop FIR filter using sinc-window method.
            </summary>
            <param name="order">Filter order</param>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.Fir(System.Int32,System.Double[],System.Double[],System.Int32,NWaves.Windows.WindowType)">
            <summary>
            <para>
            Designs FIR filter using frequency sampling method 
            (works identical to firwin2 in sciPy and fir2 in MATLAB).
            </para>
            <para>
            Note. By default, the FFT size is auto-computed. 
                  If it is set explicitly, then (fftSize/2 + 1) must exceed the filter order.
            </para>
            <para>
            Note. Array of frequencies can be null. 
                  In this case the <paramref name="fftSize"/> must be provided and size of gains array must be fftSize/2 + 1. 
                  Frequencies will be uniformly sampled on range [0..0.5].
            </para>
            </summary>
            <param name="order">Filter order</param>
            <param name="frequencies">Frequencies (frequency sampling points), each in range [0..0.5]</param>
            <param name="gain">Filter gains at the frequency sampling points</param>
            <param name="fftSize">FFT size</param>
            <param name="window">Window</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirEquirippleLp(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Designs equiripple lowpass FIR filter using Remez (Parks-McClellan) algorithm.
            </summary>
            <param name="order">Filter order</param>
            <param name="fp">Passband edge frequency</param>
            <param name="fa">Stopband edge frequency</param>
            <param name="wp">Passband weight</param>
            <param name="wa">Stopband weight</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirEquirippleHp(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Designs equiripple highpass FIR filter using Remez (Parks-McClellan) algorithm.
            </summary>
            <param name="order">Filter order</param>
            <param name="fa">Stopband edge frequency</param>
            <param name="fp">Passband edge frequency</param>
            <param name="wa">Stopband weight</param>
            <param name="wp">Passband weight</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirEquirippleBp(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Designs equiripple bandpass FIR filter using Remez (Parks-McClellan) algorithm.
            </summary>
            <param name="order">Filter order</param>
            <param name="fa1">Left stopband edge frequency</param>
            <param name="fp1">Passband left edge frequency</param>
            <param name="fp2">Passband right edge frequency</param>
            <param name="fa2">Right stopband edge frequency</param>
            <param name="wa1">Left stopband weight</param>
            <param name="wp">Passband weight</param>
            <param name="wa2">Right stopband weight</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirEquirippleBs(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Designs equiripple bandstop FIR filter using Remez (Parks-McClellan) algorithm.
            </summary>
            <param name="order">Filter order</param>
            <param name="fp1">Left passband edge frequency</param>
            <param name="fa1">Stopband left edge frequency</param>
            <param name="fa2">Stopband right edge frequency</param>
            <param name="fp2">Right passband edge frequency</param>
            <param name="wp1">Left passband weight</param>
            <param name="wa">Stopband weight</param>
            <param name="wp2">Right passband weight</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirLpToHp(System.Double[])">
            <summary>
            Converts linear-phase lowpass filter to highpass filter with the same cutoff frequency. 
            This method works only for odd-sized kernels.
            </summary>
            <param name="kernel">Lowpass filter kernel</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirHpToLp(System.Double[])">
            <summary>
            Converts linear-phase highpass filter to lowpass filter with the same cutoff frequency. 
            This method works only for odd-sized kernels.
            </summary>
            <param name="kernel">Highpass filter kernel</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirBpToBs(System.Double[])">
            <summary>
            Converts linear-phase bandpass filter to bandstop filter with the same cutoff frequencies. 
            This method works only for odd-sized kernels.
            </summary>
            <param name="kernel">Bandpass filter kernel</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.FirBsToBp(System.Double[])">
            <summary>
            Converts linear-phase bandstop filter to bandpass filter with the same cutoff frequencies. 
            This method works only for odd-sized kernels.
            </summary>
            <param name="kernel">Bandstop filter kernel</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.IirNotch(System.Double,System.Double)">
            <summary>
            Designs IIR notch filter.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor (characterizes notch filter -3dB bandwidth relative to its center frequency)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.IirPeak(System.Double,System.Double)">
            <summary>
            Designs IIR peak filter.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor (characterizes peak filter -3dB bandwidth relative to its center frequency)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.IirCombNotch(System.Double,System.Double)">
            <summary>
            Designs IIR comb notch filter.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor (characterizes notch filter -3dB bandwidth relative to its center frequency)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.IirCombPeak(System.Double,System.Double)">
            <summary>
            Designs IIR comb peak filter.
            </summary>
            <param name="frequency">Normalized center frequency in range [0..0.5]</param>
            <param name="q">Q factor (characterizes peak filter -3dB bandwidth relative to its center frequency)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.IirLpTf(System.Double,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Designs lowpass pole filter.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="poles">Analog prototype poles</param>
            <param name="zeros">Analog prototype zeros</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.IirHpTf(System.Double,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Designs highpass pole filter.
            </summary>
            <param name="frequency">Normalized cutoff frequency in range [0..0.5]</param>
            <param name="poles">Analog prototype poles</param>
            <param name="zeros">Analog prototype zeros</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.IirBpTf(System.Double,System.Double,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Designs bandpass pole filter.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="poles">Analog prototype poles</param>
            <param name="zeros">Analog prototype zeros</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.IirBsTf(System.Double,System.Double,System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Designs bandstop pole filter.
            </summary>
            <param name="frequencyLow">Normalized low cutoff frequency in range [0..0.5]</param>
            <param name="frequencyHigh">Normalized high cutoff frequency in range [0..0.5]</param>
            <param name="poles">Analog prototype poles</param>
            <param name="zeros">Analog prototype zeros</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.SosToTf(NWaves.Filters.Base.TransferFunction[])">
            <summary>
            Converts second-order sections to transfer function (zeros-poles-gain).
            </summary>
            <param name="sos">Array of SOS transfer functions</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.TfToSos(NWaves.Filters.Base.TransferFunction)">
            <summary>
            Converts transfer function (zeros-poles-gain) to second-order sections.
            </summary>
            <param name="tf">Transfer function</param>
        </member>
        <member name="M:NWaves.Filters.Fda.DesignFilter.RemoveConjugated(System.Collections.Generic.List{System.Numerics.Complex})">
            <summary>
            Leaves only one of two conjugated numbers in the list of complex numbers.
            </summary>
            <param name="c">List of complex numbers</param>
        </member>
        <member name="T:NWaves.Filters.Fda.FilterBanks">
            <summary>
            Contains methods providing general shapes of filter banks:
            <list type="bullet">
                <item>triangular</item>
                <item>rectangular</item>
                <item>FIR bandpass (close to trapezoidal, slightly overlapping)</item>
                <item>BiQuad bandpass</item>
            </list>
            
            ...and methods for obtaining the most widely used frequency bands:
            
            <list type="bullet">
                <item>Herz bands</item>
                <item>Mel bands (HTK and Slaney)</item>
                <item>Bark bands (uniform and Slaney)</item>
                <item>Critical bands</item>
                <item>ERB filterbank</item>
                <item>Octaves (from MPEG-7)</item>
                <item>Chroma</item>
            </list>
            </summary>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.Triangular(System.Int32,System.Int32,System.ValueTuple{System.Double,System.Double,System.Double}[],NWaves.Filters.Fda.VtlnWarper,System.Func{System.Double,System.Double})">
            <summary>
            Generates triangular filterbank weights based on given <paramref name="frequencies"/>.
            </summary>
            <param name="fftSize">Assumed size of FFT</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="frequencies">Array of frequency tuples (left, center, right) for each filter</param>
            <param name="vtln">VTLN frequency warper</param>
            <param name="mapper">Frequency scale mapper (e.g. herz-to-mel) used here only for proper weighting</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.Rectangular(System.Int32,System.Int32,System.ValueTuple{System.Double,System.Double,System.Double}[],NWaves.Filters.Fda.VtlnWarper,System.Func{System.Double,System.Double})">
            <summary>
            Generates rectangular filterbank weights based on given <paramref name="frequencies"/>.
            </summary>
            <param name="fftSize">Assumed size of FFT</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="frequencies">Array of frequency tuples (left, center, right) for each filter</param>
            <param name="vtln">VTLN frequency warper</param>
            <param name="mapper">Frequency scale mapper (e.g. herz-to-mel)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.Trapezoidal(System.Int32,System.Int32,System.ValueTuple{System.Double,System.Double,System.Double}[],NWaves.Filters.Fda.VtlnWarper,System.Func{System.Double,System.Double})">
            <summary>
            Generates FIR bandpass (close to trapezoidal) filterbank based on given <paramref name="frequencies"/>.
            </summary>
            <param name="fftSize">Assumed size of FFT</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="frequencies">Array of frequency tuples (left, center, right) for each filter</param>
            <param name="vtln">VTLN frequency warper</param>
            <param name="mapper">Frequency scale mapper (e.g. herz-to-mel)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.BiQuad(System.Int32,System.Int32,System.ValueTuple{System.Double,System.Double,System.Double}[])">
            <summary>
            Generates BiQuad bandpass overlapping filters based on given <paramref name="frequencies"/>.
            </summary>
            <param name="fftSize">Assumed size of FFT</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="frequencies">Array of frequency tuples (left, center, right) for each filter</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.UniformBands(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns frequency tuples for uniformly spaced frequency bands on any scale.
            </summary>
            <param name="scaleMapper">The function that converts Hz to other frequency scale</param>
            <param name="inverseMapper">The function that converts frequency from alternate scale back to Hz</param>
            <param name="filterCount">Number of filters</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="overlap">Flag indicating that bands should overlap</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.HerzBands(System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns frequency tuples for uniformly spaced frequency bands on Herz scale.
            </summary>
            <param name="combFilterCount">Number of filters</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="overlap">Flag indicating that bands should overlap</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.MelBands(System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns frequency tuples for uniformly spaced frequency bands on Mel scale.
            </summary>
            <param name="melFilterCount">Number of mel filters to create</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="overlap">Flag indicating that bands should overlap</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.MelBandsSlaney(System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns frequency tuples for uniformly spaced frequency bands on Mel scale 
            (according to M.Slaney's formula).
            </summary>
            <param name="melFilterCount">Number of mel filters to create</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="overlap">Flag indicating that bands should overlap</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.BarkBands(System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns frequency tuples for uniformly spaced frequency bands on Bark scale (Traunmueller, 1990).
            </summary>
            <param name="barkFilterCount">Number of bark filters to create</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="overlap">Flag indicating that bands should overlap</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.BarkBandsSlaney(System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns frequency tuples for uniformly spaced frequency bands on Bark scale (Wang, 1992).
            </summary>
            <param name="barkFilterCount">Number of bark filters to create</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="overlap">Flag indicating that bands should overlap</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.CriticalBands(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Returns frequency tuples for critical bands.
            </summary>
            <param name="filterCount">Number of filters to create</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.OctaveBands(System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns frequency tuples for octave bands.
            </summary>
            <param name="octaveCount">Number of octave filters to create</param>
            <param name="samplingRate">Assumed sampling rate of a signal</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="overlap">Flag indicating that bands should overlap</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.Chroma(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Generates chroma feature filter bank (slightly over-complicated to match librosa analog).
            </summary>
            <param name="fftSize">Assumed size of FFT</param>
            <param name="samplingRate">Assumed sampling rate</param>
            <param name="chromaCount">Number of chroma features (12 pitch classes by default)</param>
            <param name="tuning">Tuning deviation from A440 in fractions of a chroma bin</param>
            <param name="centerOctave">If octaveWidth=0, centerOctave is ignored. Otherwise, it's the center of Gaussian window</param>
            <param name="octaveWidth">If octaveWidth=0, the shape is rectangular. Otherwise, it's the width of Gaussian window</param>
            <param name="norm">Norm: 0 - no normalization, 1 - apply L1-norm, 2 - apply L2-norm</param>
            <param name="baseC">If baseC=true, the filter bank will start at 'C'. Otherwise, the filter bank will start at 'A'.</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.MelBankSlaney(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,NWaves.Filters.Fda.VtlnWarper)">
            <summary>
            Creates overlapping triangular mel filters (as suggested by Malcolm Slaney).
            </summary>
            <param name="filterCount">Number of mel filters</param>
            <param name="fftSize">Assumed size of FFT</param>
            <param name="samplingRate">Assumed sampling rate</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="normalizeGain">True if gain should be normalized; false if all filters should have same height 1.0</param>
            <param name="vtln">VTLN frequency warper</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.BarkBankSlaney(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Creates overlapping trapezoidal bark filters (as suggested by Malcolm Slaney).
            </summary>
            <param name="filterCount">Number of bark filters</param>
            <param name="fftSize">Assumed size of FFT</param>
            <param name="samplingRate">Assumed sampling rate</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="width">Constant width of each band in Bark</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.Erb(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates overlapping ERB filters.
            </summary>
            <param name="erbFilterCount">Number of ERB filters</param>
            <param name="fftSize">Assumed size of FFT</param>
            <param name="samplingRate">Assumed sampling rate</param>
            <param name="lowFreq">Lower bound of the frequency range</param>
            <param name="highFreq">Upper bound of the frequency range</param>
            <param name="normalizeGain">True if gain should be normalized; false if all filters should have same height 1.0</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.Normalize(System.Int32,System.ValueTuple{System.Double,System.Double,System.Double}[],System.Single[][])">
            <summary>
            Normalizes weights (so that energies in each band are approx. equal).
            </summary>
            <param name="filterCount">Number of filters</param>
            <param name="frequencies">Array of frequency tuples (left, center, right) for each filter</param>
            <param name="filterBank">Filter bank</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.Apply(System.Single[][],System.Single[],System.Single[])">
            <summary>
            Applies filters to spectrum and fills resulting filtered spectrum.
            </summary>
            <param name="filterbank">Filter bank</param>
            <param name="spectrum">Spectrum</param>
            <param name="filtered">Spectrum of filtered signal</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.Apply(System.Single[][],System.Collections.Generic.IList{System.Single[]})">
            <summary>
            Applies filters to all spectra in given sequence.
            </summary>
            <param name="filterbank">Filter bank</param>
            <param name="spectrogram">Output spectra of filtered signal</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.ApplyAndLog(System.Single[][],System.Single[],System.Single[],System.Single)">
            <summary>
            Applies filters to spectrum and then does Ln() on resulting spectrum.
            </summary>
            <param name="filterbank">Filter bank</param>
            <param name="spectrum">Spectrum</param>
            <param name="filtered">Spectrum of filtered signal</param>
            <param name="floor">Log-floor (Threshold for log-operation)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.ApplyAndLog10(System.Single[][],System.Single[],System.Single[],System.Single)">
            <summary>
            Applies filters to spectrum and then does Log10() on resulting spectrum.
            </summary>
            <param name="filterbank">Filter bank</param>
            <param name="spectrum">Spectrum</param>
            <param name="filtered">Spectrum of filtered signal</param>
            <param name="floor">Log-floor (Threshold for log-operation)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.ApplyAndToDecibel(System.Single[][],System.Single[],System.Single[],System.Single)">
            <summary>
            Applies filters to spectrum and then does 10*Log10() on resulting spectrum 
            (added to compare MFCC coefficients with librosa results).
            </summary>
            <param name="filterbank">Filter bank</param>
            <param name="spectrum">Spectrum</param>
            <param name="filtered">Spectrum of filtered signal</param>
            <param name="minLevel">Threshold for log-operation</param>
        </member>
        <member name="M:NWaves.Filters.Fda.FilterBanks.ApplyAndPow(System.Single[][],System.Single[],System.Single[],System.Double)">
            <summary>
            Applies filters to spectrum and then does Pow(x, power) on resulting spectrum. 
            For example, in PLP: power=1/3 (cubic root).
            </summary>
            <param name="filterbank">Filter bank</param>
            <param name="spectrum">Spectrum</param>
            <param name="filtered">Spectrum of filtered signal</param>
            <param name="power">Power</param>
        </member>
        <member name="T:NWaves.Filters.Fda.Remez">
            <summary>
            Optimal equiripple filter designer based on Remez (Parks-McClellan) algorithm.
            <code>
            Example: <br/>
            <br/>
                var order = 57; <br/>
                var freqs = new double[] { 0, 0.15, 0.17, 0.5 }; <br/>
                var response = new double[] { 1, 0 };            <br/>
                var weights = new double[] { 0.01, 0.1 };        <br/>
            <br/>    
                var remez = new Remez(order, freqs, response, weights); <br/>
            <br/>    
                var kernel = remez.Design(); <br/>
            <br/>
            <br/>
                // We can monitor the following properties: <br/>
            <br/>
                remez.Iterations           <br/>
                remez.ExtremalFrequencies  <br/>
                remez.InterpolatedResponse <br/>
                remez.Error                <br/>
            </code>
            </summary>
        </member>
        <member name="P:NWaves.Filters.Fda.Remez.Order">
            <summary>
            Gets filter order.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Fda.Remez.Iterations">
            <summary>
            Gets number of actual iterations.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Fda.Remez.K">
            <summary>
            Gets number of extremal frequencies (K = Order/2 + 2).
            </summary>
        </member>
        <member name="P:NWaves.Filters.Fda.Remez.InterpolatedResponse">
            <summary>
            Gets interpolated frequency response.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Fda.Remez.Error">
            <summary>
            Gets array of errors.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Fda.Remez.ExtremalFrequencies">
            <summary>
            Gets array of extremal frequencies.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez.Tolerance">
            <summary>
            Tolerance (for computing denominators).
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez._extrs">
            <summary>
            Indices of extremal frequencies in the grid.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez._grid">
            <summary>
            Grid.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez._freqs">
            <summary>
            Band edge frequencies.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez._desired">
            <summary>
            Desired frequency response on entire grid.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez._weights">
            <summary>
            Weights on entire grid.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez._points">
            <summary>
            Points for interpolation.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez._gammas">
            <summary>
            Gamma coefficients used in Lagrange interpolation.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.Remez._cosTable">
            <summary>
            Precomputed cosines.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.#ctor(System.Int32,System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Fda.Remez"/> filter designer.
            </summary>
            <param name="order">Order of filter</param>
            <param name="frequencies">Array of normalized frequencies</param>
            <param name="desired">Array of desired response values at given frequencies</param>
            <param name="weights">Array of weights at given frequencies</param>
            <param name="gridDensity">Grid density</param>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.MakeGrid(System.Double[],System.Double[],System.Int32)">
            <summary>
            Creates grid (uniform in each band).
            </summary>
            <param name="desired">Array of desired response values</param>
            <param name="weights">Array of weights</param>
            <param name="gridDensity">Grid density</param>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.InitExtrema">
            <summary>
            Uniform initialization of extremal frequencies.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.Design(System.Int32)">
            <summary>
            Designs optimal equiripple filter and returns the kernel of designed filter.
            </summary>
            <param name="maxIterations">Max number of iterations</param>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.UpdateCoefficients">
            <summary>
            Updates gamma coefficients, interpolation points and delta.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.ImpulseResponse">
            <summary>
            Reconstructs impulse response from interpolated frequency response.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.Gamma(System.Int32)">
            <summary>
            Computes gamma coefficient.
            </summary>
            <param name="k">Input value</param>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.Lagrange(System.Double)">
            <summary>
            Barycentric Lagrange interpolation.
            </summary>
            <param name="freq">Frequency</param>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.DbToPassbandWeight(System.Double)">
            <summary>
            Converts ripple (in dB) to passband weight.
            </summary>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.DbToStopbandWeight(System.Double)">
            <summary>
            Converts ripple (in dB) to stopband weight.
            </summary>
            <param name="ripple">Ripple (in dB)</param>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.EstimateOrder(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Estimates order of a low-pass filter.
            </summary>
            <param name="fp">Passband edge frequency</param>
            <param name="fa">Stopband edge frequency</param>
            <param name="dp">Passband weight</param>
            <param name="da">Stopband weight</param>
        </member>
        <member name="M:NWaves.Filters.Fda.Remez.EstimateOrder(System.Double[],System.Double[])">
            <summary>
            Estimates order of a filter with custom bands. 
            
            Parameters are given in conventional format. For example:
            
            <code>
                frequencies: { 0, 0.2, 0.22, 0.32, 0.33, 0.5 }
            <br/>
                deltas: { 0.01, 0.1, 0.06 }
            </code>
            </summary>
            <param name="frequencies">Array of edge frequencies</param>
            <param name="deltas">Array of weights</param>
        </member>
        <member name="T:NWaves.Filters.Fda.VtlnWarper">
            <summary>
            Vocal Tract Length Normalization (VTLN) similar to Kaldi implementation.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.VtlnWarper._lowFreq">
            <summary>
            Lower frequency.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.VtlnWarper._highFreq">
            <summary>
            Upper frequency.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.VtlnWarper._lowVtln">
            <summary>
            Lower frequency for VTLN.
            </summary>
        </member>
        <member name="F:NWaves.Filters.Fda.VtlnWarper._highVtln">
            <summary>
            Upper frequency for VTLN.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Fda.VtlnWarper.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Fda.VtlnWarper"/>.
            </summary>
            <param name="alpha">Warping factor</param>
            <param name="lowFrequency">Lower frequency</param>
            <param name="highFrequency">Upper frequency</param>
            <param name="lowVtln">Lower frequency for VTLN</param>
            <param name="highVtln">Upper frequency for VTLN</param>
        </member>
        <member name="M:NWaves.Filters.Fda.VtlnWarper.Warp(System.Double)">
            <summary>
            Warps <paramref name="frequency"/>.
            </summary>
        </member>
        <member name="T:NWaves.Filters.HilbertFilter">
            <summary>
            Represents Hilbert filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.HilbertFilter.Size">
            <summary>
            Gets size of the filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.HilbertFilter.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.HilbertFilter"/> of given <paramref name="size"/>.
            </summary>
            <param name="size">Size of the filter</param>
        </member>
        <member name="M:NWaves.Filters.HilbertFilter.MakeKernel(System.Int32)">
            <summary>
            Generates filter kernel of given <paramref name="size"/>.
            </summary>
            <param name="size">Kernel size</param>
        </member>
        <member name="T:NWaves.Filters.MedianFilter">
            <summary>
            Represents median filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.MedianFilter.Size">
            <summary>
            Gets the size of median filter.
            </summary>
        </member>
        <member name="F:NWaves.Filters.MedianFilter._delayLine">
            <summary>
            Delay line (circular buffer).
            </summary>
        </member>
        <member name="F:NWaves.Filters.MedianFilter._sortedSamples">
            <summary>
            Buffer filled with sorted values from delay line.
            </summary>
        </member>
        <member name="F:NWaves.Filters.MedianFilter._n">
            <summary>
            Index of the current sample.
            </summary>
        </member>
        <member name="M:NWaves.Filters.MedianFilter.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.MedianFilter"/> of given <paramref name="size"/>.
            </summary>
            <param name="size">Size of the filter</param>
        </member>
        <member name="M:NWaves.Filters.MedianFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.MedianFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.MedianFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.MedianFilter2">
            <summary>
            Provides alternate implementation of median filter. 
            It is slightly faster than <see cref="T:NWaves.Filters.MedianFilter"/> only for small filter sizes (not exceeding 5, approx.). 
            In other cases <see cref="T:NWaves.Filters.MedianFilter"/> should be preferred.
            </summary>
        </member>
        <member name="P:NWaves.Filters.MedianFilter2.Size">
            <summary>
            Gets the size of median filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.MedianFilter2.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.MedianFilter2"/> of given <paramref name="size"/>.
            </summary>
            <param name="size">Size of the filter</param>
        </member>
        <member name="M:NWaves.Filters.MedianFilter2.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.MedianFilter2.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.MedianFilter2.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.MovingAverageFilter">
            <summary>
            Provides non-recursive implementation of moving-average filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.MovingAverageFilter.Size">
            <summary>
            Gets size of the filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.MovingAverageFilter.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.MovingAverageFilter"/> of given <paramref name="size"/>.
            </summary>
            <param name="size">Size of the filter</param>
        </member>
        <member name="M:NWaves.Filters.MovingAverageFilter.MakeKernel(System.Int32)">
            <summary>
            Generates filter kernel of given <paramref name="size"/>.
            </summary>
            <param name="size">Kernel size</param>
        </member>
        <member name="T:NWaves.Filters.MovingAverageRecursiveFilter">
            <summary>
            Provides fast recursive implementation of moving average filter:
            <code>
                y[n] = x[n] / N - x[n - N] / N + y[n - 1] <br/>
            i.e. <br/>
                b = [1/N, 0, 0, 0, 0, ... , 0, -1/N] <br/>
                a = [1, -1] <br/>
            </code>
            </summary>
        </member>
        <member name="P:NWaves.Filters.MovingAverageRecursiveFilter.Size">
            <summary>
            Gets size of the filter.
            </summary>
        </member>
        <member name="F:NWaves.Filters.MovingAverageRecursiveFilter._out1">
            <summary>
            Delay line.
            </summary>
        </member>
        <member name="M:NWaves.Filters.MovingAverageRecursiveFilter.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.MovingAverageRecursiveFilter"/> of given <paramref name="size"/>.
            </summary>
            <param name="size">Size of the filter</param>
        </member>
        <member name="M:NWaves.Filters.MovingAverageRecursiveFilter.MakeNumerator(System.Int32)">
            <summary>
            Generates numerator of transfer function.
            </summary>
            <param name="size">Numerator size</param>
        </member>
        <member name="M:NWaves.Filters.MovingAverageRecursiveFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.MovingAverageRecursiveFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.MovingAverageRecursiveFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.OnePole.HighPassFilter">
            <summary>
            Represents one-pole highpass filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.OnePole.HighPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="M:NWaves.Filters.OnePole.HighPassFilter.#ctor(System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.OnePole.HighPassFilter"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Cutoff frequency</param>
        </member>
        <member name="M:NWaves.Filters.OnePole.HighPassFilter.SetCoefficients(System.Double)">
            <summary>
            Sets filter coefficients based on given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Cutoff frequency</param>
        </member>
        <member name="M:NWaves.Filters.OnePole.HighPassFilter.Change(System.Double)">
            <summary>
            Changes filter coefficients (preserving the state of the filter).
            </summary>
            <param name="frequency">Cutoff frequency</param>
        </member>
        <member name="T:NWaves.Filters.OnePole.LowPassFilter">
            <summary>
            Represents one-pole lowpass filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.OnePole.LowPassFilter.Frequency">
            <summary>
            Gets cutoff frequency.
            </summary>
        </member>
        <member name="M:NWaves.Filters.OnePole.LowPassFilter.#ctor(System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.OnePole.LowPassFilter"/> with given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Cutoff frequency</param>
        </member>
        <member name="M:NWaves.Filters.OnePole.LowPassFilter.SetCoefficients(System.Double)">
            <summary>
            Sets filter coefficients based on given cutoff <paramref name="frequency"/>.
            </summary>
            <param name="frequency">Cutoff frequency</param>
        </member>
        <member name="M:NWaves.Filters.OnePole.LowPassFilter.Change(System.Double)">
            <summary>
            Changes filter coefficients (preserving the state of the filter).
            </summary>
            <param name="frequency">Cutoff frequency</param>
        </member>
        <member name="T:NWaves.Filters.OnePole.OnePoleFilter">
            <summary>
            Represents one-pole IIR filter.
            </summary>
        </member>
        <member name="F:NWaves.Filters.OnePole.OnePoleFilter._prev">
            <summary>
            Delay line.
            </summary>
        </member>
        <member name="M:NWaves.Filters.OnePole.OnePoleFilter.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Filters.OnePole.OnePoleFilter"/>.
            </summary>
        </member>
        <member name="M:NWaves.Filters.OnePole.OnePoleFilter.#ctor(System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.OnePole.OnePoleFilter"/> from filter coefficients.
            </summary>
            <param name="b">Numerator coefficient</param>
            <param name="a">Pole</param>
        </member>
        <member name="M:NWaves.Filters.OnePole.OnePoleFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.OnePole.OnePoleFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.Polyphase.PolyphaseSystem">
            <summary>
            Represents the system of polyphase filters.
            </summary>
        </member>
        <member name="P:NWaves.Filters.Polyphase.PolyphaseSystem.Filters">
            <summary>
            <para>Gets polyphase filters with transfer function E(z^k).</para>
            <code>
            Example: <br/>
            <br/>
            h = [1, 2, 3, 4, 3, 2, 1],  k = 3 <br/>
            <br/>
            e0 = [1, 0, 0, 4, 0, 0, 1] <br/>
            e1 = [0, 2, 0, 0, 3, 0, 0] <br/>
            e2 = [0, 0, 3, 0, 0, 2, 0] <br/>
            </code>
            </summary>
        </member>
        <member name="P:NWaves.Filters.Polyphase.PolyphaseSystem.MultirateFilters">
            <summary>
            <para>Gets polyphase filters with transfer function E(z) used for multi-rate processing.</para>
            <code>
            h = [1, 2, 3, 4, 3, 2, 1],  k = 3 <br/>
            <br/>
            e0 = [1, 4, 1] <br/>
            e1 = [2, 3, 0] <br/>
            e2 = [3, 2, 0] <br/>
            </code>
            </summary>
        </member>
        <member name="M:NWaves.Filters.Polyphase.PolyphaseSystem.#ctor(System.Double[],System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.Polyphase.PolyphaseSystem"/> with <paramref name="n"/> filters from filter <paramref name="kernel"/>.
            </summary>
            <param name="kernel">Filter kernel</param>
            <param name="n">Number of polyphase filters</param>
            <param name="type">Polyphase system type (1 or 2)</param>
        </member>
        <member name="M:NWaves.Filters.Polyphase.PolyphaseSystem.Decimate(NWaves.Signals.DiscreteSignal)">
            <summary>
            Does polyphase decimation (for type-I systems).
            </summary>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Filters.Polyphase.PolyphaseSystem.Interpolate(NWaves.Signals.DiscreteSignal)">
            <summary>
            Does polyphase interpolation (for type-II systems).
            </summary>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Filters.Polyphase.PolyphaseSystem.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.Polyphase.PolyphaseSystem.Reset">
            <summary>
            Resets polyphase filters.
            </summary>
        </member>
        <member name="M:NWaves.Filters.Polyphase.PolyphaseSystem.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Filters.PreEmphasisFilter">
            <summary>
            Represents pre-emphasis FIR filter.
            </summary>
        </member>
        <member name="F:NWaves.Filters.PreEmphasisFilter._prevSample">
            <summary>
            Delay line (consisting of one sample).
            </summary>
        </member>
        <member name="M:NWaves.Filters.PreEmphasisFilter.#ctor(System.Double,System.Boolean)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.PreEmphasisFilter"/>.
            </summary>
            <param name="a">Pre-emphasis coefficient</param>
            <param name="normalize">Normalize freq response to unit gain</param>
        </member>
        <member name="M:NWaves.Filters.PreEmphasisFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.PreEmphasisFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.PreEmphasisFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Filters.RastaFilter">
            <summary>
            Represents RASTA filter (used for robust speech processing).
            </summary>
        </member>
        <member name="M:NWaves.Filters.RastaFilter.#ctor(System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.RastaFilter"/>.
            </summary>
            <param name="pole">Pole</param>
        </member>
        <member name="T:NWaves.Filters.SavitzkyGolayFilter">
            <summary>
            Represents Savitzky-Golay filter.
            </summary>
        </member>
        <member name="P:NWaves.Filters.SavitzkyGolayFilter.Size">
            <summary>
            Gets size of the filter.
            </summary>
        </member>
        <member name="M:NWaves.Filters.SavitzkyGolayFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.SavitzkyGolayFilter"/> of given <paramref name="size"/>.
            </summary>
            <param name="size">Size of the filter (must be odd number in range [5..31])</param>
            <param name="deriv">Derivative (must be 0, 1 or 2)</param>
        </member>
        <member name="M:NWaves.Filters.SavitzkyGolayFilter.MakeKernel(System.Int32,System.Int32)">
            <summary>
            Generates filter kernel. Kernels are precomputed.
            </summary>
            <param name="size">Size of the filter (must be odd number in range [5..31])</param>
            <param name="deriv">Derivative (must be 0, 1 or 2)</param>
        </member>
        <member name="T:NWaves.Filters.ThiranFilter">
            <summary>
            Represents N-th order Thiran allpass interpolation filter for Delta delay samples.
            <code>
            Example:
            <br/>
                N = 13           <br/>
                Delta = 13 + 0.4 <br/>
            </code>
            </summary>
        </member>
        <member name="M:NWaves.Filters.ThiranFilter.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.ThiranFilter"/> of given <paramref name="order"/>.
            </summary>
            <param name="order">Filter order</param>
            <param name="delta">Delta (fractional delay)</param>
        </member>
        <member name="M:NWaves.Filters.ThiranFilter.MakeTf(System.Int32,System.Double)">
            <summary>
            Generates transfer function.
            </summary>
            <param name="order">Filter order</param>
            <param name="delta">Delta (fractional delay)</param>
        </member>
        <member name="M:NWaves.Filters.ThiranFilter.ThiranCoefficient(System.Int32,System.Int32,System.Double)">
            <summary>
            Computes <paramref name="k"/>-th coefficient of denominator of transfer function.
            </summary>
            <param name="k">k</param>
            <param name="n">n</param>
            <param name="delta">Delta</param>
        </member>
        <member name="T:NWaves.Filters.WienerFilter">
            <summary>
            Represents Wiener filter. 
            Implementation is identical to scipy.signal.wiener().
            </summary>
        </member>
        <member name="F:NWaves.Filters.WienerFilter._size">
            <summary>
            Size of the Wiener filter.
            </summary>
        </member>
        <member name="F:NWaves.Filters.WienerFilter._noise">
            <summary>
            Estimated noise power.
            </summary>
        </member>
        <member name="M:NWaves.Filters.WienerFilter.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Filters.WienerFilter"/> of given <paramref name="size"/>.
            </summary>
            <param name="size">Size of the Wiener filter</param>
            <param name="noise">Estimated noise power</param>
        </member>
        <member name="M:NWaves.Filters.WienerFilter.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Applies filter to entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Filters.WienerFilter.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Filters.WienerFilter.Reset">
            <summary>
            Resets filter.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Convolution.ComplexConvolver">
            <summary>
            <para>
            Represents fast (FFT) convolver for complex-valued inputs/outputs.
            </para>
            <para>
            <see cref="T:NWaves.Operations.Convolution.ComplexConvolver"/> does not participate in heavy calculations, 
            so it does not contain internal buffers. Memory is allocated for each operation ad-hoc.
            </para>
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.ComplexConvolver.Convolve(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal,System.Int32)">
            <summary>
            Does fast convolution of <paramref name="signal"/> with <paramref name="kernel"/> via FFT. 
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.ComplexConvolver.CrossCorrelate(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal,System.Int32)">
            <summary>
            Does fast cross-correlation between <paramref name="signal"/> and <paramref name="kernel"/> via FFT. 
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.ComplexConvolver.Deconvolve(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal,System.Int32)">
            <summary>
            Does fast deconvolution of <paramref name="signal"/> from <paramref name="kernel"/> via polynomial division and FFT.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Convolution.Convolver">
            <summary>
            Represents fast (FFT) convolver.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.Convolver._fftSize">
            <summary>
            FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.Convolver._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.Convolver.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.Convolver"/>. 
            Allocates necessary memory according to <paramref name="fftSize"/>. 
            If <paramref name="fftSize"/> is not set then the memory will be allocated 
            during the first call of Convolve() method based on input signals.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.Convolver.PrepareMemory(System.Int32)">
            <summary>
            Prepares all necessary arrays for calculations.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.Convolver.Convolve(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Does fast convolution of <paramref name="signal"/> with <paramref name="kernel"/> via FFT. 
            Returns signal of length: signal.Length + kernel.Length - 1.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.Convolver.Convolve(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does fast convolution of <paramref name="input"/> with <paramref name="kernel"/> via FFT (maximally in-place). 
            The result is stored in <paramref name="output"/> array. 
            This version is best suited for block processing when memory needs to be reused. 
            Input arrays must have size equal to the size of FFT. 
            FFT size MUST be set explicitly and properly in constructor!
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.Convolver.CrossCorrelate(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Does fast cross-correlation between <paramref name="signal1"/> and <paramref name="signal2"/> via FFT.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.Convolver.CrossCorrelate(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does fast cross-correlation between <paramref name="input1"/> and <paramref name="input2"/> via FFT (maximally in-place). 
            The result is stored in <paramref name="output"/> array. 
            This version is best suited for block processing when memory needs to be reused. 
            Input arrays must have size equal to the size of FFT. 
            FFT size MUST be set explicitly and properly in constructor!
            </summary>
        </member>
        <member name="T:NWaves.Operations.Convolution.OlaBlockConvolver">
            <summary>
            Represents signal processor that implements Overlap-Add algorithm of block convolution.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver._kernel">
            <summary>
            Filter kernel.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver._fftSize">
            <summary>
            FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver._bufferOffset">
            <summary>
            Offset in the input delay line.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver._outputBufferOffset">
            <summary>
            Offset in the delay line.
            </summary>
        </member>
        <member name="P:NWaves.Operations.Convolution.OlaBlockConvolver.HopSize">
            <summary>
            Gets hop length: FFT size - kernel size + 1.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver.#ctor(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlaBlockConvolver"/> with given <paramref name="kernel"/> and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlaBlockConvolver"/> with given <paramref name="kernel"/> and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver.FromFilter(NWaves.Filters.Base.FirFilter,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlaBlockConvolver"/> with given FIR <paramref name="filter"/> kernel and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver.ChangeKernel(System.Single[])">
            <summary>
            Changes <paramref name="kernel"/> coefficients online.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver.ProcessFrame">
            <summary>
            Processes one frame (block).
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver.Reset">
            <summary>
            Resets Overlap-Add convolver.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Convolution.OlaBlockConvolver64">
            <summary>
            Represents signal processor that implements Overlap-Add algorithm of block convolution.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver64._kernel">
            <summary>
            Filter kernel.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver64._fftSize">
            <summary>
            FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver64._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver64._bufferOffset">
            <summary>
            Offset in the input delay line.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlaBlockConvolver64._outputBufferOffset">
            <summary>
            Offset in the delay line.
            </summary>
        </member>
        <member name="P:NWaves.Operations.Convolution.OlaBlockConvolver64.HopSize">
            <summary>
            Gets hop length: FFT size - kernel size + 1.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver64.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlaBlockConvolver64"/> with given <paramref name="kernel"/> and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver64.FromFilter(NWaves.Filters.Base64.FirFilter64,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlaBlockConvolver64"/> with given FIR <paramref name="filter"/> kernel and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver64.ChangeKernel(System.Double[])">
            <summary>
            Changes <paramref name="kernel"/> coefficients online.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver64.Process(System.Double)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver64.ProcessFrame">
            <summary>
            Processes one frame (block).
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlaBlockConvolver64.Reset">
            <summary>
            Resets Overlap-Add convolver.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Convolution.OlsBlockConvolver">
            <summary>
            Represents signal processor that implements Overlap-Save algorithm of block convolution.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver._kernel">
            <summary>
            Filter kernel.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver._fftSize">
            <summary>
            FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver._bufferOffset">
            <summary>
            Offset in the input delay line.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver._outputBufferOffset">
            <summary>
            Offset in the delay line.
            </summary>
        </member>
        <member name="P:NWaves.Operations.Convolution.OlsBlockConvolver.HopSize">
            <summary>
            Gets hop length: FFT size - kernel size + 1.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver.#ctor(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlsBlockConvolver"/> with given <paramref name="kernel"/> and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlsBlockConvolver"/> with given <paramref name="kernel"/> and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver.FromFilter(NWaves.Filters.Base.FirFilter,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlsBlockConvolver"/> with given FIR <paramref name="filter"/> kernel and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver.ChangeKernel(System.Single[])">
            <summary>
            Changes <paramref name="kernel"/> coefficients online.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver.ProcessFrame">
            <summary>
            Process one frame (block).
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver.Reset">
            <summary>
            Resets Overlap-Save convolver.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Convolution.OlsBlockConvolver64">
            <summary>
            Represents signal processor that implements Overlap-Save algorithm of block convolution.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver64._kernel">
            <summary>
            Filter kernel.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver64._fftSize">
            <summary>
            FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver64._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver64._bufferOffset">
            <summary>
            Offset in the input delay line.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Convolution.OlsBlockConvolver64._outputBufferOffset">
            <summary>
            Offset in the delay line.
            </summary>
        </member>
        <member name="P:NWaves.Operations.Convolution.OlsBlockConvolver64.HopSize">
            <summary>
            Gets hop length: FFT size - kernel size + 1.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver64.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlsBlockConvolver64"/> with given <paramref name="kernel"/> and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver64.FromFilter(NWaves.Filters.Base64.FirFilter64,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Convolution.OlsBlockConvolver64"/> with given FIR <paramref name="filter"/> kernel and <paramref name="fftSize"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver64.ChangeKernel(System.Double[])">
            <summary>
            Changes <paramref name="kernel"/> coefficients online.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver64.Process(System.Double)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver64.ProcessFrame">
            <summary>
            Processes one frame (block).
            </summary>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver64.ApplyTo(System.Double[],NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new filtered signal.
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="M:NWaves.Operations.Convolution.OlsBlockConvolver64.Reset">
            <summary>
            Resets Overlap-Save convolver.
            </summary>
        </member>
        <member name="T:NWaves.Operations.DynamicsMode">
            <summary>
            Defines types (modes) of dynamics processors.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsMode.Compressor">
            <summary>
            Smaller ratios, like 1:1, 2:1.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsMode.Limiter">
            <summary>
            Bigger ratios, like 5:1, 10:1.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsMode.Expander">
            <summary>
            Smaller ratios, like 1:1, 2:1.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsMode.NoiseGate">
            <summary>
            Very high ratios, like 5:1.
            </summary>
        </member>
        <member name="T:NWaves.Operations.DynamicsProcessor">
            <summary>
            Represents dynamics processor: limiter or compressor or expander or noise gate.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsProcessor._mode">
            <summary>
            Dynamics processor mode.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsProcessor._envelopeFollower">
            <summary>
            Envelope follower.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsProcessor._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsProcessor._minAmplitudeDb">
            <summary>
            Min threshold for dB amplitude.
            </summary>
        </member>
        <member name="F:NWaves.Operations.DynamicsProcessor.T">
            <summary>
            Attack/Release time coefficient.
            </summary>
        </member>
        <member name="P:NWaves.Operations.DynamicsProcessor.Threshold">
            <summary>
            Gets or sets compression/expansion threshold.
            </summary>
        </member>
        <member name="P:NWaves.Operations.DynamicsProcessor.Ratio">
            <summary>
            Gets or sets compression/expansion ratio.
            </summary>
        </member>
        <member name="P:NWaves.Operations.DynamicsProcessor.MakeupGain">
            <summary>
            Gets or sets makeup gain.
            </summary>
        </member>
        <member name="P:NWaves.Operations.DynamicsProcessor.Attack">
            <summary>
            Gets or sets attack time.
            </summary>
        </member>
        <member name="P:NWaves.Operations.DynamicsProcessor.Release">
            <summary>
            Gets or sets release time.
            </summary>
        </member>
        <member name="M:NWaves.Operations.DynamicsProcessor.#ctor(NWaves.Operations.DynamicsMode,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.DynamicsProcessor"/> in given <paramref name="mode"/>.
            </summary>
            <param name="mode">Type (mode) of dynamics processor</param>
            <param name="samplingRate">Sampling rate</param>
            <param name="threshold">Compression/expansion threshold</param>
            <param name="ratio">Compression/expansion ratio</param>
            <param name="makeupGain">Makeup gain</param>
            <param name="attack">Attack time (in seconds)</param>
            <param name="release">Release time (in seconds)</param>
            <param name="minAmplitudeDb">Min threshold for dB amplitude</param>
        </member>
        <member name="M:NWaves.Operations.DynamicsProcessor.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Operations.DynamicsProcessor.Reset">
            <summary>
            Resets dynamics processor.
            </summary>
        </member>
        <member name="M:NWaves.Operations.DynamicsProcessor.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new signal (dynamics).
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Operations.EnvelopeFollower">
            <summary>
            Represents envelope follower (envelope detector).
            </summary>
        </member>
        <member name="P:NWaves.Operations.EnvelopeFollower.AttackTime">
            <summary>
            Gets or sets attack time (in seconds).
            </summary>
        </member>
        <member name="P:NWaves.Operations.EnvelopeFollower.ReleaseTime">
            <summary>
            Gets or sets release time (in seconds).
            </summary>
        </member>
        <member name="F:NWaves.Operations.EnvelopeFollower._fs">
            <summary>
            Sampling rate.
            </summary>
        </member>
        <member name="F:NWaves.Operations.EnvelopeFollower._env">
            <summary>
            Current envelope sample.
            </summary>
        </member>
        <member name="F:NWaves.Operations.EnvelopeFollower._ga">
            <summary>
            Attack coefficient.
            </summary>
        </member>
        <member name="F:NWaves.Operations.EnvelopeFollower._gr">
            <summary>
            Release coefficient.
            </summary>
        </member>
        <member name="M:NWaves.Operations.EnvelopeFollower.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.EnvelopeFollower"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="attackTime">Attack time (in seconds)</param>
            <param name="releaseTime">Release time (in seconds)</param>
        </member>
        <member name="M:NWaves.Operations.EnvelopeFollower.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Operations.EnvelopeFollower.Reset">
            <summary>
            Resets envelope follower.
            </summary>
        </member>
        <member name="M:NWaves.Operations.EnvelopeFollower.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new signal (envelope).
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Operations.GriffinLimReconstructor">
            <summary>
            Reconstructs signal from a power (or magnitude) spectrogram using Griffin-Lim iterative algorithm.
            </summary>
        </member>
        <member name="F:NWaves.Operations.GriffinLimReconstructor._stft">
            <summary>
            STFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Operations.GriffinLimReconstructor._magnitudes">
            <summary>
            Magnitude part of the spectrogram.
            </summary>
        </member>
        <member name="P:NWaves.Operations.GriffinLimReconstructor.Gain">
            <summary>
            Get or sets magnitude gain factor.
            </summary>
        </member>
        <member name="M:NWaves.Operations.GriffinLimReconstructor.#ctor(System.Collections.Generic.List{System.Single[]},System.Int32,System.Int32,NWaves.Windows.WindowType,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.GriffinLimReconstructor"/> for iterative signal reconstruction from <paramref name="spectrogram"/>.
            </summary>
            <param name="spectrogram">Spectrogram (list of spectra)</param>
            <param name="windowSize">Window size fro STFT</param>
            <param name="hopSize">Hop size for STFT</param>
            <param name="window">Window for STFT</param>
            <param name="power">Power (2 - Power spectra, otherwise - Magnitude spectra)</param>
        </member>
        <member name="M:NWaves.Operations.GriffinLimReconstructor.#ctor(System.Collections.Generic.List{System.Single[]},NWaves.Transforms.Stft,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.GriffinLimReconstructor"/> for iterative signal reconstruction from <paramref name="spectrogram"/>.
            </summary>
            <param name="spectrogram">Spectrogram (list of spectra)</param>
            <param name="stft">STFT transformer</param>
            <param name="power">Power (2 - Power spectra, otherwise - Magnitude spectra)</param>
        </member>
        <member name="M:NWaves.Operations.GriffinLimReconstructor.Iterate(System.Single[])">
            <summary>
            Does one iteration of reconstruction and returns reconstructed signal at current step.
            </summary>
            <param name="signal">Signal reconstructed at previous iteration</param>
        </member>
        <member name="M:NWaves.Operations.GriffinLimReconstructor.Reconstruct(System.Int32)">
            <summary>
            Reconstructs signal from spectrogram iteratively.
            </summary>
            <param name="iterations">Number of iterations in Griffin-Lim algorithm</param>
        </member>
        <member name="T:NWaves.Operations.HarmonicPercussiveSeparator">
            <summary>
            Represents harmonic/percussive separator based on median filtering.
            </summary>
        </member>
        <member name="F:NWaves.Operations.HarmonicPercussiveSeparator._stft">
            <summary>
            Internal STFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Operations.HarmonicPercussiveSeparator._mask">
            <summary>
            Masking function.
            </summary>
        </member>
        <member name="F:NWaves.Operations.HarmonicPercussiveSeparator._medianHarmonic">
            <summary>
            Median filter along time axis.
            </summary>
        </member>
        <member name="F:NWaves.Operations.HarmonicPercussiveSeparator._medianPercussive">
            <summary>
            Median filter along frequency axis.
            </summary>
        </member>
        <member name="M:NWaves.Operations.HarmonicPercussiveSeparator.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,NWaves.Operations.HpsMasking)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.HarmonicPercussiveSeparator"/>.
            </summary>
            <param name="fftSize">FFT size</param>
            <param name="hopSize">Hop length (number of samples)</param>
            <param name="harmonicWinSize">Size of median filter along time axis</param>
            <param name="percussiveWinSize">Size of median filter along frequency axis</param>
            <param name="masking">Masking mode</param>
        </member>
        <member name="M:NWaves.Operations.HarmonicPercussiveSeparator.EvaluateSpectrograms(NWaves.Signals.DiscreteSignal)">
            <summary>
            Evaluates harmonic and percussive mag-phase spectrograms from given <paramref name="signal"/>. 
            Both spectrogram objects share the same phase array.
            </summary>
        </member>
        <member name="M:NWaves.Operations.HarmonicPercussiveSeparator.EvaluateSignals(NWaves.Signals.DiscreteSignal)">
            <summary>
            Extracts harmonic and percussive signals from given <paramref name="signal"/>.
            </summary>
        </member>
        <member name="T:NWaves.Operations.HpsMasking">
            <summary>
            Masking modes for HPS algorithm.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Modulator">
            <summary>
            Provides various modulation methods:
            <list type="bullet">
                <item>ring</item>
                <item>amplitude</item>
                <item>frequency</item>
                <item>phase</item>
            </list>
            </summary>
        </member>
        <member name="M:NWaves.Operations.Modulator.Ring(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Does ring modulation (RM) and returns RM signal.
            </summary>
            <param name="carrier">Carrier signal</param>
            <param name="modulator">Modulator signal</param>
        </member>
        <member name="M:NWaves.Operations.Modulator.Amplitude(NWaves.Signals.DiscreteSignal,System.Single,System.Single)">
            <summary>
            Does amplitude modulation (AM) and returns AM signal.
            </summary>
            <param name="carrier">Carrier signal</param>
            <param name="modulatorFrequency">Modulator frequency</param>
            <param name="modulationIndex">Modulation index (depth)</param>
        </member>
        <member name="M:NWaves.Operations.Modulator.Frequency(NWaves.Signals.DiscreteSignal,System.Single,System.Single,System.Single)">
            <summary>
            Does frequency modulation (FM) and returns FM signal.
            </summary>
            <param name="baseband">Baseband signal</param>
            <param name="carrierAmplitude">Carrier amplitude</param>
            <param name="carrierFrequency">Carrier frequency</param>
            <param name="deviation">Frequency deviation</param>
        </member>
        <member name="M:NWaves.Operations.Modulator.FrequencySinusoidal(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Does sinusoidal frequency modulation (FM) and returns sinusoidal FM signal.
            </summary>
            <param name="carrierFrequency">Carrier signal frequency</param>
            <param name="carrierAmplitude">Carrier signal amplitude</param>
            <param name="modulatorFrequency">Modulator frequency</param>
            <param name="modulationIndex">Modulation index (depth)</param>
            <param name="length">Length of FM signal</param>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Operations.Modulator.FrequencyLinear(System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Does linear frequency modulation (FM) and returns FM signal.
            </summary>
            <param name="carrierFrequency">Carrier signal frequency</param>
            <param name="carrierAmplitude">Carrier signal amplitude</param>
            <param name="modulationIndex">Modulation index (depth)</param>
            <param name="length">Length of FM signal</param>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Operations.Modulator.Phase(NWaves.Signals.DiscreteSignal,System.Single,System.Single,System.Single)">
            <summary>
            Does phase modulation (PM) and returns PM signal.
            </summary>
            <param name="baseband">Baseband signal</param>
            <param name="carrierAmplitude">Carrier amplitude</param>
            <param name="carrierFrequency">Carrier frequency</param>
            <param name="deviation">Frequency deviation</param>
        </member>
        <member name="M:NWaves.Operations.Modulator.DemodulateAmplitude(NWaves.Signals.DiscreteSignal)">
            <summary>
            Does simple amplitude demodulation of <paramref name="signal"/> based on Hilbert transform.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Modulator.DemodulateFrequency(NWaves.Signals.DiscreteSignal)">
            <summary>
            Does simple frequency demodulation pf <paramref name="signal"/> based on Hilbert transform.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Operation">
            <summary>
            Provides methods for various DSP/audio operations: 
            <list type="bullet">
                <item>convolution</item>
                <item>cross-correlation</item>
                <item>block convolution</item>
                <item>deconvolution</item>
                <item>resampling</item>
                <item>time-stretching</item>
                <item>rectification</item>
                <item>envelope detection</item>
                <item>spectral subtraction</item>
                <item>normalization (peak / RMS)</item>
                <item>periodogram (Welch / Lomb-Scargle)</item>
            </list>
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.Convolve(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Does fast convolution of <paramref name="signal"/> with <paramref name="kernel"/> via FFT.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.Convolve(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Does fast convolution of <paramref name="signal"/> with <paramref name="kernel"/> via FFT.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.Convolve(System.Double[],System.Double[])">
            <summary>
            Does fast convolution of <paramref name="signal"/> with <paramref name="kernel"/> via FFT.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.CrossCorrelate(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Does fast cross-correlation between <paramref name="signal1"/> and <paramref name="signal2"/> via FFT.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.CrossCorrelate(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Does fast cross-correlation between <paramref name="signal1"/> and <paramref name="signal2"/> via FFT.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.BlockConvolve(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal,System.Int32,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Does block convolution of <paramref name="signal"/> with <paramref name="kernel"/> 
            (using either Overlap-Add or Overlap-Save algorithm).
            </summary>
            <param name="signal">Signal</param>
            <param name="kernel">Convolution kernel</param>
            <param name="fftSize">FFT size</param>
            <param name="method">Block convolution method (OverlapAdd / OverlapSave)</param>
        </member>
        <member name="M:NWaves.Operations.Operation.Deconvolve(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Deconvolves <paramref name="signal"/> and <paramref name="kernel"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="kernel">Kernel</param>
        </member>
        <member name="M:NWaves.Operations.Operation.Interpolate(NWaves.Signals.DiscreteSignal,System.Int32,NWaves.Filters.Base.FirFilter)">
            <summary>
            Does interpolation of <paramref name="signal"/> followed by lowpass filtering.
            </summary>
            <param name="signal">Signal</param>
            <param name="factor">Interpolation factor (e.g. factor=2 if 8000 Hz -> 16000 Hz)</param>
            <param name="filter">Lowpass anti-aliasing filter</param>
        </member>
        <member name="M:NWaves.Operations.Operation.Decimate(NWaves.Signals.DiscreteSignal,System.Int32,NWaves.Filters.Base.FirFilter)">
            <summary>
            Does decimation of <paramref name="signal"/> preceded by lowpass filtering.
            </summary>
            <param name="signal">Signal</param>
            <param name="factor">Decimation factor (e.g. factor=2 if 16000 Hz -> 8000 Hz)</param>
            <param name="filter">Lowpass anti-aliasing filter</param>
        </member>
        <member name="M:NWaves.Operations.Operation.Resample(NWaves.Signals.DiscreteSignal,System.Int32,NWaves.Filters.Base.FirFilter,System.Int32)">
            <summary>
            Does band-limited resampling of <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="newSamplingRate">Desired sampling rate</param>
            <param name="filter">Lowpass anti-aliasing filter</param>
            <param name="order">Order</param>
        </member>
        <member name="M:NWaves.Operations.Operation.ResampleUpDown(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,NWaves.Filters.Base.FirFilter)">
            <summary>
            Does simple resampling of <paramref name="signal"/> (as the combination of interpolation and decimation).
            </summary>
            <param name="signal">Input signal</param>
            <param name="up">Interpolation factor</param>
            <param name="down">Decimation factor</param>
            <param name="filter">Lowpass anti-aliasing filter</param>
        </member>
        <member name="M:NWaves.Operations.Operation.TimeStretch(NWaves.Signals.DiscreteSignal,System.Double,System.Int32,System.Int32,NWaves.Operations.Tsm.TsmAlgorithm)">
            <summary>
            Does time stretching of <paramref name="signal"/> with parameters set by user.
            </summary>
            <param name="signal">Signal</param>
            <param name="stretch">Stretch factor (ratio)</param>
            <param name="windowSize">Window size (for vocoders - FFT size)</param>
            <param name="hopSize">Hop length</param>
            <param name="algorithm">Algorithm for TSM</param>
        </member>
        <member name="M:NWaves.Operations.Operation.TimeStretch(NWaves.Signals.DiscreteSignal,System.Double,NWaves.Operations.Tsm.TsmAlgorithm)">
            <summary>
            Does time stretching of <paramref name="signal"/> with auto-derived parameters.
            </summary>
            <param name="signal">Signal</param>
            <param name="stretch">Stretch factor (ratio)</param>
            <param name="algorithm">Algorithm for TSM</param>
        </member>
        <member name="M:NWaves.Operations.Operation.Envelope(NWaves.Signals.DiscreteSignal,System.Single,System.Single)">
            <summary>
            Extracts the envelope of <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="attackTime">Attack time (in seconds)</param>
            <param name="releaseTime">Release time (in seconds)</param>
        </member>
        <member name="M:NWaves.Operations.Operation.FullRectify(NWaves.Signals.DiscreteSignal)">
            <summary>
            Full-rectifies <paramref name="signal"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.HalfRectify(NWaves.Signals.DiscreteSignal)">
            <summary>
            Half-rectifies <paramref name="signal"/>.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.SpectralSubtract(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal,System.Int32,System.Int32)">
            <summary>
            De-noises <paramref name="signal"/> using spectral subtraction. 
            Subtracts <paramref name="noise"/> from <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="noise">Noise signal</param>
            <param name="fftSize">FFT size</param>
            <param name="hopSize">Hop size (number of samples)</param>
        </member>
        <member name="M:NWaves.Operations.Operation.NormalizePeak(System.Single[],System.Double)">
            <summary>
            Normalizes peak level.
            </summary>
            <param name="samples">Samples</param>
            <param name="peakDb">Peak level in decibels (dbFS), e.g. -1dB, -3dB, etc.</param>
        </member>
        <member name="M:NWaves.Operations.Operation.NormalizePeak(NWaves.Signals.DiscreteSignal,System.Double)">
            <summary>
            Normalizes peak level.
            </summary>
            <param name="signal">Signal</param>
            <param name="peakDb">Peak level in decibels (dBFS), e.g. -1dB, -3dB, etc.</param>
        </member>
        <member name="M:NWaves.Operations.Operation.ChangePeak(System.Single[],System.Double)">
            <summary>
            Changes peak level relatively to input <paramref name="samples"/> (in-place).
            </summary>
            <param name="samples">Samples</param>
            <param name="peakDb">Peak change in decibels, e.g. -6dB - decrease peak level twice</param>
        </member>
        <member name="M:NWaves.Operations.Operation.ChangePeak(NWaves.Signals.DiscreteSignal,System.Double)">
            <summary>
            Changes peak level relatively to input <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="peakDb">Peak change in decibels, e.g. -6dB - decrease peak level twice</param>
        </member>
        <member name="M:NWaves.Operations.Operation.NormalizeRms(System.Single[],System.Double)">
            <summary>
            Normalizes RMS.
            </summary>
            <param name="samples">Samples</param>
            <param name="rmsDb">RMS in decibels (dBFS), e.g. -6dB, -18dB, -26dB, etc.</param>
        </member>
        <member name="M:NWaves.Operations.Operation.NormalizeRms(NWaves.Signals.DiscreteSignal,System.Double)">
            <summary>
            Normalizes RMS.
            </summary>
            <param name="signal">Signal</param>
            <param name="rmsDb">RMS in decibels (dBFS), e.g. -6dB, -18dB, -26dB, etc.</param>
        </member>
        <member name="M:NWaves.Operations.Operation.ChangeRms(System.Single[],System.Double)">
            <summary>
            Changes RMS relatively to input <paramref name="samples"/>.
            </summary>
            <param name="samples">Samples</param>
            <param name="rmsDb">RMS change in decibels, e.g. -6dB - decrease RMS twice</param>
        </member>
        <member name="M:NWaves.Operations.Operation.ChangeRms(NWaves.Signals.DiscreteSignal,System.Double)">
            <summary>
            Changes RMS relatively to input <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="rmsDb">RMS change in decibels, e.g. -6dB - decrease RMS twice</param>
        </member>
        <member name="M:NWaves.Operations.Operation.Welch(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,NWaves.Windows.WindowType,System.Int32,System.Int32)">
            <summary>
            Computes periodogram using Welch's method. 
            If <paramref name="samplingRate"/>=0 then power spectrum is evaluated, otherwise power spectral density is evaluated. 
            </summary>
            <param name="signal">Signal</param>
            <param name="windowSize">Window size (number of samples)</param>
            <param name="hopSize">Hop size (number of samples)</param>
            <param name="window">Windowing function</param>
            <param name="fftSize">FFT size</param>
            <param name="samplingRate">If sampling rate=0 then power spectrum is evaluated, otherwise power spectral density is evaluated</param>
        </member>
        <member name="M:NWaves.Operations.Operation.LombScargle(System.Single[],System.Single[],System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Computes the Lomb-Scargle periodogram.
            </summary>
            <param name="x">Sample times</param>
            <param name="y">Signal values at sample times</param>
            <param name="freqs">Angular frequencies for output periodogram</param>
            <param name="subtractMean">Subtract mean from values before periodogram evaluation</param>
            <param name="normalize">Normalize periodogram by the residuals of the data around a constant reference model(at zero)</param>
        </member>
        <member name="M:NWaves.Operations.Operation.ConvolveDirect(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Direct convolution by formula in time domain
            </summary>
        </member>
        <member name="M:NWaves.Operations.Operation.CrossCorrelateDirect(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Direct cross-correlation by formula in time domain
            </summary>
        </member>
        <member name="T:NWaves.Operations.Resampler">
            <summary>
            Represents signal resampler (sampling rate converter).
            </summary>
        </member>
        <member name="P:NWaves.Operations.Resampler.MinResamplingFilterOrder">
            <summary>
            Gets or sets the order of lowpass anti-aliasing FIR filter 
            that will be created automatically if the filter is not specified explicitly. 
            By default, 101.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Resampler.Interpolate(NWaves.Signals.DiscreteSignal,System.Int32,NWaves.Filters.Base.FirFilter)">
            <summary>
            Does interpolation of <paramref name="signal"/> followed by lowpass filtering.
            </summary>
            <param name="signal">Signal</param>
            <param name="factor">Interpolation factor (e.g. factor=2 if 8000 Hz -> 16000 Hz)</param>
            <param name="filter">Lowpass anti-aliasing filter</param>
        </member>
        <member name="M:NWaves.Operations.Resampler.Decimate(NWaves.Signals.DiscreteSignal,System.Int32,NWaves.Filters.Base.FirFilter)">
            <summary>
            Does decimation of <paramref name="signal"/> preceded by lowpass filtering.
            </summary>
            <param name="signal">Signal</param>
            <param name="factor">Decimation factor (e.g. factor=2 if 16000 Hz -> 8000 Hz)</param>
            <param name="filter">Lowpass anti-aliasing filter</param>
        </member>
        <member name="M:NWaves.Operations.Resampler.Resample(NWaves.Signals.DiscreteSignal,System.Int32,NWaves.Filters.Base.FirFilter,System.Int32)">
            <summary>
            Does band-limited resampling of <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="newSamplingRate">Desired sampling rate</param>
            <param name="filter">Lowpass anti-aliasing filter</param>
            <param name="order">Order</param>
        </member>
        <member name="M:NWaves.Operations.Resampler.ResampleUpDown(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32,NWaves.Filters.Base.FirFilter)">
            <summary>
            Does simple resampling of <paramref name="signal"/> (as the combination of interpolation and decimation).
            </summary>
            <param name="signal">Input signal</param>
            <param name="up">Interpolation factor</param>
            <param name="down">Decimation factor</param>
            <param name="filter">Lowpass anti-aliasing filter</param>
        </member>
        <member name="T:NWaves.Operations.SpectralSubtractor">
            <summary>
            Represents spectral subtraction filter.
            </summary>
        </member>
        <member name="P:NWaves.Operations.SpectralSubtractor.Beta">
            <summary>
            Gets or sets spectral floor (beta coefficient).
            </summary>
        </member>
        <member name="P:NWaves.Operations.SpectralSubtractor.AlphaMin">
            <summary>
            Gets or sets min threshold for subtraction factor (alpha).
            </summary>
        </member>
        <member name="P:NWaves.Operations.SpectralSubtractor.AlphaMax">
            <summary>
            Gets or sets max threshold for subtraction factor (alpha).
            </summary>
        </member>
        <member name="P:NWaves.Operations.SpectralSubtractor.SnrMin">
            <summary>
            Gets or sets min SNR value (in dB).
            </summary>
        </member>
        <member name="P:NWaves.Operations.SpectralSubtractor.SnrMax">
            <summary>
            Gets or sets max SNR value (in dB).
            </summary>
        </member>
        <member name="F:NWaves.Operations.SpectralSubtractor._noiseEstimate">
            <summary>
            Noise estimate.
            </summary>
        </member>
        <member name="M:NWaves.Operations.SpectralSubtractor.#ctor(System.Single[],System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.SpectralSubtractor"/>.
            </summary>
            <param name="noise">Array of noise samples</param>
            <param name="fftSize">FFT size</param>
            <param name="hopSize">Hop length (number of samples)</param>
        </member>
        <member name="M:NWaves.Operations.SpectralSubtractor.#ctor(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.SpectralSubtractor"/>.
            </summary>
            <param name="noise">Noise signal</param>
            <param name="fftSize">FFT size</param>
            <param name="hopSize">Hop length (number of samples)</param>
        </member>
        <member name="M:NWaves.Operations.SpectralSubtractor.ProcessSpectrum(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Processes one spectrum at each STFT step.
            </summary>
            <param name="re">Real parts of input spectrum</param>
            <param name="im">Imaginary parts of input spectrum</param>
            <param name="filteredRe">Real parts of output spectrum</param>
            <param name="filteredIm">Imaginary parts of output spectrum</param>
        </member>
        <member name="M:NWaves.Operations.SpectralSubtractor.EstimateNoise(System.Single[],System.Int32,System.Int32)">
            <summary>
            Estimates power spectrum of <paramref name="noise"/>.
            </summary>
            <param name="noise">Array of noise samples</param>
            <param name="startPos">Index of the first sample in array for processing</param>
            <param name="endPos">Index of the last sample in array for processing</param>
        </member>
        <member name="M:NWaves.Operations.SpectralSubtractor.EstimateNoise(NWaves.Signals.DiscreteSignal,System.Int32,System.Int32)">
            <summary>
            Estimates power spectrum of <paramref name="noise"/> signal.
            </summary>
            <param name="noise">Noise signal</param>
            <param name="startPos">Index of the first sample in signal</param>
            <param name="endPos">Index of the last sample in signal</param>
        </member>
        <member name="T:NWaves.Operations.Tsm.PaulStretch">
            <summary>
            Represents TSM processor based on Paul stretch algorithm.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PaulStretch._rand">
            <summary>
            Randomizer for phases.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.PaulStretch.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Tsm.PaulStretch"/>.
            </summary>
            <param name="stretch">Stretch ratio</param>
            <param name="hopAnalysis">Hop length at analysis stage</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Operations.Tsm.PaulStretch.ProcessSpectrum">
            <summary>
            Processes spectrum at each STFT step: simply randomizes phases.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.PaulStretch.Reset">
            <summary>
            Resets TSM processor.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Tsm.PhaseLockingVocoder">
            <summary>
            Represents Phase Vocoder with identity phase locking [Puckette].
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseLockingVocoder._mag">
            <summary>
            Array of spectrum magnitudes (at current step).
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseLockingVocoder._phase">
            <summary>
            Array of spectrum phases (at current step).
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseLockingVocoder._delta">
            <summary>
            Array of phase deltas.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseLockingVocoder._peaks">
            <summary>
            Array of peak positions (indices).
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.PhaseLockingVocoder.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Tsm.PhaseLockingVocoder"/>.
            </summary>
            <param name="stretch">Stretch ratio</param>
            <param name="hopAnalysis">Hop length at analysis stage</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Operations.Tsm.PhaseLockingVocoder.ProcessSpectrum">
            <summary>
            Processes spectrum with phase-locking at each STFT step.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Tsm.PhaseVocoder">
            <summary>
            Represents Phase Vocoder.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._hopAnalysis">
            <summary>
            Hop size at analysis stage (STFT decomposition).
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._hopSynthesis">
            <summary>
            Hop size at synthesis stage (STFT merging).
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._fftSize">
            <summary>
            Size of FFT for analysis and synthesis.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._stretch">
            <summary>
            Stretch ratio.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._window">
            <summary>
            Window coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._gain">
            <summary>
            ISTFT normalization gain
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._omega">
            <summary>
            Linearly spaced frequencies.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._re">
            <summary>
            Internal buffer for real parts of analyzed block.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._im">
            <summary>
            Internal buffer for imaginary parts of analyzed block.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._prevPhase">
            <summary>
            Array of phases computed at previous step.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.PhaseVocoder._phaseTotal">
            <summary>
            Array of new synthesized phases.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.PhaseVocoder.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Tsm.PhaseVocoder"/>.
            </summary>
            <param name="stretch">Stretch ratio</param>
            <param name="hopAnalysis">Hop length at analysis stage</param>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Operations.Tsm.PhaseVocoder.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new time-stretched signal.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.PhaseVocoder.ProcessSpectrum">
            <summary>
            Processes one spectrum at each STFT step. 
            This routine is different for different PV-based techniques.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.PhaseVocoder.Reset">
            <summary>
            Resets phase vocoder.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Tsm.TsmAlgorithm">
            <summary>
            Defines time scale modification algorithms.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.TsmAlgorithm.PhaseVocoder">
            <summary>
            Phase vocoder.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.TsmAlgorithm.PhaseVocoderPhaseLocking">
            <summary>
            Phase vocoder with phase-locking.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.TsmAlgorithm.Wsola">
            <summary>
            Waveform similarity-based Synchrnoized Overlap-Add.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.TsmAlgorithm.PaulStretch">
            <summary>
            Paul stretch.
            </summary>
        </member>
        <member name="T:NWaves.Operations.Tsm.Wsola">
            <summary>
            Represents TSM processor based on Waveform-Synchronized Overlap-Add (WSOLA) technique.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.Wsola._stretch">
            <summary>
            Stretch ratio.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.Wsola._windowSize">
            <summary>
            Window size.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.Wsola._hopAnalysis">
            <summary>
            Hop size at analysis stage (STFT decomposition).
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.Wsola._hopSynthesis">
            <summary>
            Hop size at synthesis stage (STFT merging).
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.Wsola._maxDelta">
            <summary>
            Maximum length of the fragment for search of the most similar waveform.
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.Wsola._userParameters">
            <summary>
            True if parameters were set by user (not by default).
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.Wsola._convolver">
            <summary>
            Internal convolver
            (will be used for evaluating auto-correlation if the window size is too big).
            </summary>
        </member>
        <member name="F:NWaves.Operations.Tsm.Wsola._cc">
            <summary>
            Cross-correlation signal.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.Wsola.#ctor(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Tsm.Wsola"/> TSM processor.
            </summary>
            <param name="stretch">Stretch ratio</param>
            <param name="windowSize">Window size</param>
            <param name="hopAnalysis">Hop size at analysis stage</param>
            <param name="maxDelta">Max delta in WSOLA algorithm</param>
        </member>
        <member name="M:NWaves.Operations.Tsm.Wsola.#ctor(System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Operations.Tsm.Wsola"/> TSM processor and auto-derives WSOLA parameters for given <paramref name="stretch"/> ratio.
            </summary>
            <param name="stretch">Stretch ratio</param>
        </member>
        <member name="M:NWaves.Operations.Tsm.Wsola.PrepareConvolver">
            <summary>
            Prepares the internal convolver (for large window sizes).
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.Wsola.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new time-stretched signal.
            </summary>
        </member>
        <member name="M:NWaves.Operations.Tsm.Wsola.WaveformSimilarityPos(System.Single[],System.Single[],System.Int32)">
            <summary>
            Finds position of the best waveform similarity.
            </summary>
            <param name="current">Current window</param>
            <param name="prev">Previous window</param>
            <param name="maxDelta">Max delta</param>
        </member>
        <member name="T:NWaves.Operations.WaveShaper">
            <summary>
            <para>Represents wave shaper.</para>
            <para>
            Wave shaper is a filter that maps an input signal to the output signal 
            by applying arbitrary mathematical function (shaping function) to the input signal.
            </para>
            </summary>
        </member>
        <member name="M:NWaves.Operations.WaveShaper.#ctor(System.Func{System.Single,System.Single})">
            <summary>
            Constructs <see cref="T:NWaves.Operations.WaveShaper"/> using <paramref name="waveShapingFunction"/>.
            </summary>
            <param name="waveShapingFunction">Wave shaping function</param>
        </member>
        <member name="M:NWaves.Operations.WaveShaper.Process(System.Single)">
            <summary>
            Processes one sample.
            </summary>
            <param name="sample">Input sample</param>
        </member>
        <member name="M:NWaves.Operations.WaveShaper.Reset">
            <summary>
            Resets wave shaper.
            </summary>
        </member>
        <member name="M:NWaves.Operations.WaveShaper.ApplyTo(NWaves.Signals.DiscreteSignal,NWaves.Filters.Base.FilteringMethod)">
            <summary>
            Processes entire <paramref name="signal"/> and returns new wave-shaped signal.
            </summary>
            <param name="signal">Input signal</param>
            <param name="method">Filtering method</param>
        </member>
        <member name="T:NWaves.Signals.Builders.AdsrBuilder">
            <summary>
            <para>Represents ADSR envelope builder.</para>
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"attack", "a" (default: 0.2)</item>
                <item>"decay", "d" (default: 0.2)</item>
                <item>"sustain", "s" (default: 0.2)</item>
                <item>"release", "r" (default: 0.2)</item>
                <item>"attackAmp", "amp" (default: 1.5)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.AdsrBuilder.State">
            <summary>
            Gets ADSR state (attack, decay, sustain, release).
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.AdsrBuilder._a">
            <summary>
            One-pole filter coefficients
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.AdsrBuilder._b">
            <summary>
            One-pole filter coefficients
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.AdsrBuilder.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.AdsrBuilder"/> from ADSR parameters (in the form of number of samples).
            </summary>
            <param name="attack">Number of samples for attack stage</param>
            <param name="decay">Number of samples for decay stage</param>
            <param name="sustain">Number of samples for sustain stage</param>
            <param name="release">Number of samples for release stage</param>
        </member>
        <member name="M:NWaves.Signals.Builders.AdsrBuilder.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.AdsrBuilder"/> from ADSR parameters (in the form of duration in seconds).
            </summary>
            <param name="attack">Duration of attack stage (seconds)</param>
            <param name="decay">Duration of decay stage (seconds)</param>
            <param name="sustain">Duration of sustain stage (seconds)</param>
            <param name="release">Duration of release stage (seconds)</param>
        </member>
        <member name="M:NWaves.Signals.Builders.AdsrBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.AdsrBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.AdsrBuilder.SampledAt(System.Int32)">
            <summary>
            Sets the sampling rate of the signal to build.
            </summary>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="T:NWaves.Signals.Builders.AwgnBuilder">
            <summary>
            <para>
            Represents Additive White Gaussian Noise (AWGN) builder. 
            Generates additive white gaussian noise using Box-Muller transform.
            </para>
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"mean", "mu" (default: 0.0)</item>
                <item>"sigma", "stddev" (default: 1.0)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.AwgnBuilder._mu">
            <summary>
            Mean.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.AwgnBuilder._sigma">
            <summary>
            Standard deviation.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.AwgnBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.AwgnBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.AwgnBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.AwgnBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.Base.ISampleGenerator">
            <summary>
            Interface for online signal generators (one-sample providers).
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.ISampleGenerator.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.ISampleGenerator.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.Base.ISignalBuilder">
            <summary>
            Interface for signal builders (offline signal generators).
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.Base.ISignalBuilder.Length">
            <summary>
            Gets the length of the signal to build.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.ISignalBuilder.Build">
            <summary>
            Builds new signal.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.Base.SignalBuilder">
            <summary>
            Abstract class for all NWaves-style sample generators / signal builders.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.Base.SignalBuilder._delay">
            <summary>
            Delay of the signal to build (used only in Build() method).
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.Base.SignalBuilder._repeatTimes">
            <summary>
            Number of times to repeat the signal (used only in Build() method).
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.Base.SignalBuilder._toSuperimpose">
            <summary>
            List of signals to be superimposed with the signal to build (only in Build() method).
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.Base.SignalBuilder.Signal">
            <summary>
            Resulting signal.
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.Base.SignalBuilder.ParameterSetters">
            <summary>
            Dictionary of setters for each parameter.
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.Base.SignalBuilder.SamplingRate">
            <summary>
            Gets the sampling rate of the signal.
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.Base.SignalBuilder.Length">
            <summary>
            Gets the length of the signal (number of samples).
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.Base.SignalBuilder.Duration">
            <summary>
            Gets the duration of the signal (in seconds).
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.GetParametersInfo">
            <summary>
            Gets brief descriptions (or simply names) of parameters.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)">
            <summary>
            Assigns value <paramref name="parameterValue"/> to parameter <paramref name="parameterName"/>.
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="parameterValue">Parameter value</param>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.Build">
            <summary>
            Builds new entire signal.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.OfLength(System.Int32)">
            <summary>
            Sets the number of samples of the signal to build.
            </summary>
            <param name="sampleCount">Number of samples</param>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.OfDuration(System.Double)">
            <summary>
            Sets the duration of the signal to build.
            </summary>
            <param name="seconds">Duration (in seconds)</param>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.SampledAt(System.Int32)">
            <summary>
            Sets the sampling rate of the signal to build.
            </summary>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.DelayedBy(System.Int32)">
            <summary>
            Sets the delay of the signal to build.
            </summary>
            <param name="delay">Signal delay</param>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.SuperimposedWith(NWaves.Signals.DiscreteSignal)">
            <summary>
            Adds another one signal to superimpose with the signal to build.
            </summary>
            <param name="signal">Signal for superimposing</param>
        </member>
        <member name="M:NWaves.Signals.Builders.Base.SignalBuilder.RepeatedTimes(System.Int32)">
            <summary>
            Sets the number of times to repeat the signal to build.
            </summary>
            <param name="times">Number of times for repeating</param>
        </member>
        <member name="T:NWaves.Signals.Builders.ChirpBuilder">
            <summary>
            Represents builder of chirp signals.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"start", "f0", "freq0" (default: 100.0 Hz)</item>
                <item>"end", "f1", "freq1" (default: 1000.0 Hz)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.ChirpBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.ChirpBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.ChirpBuilder._f0">
            <summary>
            Start frequency.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.ChirpBuilder._f1">
            <summary>
            End frequency.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.ChirpBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.ChirpBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.ChirpBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.ChirpBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.ChirpBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Start frequency and end frequency must be greater than zero.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.CosineBuilder">
            <summary>
            Represents builder of cosinusoidal signals.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"frequency", "freq" (default: 100.0 Hz)</item>
                <item>"phase", "phi" (default: 0.0)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.CosineBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.CosineBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.CosineBuilder._frequency">
            <summary>
            Frequency of the sinusoid (in Hz).
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.CosineBuilder._phase">
            <summary>
            Initial phase of the sinusoid (in radians).
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.CosineBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.CosineBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.CosineBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.CosineBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.CosineBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Frequency must be greater than zero.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.FadeInOutBuilder">
            <summary>
            <para>Represents fade in/out decorator of signal builders.</para>
            <para>Example:</para>
            <code>
                var sine = new SineBuilder(...); 
                <br/>
                var fadeSine = new FadeInOutBuilder(sine).In(0.05).Out(0.2);
            </code>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.FadeInOutBuilder._builder">
            <summary>
            Signal builder to decorate.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.FadeInOutBuilder._fadeInSampleCount">
            <summary>
            Number of samples in fade-in section.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.FadeInOutBuilder._fadeOutSampleCount">
            <summary>
            Number of samples in fade-out section.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.FadeInOutBuilder._fadeInIndex">
            <summary>
            Index of the sample in fade-in section.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.FadeInOutBuilder._fadeOutIndex">
            <summary>
            Index of the sample in fade-out section.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.FadeInOutBuilder._index">
            <summary>
            Index of current sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.FadeInOutBuilder.#ctor(NWaves.Signals.Builders.Base.SignalBuilder)">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.FadeInOutBuilder"/> around <paramref name="builder"/>.
            </summary>
            <param name="builder">Underlying signal builder</param>
        </member>
        <member name="M:NWaves.Signals.Builders.FadeInOutBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.FadeInOutBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.FadeInOutBuilder.In(System.Double)">
            <summary>
            Sets duration of fade-in section in seconds.
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:NWaves.Signals.Builders.FadeInOutBuilder.Out(System.Double)">
            <summary>
            Sets duration of fade-out section in seconds.
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:NWaves.Signals.Builders.FadeInOutBuilder.FadeOut">
            <summary>
            Starts fading out.
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.FadeInOutBuilder.FadeStarted">
            <summary>
            Is signal started fading.
            </summary>
        </member>
        <member name="P:NWaves.Signals.Builders.FadeInOutBuilder.FadeFinished">
            <summary>
            Is signal finished fading.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.KarplusStrongBuilder">
            <summary>
            Represents builder of signals that uses Karplus-Strong algorithm.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"frequency", "freq", "f" (default: 100.0 Hz)</item>
                <item>"stretch", "s" (default: 1.0)</item>
                <item>"feedback", "a" (default: 1.0)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.KarplusStrongBuilder._frequency">
            <summary>
            Frequency (in Hz).
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.KarplusStrongBuilder._stretchFactor">
            <summary>
            Stretch factor (0, +INF].
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.KarplusStrongBuilder._feedback">
            <summary>
            Feedback coefficient [0, 1].
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.KarplusStrongBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongBuilder.#ctor(System.Single[])">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.KarplusStrongBuilder"/> from array of <paramref name="samples"/>.
            </summary>
            <param name="samples">Array of samples</param>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongBuilder.GenerateWaveTable(System.Int32)">
            <summary>
            Generates wave table of length <paramref name="sampleCount"/>.
            </summary>
            <param name="sampleCount">Number of wave table samples</param>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongBuilder.SampledAt(System.Int32)">
            <summary>
            Sets the sampling rate of the signal to build.
            </summary>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="F:NWaves.Signals.Builders.KarplusStrongBuilder._prev">
            <summary>
            Previous sample.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.KarplusStrongBuilder._rand">
            <summary>
            Randomizer.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.KarplusStrongDrumBuilder">
            <summary>
            Represents builder of signals that uses the "Drum" variation of Karplus-Strong algorithm.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"frequency", "freq", "f" (default: 100.0 Hz)</item>
                <item>"stretch", "s" (default: 1.0)</item>
                <item>"feedback", "a" (default: 1.0)</item>
                <item>"probability", "prob" (default: 0.5)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongDrumBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.KarplusStrongDrumBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongDrumBuilder.#ctor(System.Single[])">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.KarplusStrongDrumBuilder"/> from array of <paramref name="samples"/>.
            </summary>
            <param name="samples">Array of samples</param>
        </member>
        <member name="M:NWaves.Signals.Builders.KarplusStrongDrumBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.PadSynthBuilder">
            <summary>
            Represents builder of signals that uses PadSynth algorithm.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"frequency", "freq", "f" (default: 440.0 Hz)</item>
                <item>"fftsize", "size" (default: 2048)</item>
                <item>"bandwidth", "bw" (default: 40)</item>
                <item>"bwscale", "scale" (default: 1.25)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PadSynthBuilder._frequency">
            <summary>
            Frequency of the note.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PadSynthBuilder._amplitudes">
            <summary>
            Amplitudes of harmonics.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PadSynthBuilder._bw">
            <summary>
            Bandwidth of the first harmonic.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PadSynthBuilder._bwScale">
            <summary>
            how much the bandwidth of the harmonic increase according to it's frequency
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PadSynthBuilder._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PadSynthBuilder._fftSize">
            <summary>
            FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PadSynthBuilder._re">
            <summary>
            Internal buffer for real parts of spectrum.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PadSynthBuilder._im">
            <summary>
            Internal buffer for imaginary parts of spectrum. 
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.PadSynthBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.SetFrequency(System.Single)">
            <summary>
            Sets frequency of the note.
            </summary>
            <param name="frequency">Frequency</param>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.SetFftSize(System.Int32)">
            <summary>
            Sets FFT size. Must be power of 2.
            </summary>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.SetBandwidth(System.Single)">
            <summary>
            Sets bandwidth.
            </summary>
            <param name="bw">Bandwidth</param>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.SetScale(System.Single)">
            <summary>
            Sets the bandwidth scale parameter.
            </summary>
            <param name="bwScale">Bandwidth scale</param>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.SetAmplitudes(System.Single[])">
            <summary>
            Sets amplitudes of harmonics.
            </summary>
            <param name="amplitudes">Array of amplitudes</param>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.GenerateWavetable">
            <summary>
            Generates wave table using PadSynth algorithm.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.Profile(System.Double,System.Double)">
            <summary>
            Helper method used in PadSynth algorithm.
            </summary>
            <param name="f">Frequency of the note</param>
            <param name="bw">Bandwidth</param>
        </member>
        <member name="M:NWaves.Signals.Builders.PadSynthBuilder.SampledAt(System.Int32)">
            <summary>
            Sets the sampling rate of the signal to build.
            </summary>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="T:NWaves.Signals.Builders.PerlinNoiseBuilder">
            <summary>
            Represents Perlin noise builder (1D simplex noise).
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"scale", "octave" (default: 0.02)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PerlinNoiseBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PerlinNoiseBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PerlinNoiseBuilder._scale">
            <summary>
            Scale.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PerlinNoiseBuilder._permutation">
            <summary>
            Table of permutations.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PerlinNoiseBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.PerlinNoiseBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PerlinNoiseBuilder.GenerateSample(System.Double)">
            <summary>
            1D simplex noise.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PerlinNoiseBuilder.Gradient(System.Int32,System.Double)">
            <summary>
            Gradient.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PerlinNoiseBuilder.Fade(System.Double)">
            <summary>
            Improved interpolator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PerlinNoiseBuilder.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linear interpolator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PerlinNoiseBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PerlinNoiseBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PerlinNoiseBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Upper amplitude must be greater than lower amplitude.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.PinkNoiseBuilder">
            <summary>
            Represents pink noise builder. 
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PinkNoiseBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PinkNoiseBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PinkNoiseBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.PinkNoiseBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PinkNoiseBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PinkNoiseBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PinkNoiseBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Upper amplitude must be greater than lower amplitude.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.PulseWaveBuilder">
            <summary>
            Represents builder of periodic pulse waves.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"pulse", "width" (default: 0.05 seconds)</item>
                <item>"period", "t" (default: 0.1 seconds)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PulseWaveBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PulseWaveBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PulseWaveBuilder._pulse">
            <summary>
            Pulse duration (in seconds).
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.PulseWaveBuilder._period">
            <summary>
            Period of pulse wave (in seconds).
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PulseWaveBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.PulseWaveBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PulseWaveBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PulseWaveBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.PulseWaveBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Period and pulse duration must be greater than zero. 
            Period must be greater than pulse duration.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.RampBuilder">
            <summary>
            Represents builder of straight line signals: y[n] = slope * n + intercept. 
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"slope", "k" (default: 0.0)</item>
                <item>"intercept", "b" (default: 0.0)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.RampBuilder._slope">
            <summary>
            Slope.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.RampBuilder._intercept">
            <summary>
            Intercept.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.RampBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.RampBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.RampBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.RampBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.RedNoiseBuilder">
            <summary>
            Represents red (Brownian) noise builder.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.RedNoiseBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.RedNoiseBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.RedNoiseBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.RedNoiseBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.RedNoiseBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.RedNoiseBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.RedNoiseBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Upper amplitude must be greater than lower amplitude.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.SawtoothBuilder">
            <summary>
            Represents sawtooth wave builder.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"frequency", "freq" (default: 100.0 Hz)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SawtoothBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SawtoothBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SawtoothBuilder._frequency">
            <summary>
            Frequency of the sawtooth wave.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SawtoothBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.SawtoothBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SawtoothBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SawtoothBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SawtoothBuilder.SampledAt(System.Int32)">
            <summary>
            Sets the sampling rate of the signal to build.
            </summary>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Signals.Builders.SawtoothBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Frequency must be greater than zero. 
            Upper amplitude must be greater than lower amplitude.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.SincBuilder">
            <summary>
            Represents builder of signal Sinc(x).
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"frequency", "freq" (default: 100.0 Hz)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SincBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SincBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SincBuilder._frequency">
            <summary>
            Frequency of the sinc (Hz).
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SincBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.SincBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SincBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SincBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SincBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Frequency must be greater than zero.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.SineBuilder">
            <summary>
            Represents builder of sinusoidal signals.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"frequency", "freq" (default: 100.0 Hz)</item>
                <item>"phase", "phi" (default: 0.0)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SineBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SineBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SineBuilder._frequency">
            <summary>
            Frequency of the sinusoid (in Hz).
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SineBuilder._phase">
            <summary>
            Initial phase of the sinusoid (in radians).
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SineBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.SineBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SineBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SineBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SineBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Frequency must be greater than zero.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.SquareWaveBuilder">
            <summary>
            Represents builder of square waves. 
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"frequency", "freq" (default: 100.0 Hz)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SquareWaveBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SquareWaveBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.SquareWaveBuilder._frequency">
            <summary>
            Frequency of the square wave (Hz).
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SquareWaveBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.SquareWaveBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SquareWaveBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SquareWaveBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.SquareWaveBuilder.SampledAt(System.Int32)">
            <summary>
            Sets the sampling rate of the signal to build.
            </summary>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Signals.Builders.SquareWaveBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Frequency must be greater than zero. 
            Upper amplitude must be greater than lower amplitude.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.TriangleWaveBuilder">
            <summary>
            Represents builder of triangle waves.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
                <item>"frequency", "freq" (default: 100.0 Hz)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.TriangleWaveBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.TriangleWaveBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.TriangleWaveBuilder._frequency">
            <summary>
            Frequency of the triangle wave.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.TriangleWaveBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.TriangleWaveBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.TriangleWaveBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.TriangleWaveBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.TriangleWaveBuilder.SampledAt(System.Int32)">
            <summary>
            Sets the sampling rate of the signal to build.
            </summary>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Signals.Builders.TriangleWaveBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Frequency must be greater than zero. 
            Upper amplitude must be greater than lower amplitude.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.WaveTableBuilder">
            <summary>
            Represents builder of signals that uses a wave table.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"stride", "step", "delta" (default: 1)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.WaveTableBuilder._samples">
            <summary>
            Wave table samples.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.WaveTableBuilder._stride">
            <summary>
            Stride.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.WaveTableBuilder._interpolate">
            <summary>
            Interpolate sample or take the nearest one in the wave table. 
            True if the stride is not integer.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.WaveTableBuilder.#ctor(System.Single[])">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.WaveTableBuilder"/> from <paramref name="samples"/>.
            </summary>
            <param name="samples">Wave table samples</param>
        </member>
        <member name="M:NWaves.Signals.Builders.WaveTableBuilder.NextSample">
            <summary>
            Generates new sample (take or interpolate sample from the wave table).
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.WaveTableBuilder.Reset">
            <summary>
            Resets sample generator.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.WaveTableBuilder._n">
            <summary>
            Current offset.
            </summary>
        </member>
        <member name="T:NWaves.Signals.Builders.WhiteNoiseBuilder">
            <summary>
            Represents white noise builder.
            <para>
            Parameters that can be set in method <see cref="M:NWaves.Signals.Builders.Base.SignalBuilder.SetParameter(System.String,System.Double)"/>: 
            <list type="bullet">
                <item>"low", "lo", "min" (default: -1.0)</item>
                <item>"high", "hi", "max" (default: 1.0)</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.WhiteNoiseBuilder._low">
            <summary>
            Lower amplitude level.
            </summary>
        </member>
        <member name="F:NWaves.Signals.Builders.WhiteNoiseBuilder._high">
            <summary>
            Upper amplitude level.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.WhiteNoiseBuilder.#ctor">
            <summary>
            Constructs <see cref="T:NWaves.Signals.Builders.WhiteNoiseBuilder"/>.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.WhiteNoiseBuilder.NextSample">
            <summary>
            Generates new sample.
            </summary>
        </member>
        <member name="M:NWaves.Signals.Builders.WhiteNoiseBuilder.Generate">
            <summary>
            Generates signal by generating all its samples one-by-one. 
            Upper amplitude must be greater than lower amplitude.
            </summary>
        </member>
        <member name="T:NWaves.Signals.ComplexDiscreteSignal">
            <summary>
            Base class for finite complex-valued discrete-time signals. 
            Finite complex DT signal is stored as two arrays of data (real parts and imaginary parts) sampled at certain sampling rate. 
            See also <see cref="T:NWaves.Signals.ComplexDiscreteSignalExtensions"/> for extra functionality of complex DT signals.
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.SamplingRate">
            <summary>
            Gets sampling rate (number of samples per one second).
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.Real">
            <summary>
            Gets the real parts of complex-valued samples.
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.Imag">
            <summary>
            Gets the imaginary parts of complex-valued samples.
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.Length">
            <summary>
            Gets the length of the signal.
            </summary>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.#ctor(System.Int32,System.Double[],System.Double[],System.Boolean)">
            <summary>
            The most efficient constructor for initializing complex discrete signals. 
            By default, it just wraps <see cref="T:NWaves.Signals.ComplexDiscreteSignal"/> 
            around arrays <paramref name="real"/> and <paramref name="imag"/> (without copying).
            If a new memory should be allocated for signal data, set <paramref name="allocateNew"/> to true.
            </summary>
            <param name="samplingRate">Sampling rate of the signal</param>
            <param name="real">Array of real parts of the complex-valued signal</param>
            <param name="imag">Array of imaginary parts of the complex-valued signal</param>
            <param name="allocateNew">Set to true if new memory should be allocated for data</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs complex signal from collections of <paramref name="real"/> and <paramref name="imag"/> parts.
            </summary>
            <param name="samplingRate">Sampling rate of the signal</param>
            <param name="real">Array of real parts of the complex-valued signal</param>
            <param name="imag">Array of imaginary parts of the complex-valued signal</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Constructs signal from collection of <paramref name="samples"/> sampled at <paramref name="samplingRate"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="samples">Collection of complex-valued samples</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Constructs signal of given <paramref name="length"/> filled with specified values.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="length">Number of samples</param>
            <param name="real">Value of each sample</param>
            <param name="imag">Value of each sample</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            Constructs signal from collection of integer <paramref name="samples"/> sampled at given <paramref name="samplingRate"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="samples">Collection of integer samples</param>
            <param name="normalizeFactor">Each sample will be divided by this value</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.Copy">
            <summary>
            Creates deep copy of the signal.
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.Item(System.Int32)">
            <summary>
            Sample indexer. Works only with array of real parts of samples. Use it with caution.
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.Item(System.Int32,System.Int32)">
            <summary>
            Creates the slice of the signal: 
            <code>
                var middle = signal[900, 1200];
            </code>
            </summary>
            <param name="startPos">Index of the first sample (inclusive)</param>
            <param name="endPos">Index of the last sample (exclusive)</param>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.Magnitude">
            <summary>
            Gets the magnitudes of complex-valued samples.
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.Power">
            <summary>
            Gets the power (squared magnitudes) of complex-valued samples.
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.Phase">
            <summary>
            Gets the phases of complex-valued samples.
            </summary>
        </member>
        <member name="P:NWaves.Signals.ComplexDiscreteSignal.PhaseUnwrapped">
            <summary>
            Gets the unwrapped phases of complex-valued samples.
            </summary>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.op_Addition(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Creates new signal by superimposing signals <paramref name="s1"/> and <paramref name="s2"/>. 
            If sizes are different then the smaller signal is broadcast to fit the size of the larger signal.
            </summary>
            <param name="s1">First signal</param>
            <param name="s2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.op_Addition(NWaves.Signals.ComplexDiscreteSignal,System.Double)">
            <summary>
            Creates new signal by adding <paramref name="constant"/> to signal <paramref name="s"/>.
            </summary>
            <param name="s">Signal</param>
            <param name="constant">Constant to add to each sample</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.op_Subtraction(NWaves.Signals.ComplexDiscreteSignal,System.Double)">
            <summary>
            Creates new signal by subtracting <paramref name="constant"/> from signal <paramref name="s"/>.
            </summary>
            <param name="s">Signal</param>
            <param name="constant">Constant to subtract from each sample</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignal.op_Multiply(NWaves.Signals.ComplexDiscreteSignal,System.Single)">
            <summary>
            Creates new signal by multiplying <paramref name="s"/> by <paramref name="coeff"/> (amplification/attenuation).
            </summary>
            <param name="s">Signal</param>
            <param name="coeff">Amplification/attenuation coefficient</param>
        </member>
        <member name="T:NWaves.Signals.ComplexDiscreteSignalExtensions">
            <summary>
            Provides extension methods for working with complex discrete signals.
            </summary>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Delay(NWaves.Signals.ComplexDiscreteSignal,System.Int32)">
            <summary>
            Creates the delayed copy of <paramref name="signal"/> 
            by shifting it either to the right (positive <paramref name="delay"/>, e.g. Delay(1000)) 
            or to the left (negative <paramref name="delay"/>, e.g. Delay(-1000)).
            </summary>
            <param name="signal">Signal</param>
            <param name="delay">Delay (positive or negative number of delay samples)</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Superimpose(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Superimposes signals <paramref name="signal1"/> and <paramref name="signal2"/>. 
            If sizes are different then the smaller signal is broadcast to fit the size of the larger signal.
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Concatenate(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Concatenates <paramref name="signal1"/> and <paramref name="signal2"/>.
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Repeat(NWaves.Signals.ComplexDiscreteSignal,System.Int32)">
            <summary>
            Creates the copy of <paramref name="signal"/> repeated <paramref name="n"/> times.
            </summary>
            <param name="signal">Signal</param>
            <param name="n">Number of times to repeat <paramref name="signal"/></param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Amplify(NWaves.Signals.ComplexDiscreteSignal,System.Double)">
            <summary>
            Amplifies <paramref name="signal"/> by <paramref name="coeff"/> in-place.
            </summary>
            <param name="signal">Signal</param>
            <param name="coeff">Amplification coefficient</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Attenuate(NWaves.Signals.ComplexDiscreteSignal,System.Double)">
            <summary>
            Attenuates <paramref name="signal"/> by <paramref name="coeff"/> in-place.
            </summary>
            <param name="signal">Signal</param>
            <param name="coeff">Attenuation coefficient</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.First(NWaves.Signals.ComplexDiscreteSignal,System.Int32)">
            <summary>
            Creates new signal from first <paramref name="n"/> samples of <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="n">Number of samples to copy</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Last(NWaves.Signals.ComplexDiscreteSignal,System.Int32)">
            <summary>
            Creates new signal from last <paramref name="n"/> samples of <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="n">Number of samples to copy</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.ZeroPadded(NWaves.Signals.ComplexDiscreteSignal,System.Int32)">
            <summary>
            Creates new zero-padded complex discrete signal of <paramref name="length"/> from <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="length">The length of a zero-padded signal.</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Multiply(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Performs the complex multiplication of <paramref name="signal1"/> and <paramref name="signal2"/> (with normalization by length).
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Divide(NWaves.Signals.ComplexDiscreteSignal,NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Performs the complex division of <paramref name="signal1"/> and <paramref name="signal2"/> (with normalization by length).
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.Unwrap(System.Double[],System.Double)">
            <summary>
            Unwraps phases of complex-valued samples.
            </summary>
            <param name="phase">Phases</param>
            <param name="tolerance">Jump size</param>
        </member>
        <member name="M:NWaves.Signals.ComplexDiscreteSignalExtensions.ToComplexNumbers(NWaves.Signals.ComplexDiscreteSignal)">
            <summary>
            Yields complex numbers as type <see cref="T:System.Numerics.Complex"/> from <paramref name="signal"/> samples.
            </summary>
            <param name="signal">Complex discrete signal</param>
        </member>
        <member name="T:NWaves.Signals.DiscreteSignal">
            <summary>
            Base class for finite real-valued discrete-time signals. 
            In general, any finite DT signal is simply an array of data sampled at certain sampling rate. 
            See also <see cref="T:NWaves.Signals.DiscreteSignalExtensions"/> for extra functionality of DT signals.
            </summary>
        </member>
        <member name="P:NWaves.Signals.DiscreteSignal.SamplingRate">
            <summary>
            Gets sampling rate (number of samples per one second).
            </summary>
        </member>
        <member name="P:NWaves.Signals.DiscreteSignal.Samples">
            <summary>
            Gets real-valued array of samples.
            </summary>
        </member>
        <member name="P:NWaves.Signals.DiscreteSignal.Length">
            <summary>
            Gets the length of the signal.
            </summary>
        </member>
        <member name="P:NWaves.Signals.DiscreteSignal.Duration">
            <summary>
            Gets the duration of the signal (in seconds).
            </summary>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.#ctor(System.Int32,System.Single[],System.Boolean)">
            <summary>
            The most efficient constructor for initializing discrete signals. 
            By default, it just wraps <see cref="T:NWaves.Signals.DiscreteSignal"/> around <paramref name="samples"/> (without copying).
            If a new memory should be allocated for signal data, set <paramref name="allocateNew"/> to true.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="samples">Array of samples</param>
            <param name="allocateNew">Set to true if new memory should be allocated for signal data</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Constructs signal from collection of <paramref name="samples"/> sampled at <paramref name="samplingRate"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="samples">Collection of samples</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Constructs signal of given <paramref name="length"/> filled with specified values.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="length">Number of samples</param>
            <param name="value">Value of each sample</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Single)">
            <summary>
            Constructs signal from collection of integer <paramref name="samples"/> sampled at given <paramref name="samplingRate"/>.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="samples">Collection of integer samples</param>
            <param name="normalizeFactor">Each sample will be divided by this value</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Unit(System.Int32,System.Int32)">
            <summary>
            Generates unit impulse of given <paramref name="length"/> sampled at given <paramref name="samplingRate"/>.
            </summary>
            <param name="length">Length of unit impulse</param>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Constant(System.Single,System.Int32,System.Int32)">
            <summary>
            Generates constant signal of given <paramref name="length"/> sampled at given <paramref name="samplingRate"/>.
            </summary>
            <param name="constant">Constant value</param>
            <param name="length">Length of constant signal</param>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Copy">
            <summary>
            Creates deep copy of the signal.
            </summary>
        </member>
        <member name="P:NWaves.Signals.DiscreteSignal.Item(System.Int32)">
            <summary>
            Sample indexer.
            </summary>
            <param name="index">Sample index</param>
        </member>
        <member name="P:NWaves.Signals.DiscreteSignal.Item(System.Int32,System.Int32)">
            <summary>
            Creates the slice of the signal: 
            <code>
                var middle = signal[900, 1200];
            </code>
            </summary>
            <param name="startPos">Index of the first sample (inclusive)</param>
            <param name="endPos">Index of the last sample (exclusive)</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.op_Addition(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Creates new signal by superimposing signals <paramref name="s1"/> and <paramref name="s2"/>. 
            If sizes are different then the smaller signal is broadcast to fit the size of the larger signal.
            </summary>
            <param name="s1">First signal</param>
            <param name="s2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.op_UnaryNegation(NWaves.Signals.DiscreteSignal)">
            <summary>
            Creates negated copy of signal <paramref name="s"/>.
            </summary>
            <param name="s">Signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.op_Subtraction(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Subtracts signal <paramref name="s2"/> from signal <paramref name="s1"/>. 
            If sizes are different then the smaller signal is broadcast to fit the size of the larger signal.
            </summary>
            <param name="s1">First signal</param>
            <param name="s2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.op_Addition(NWaves.Signals.DiscreteSignal,System.Single)">
            <summary>
            Creates new signal by adding <paramref name="constant"/> to signal <paramref name="s"/>.
            </summary>
            <param name="s">Signal</param>
            <param name="constant">Constant to add to each sample</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.op_Subtraction(NWaves.Signals.DiscreteSignal,System.Single)">
            <summary>
            Creates new signal by subtracting <paramref name="constant"/> from signal <paramref name="s"/>.
            </summary>
            <param name="s">Signal</param>
            <param name="constant">Constant to subtract from each sample</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.op_Multiply(NWaves.Signals.DiscreteSignal,System.Single)">
            <summary>
            Creates new signal by multiplying <paramref name="s"/> by <paramref name="coeff"/> (amplification/attenuation).
            </summary>
            <param name="s">Signal</param>
            <param name="coeff">Amplification/attenuation coefficient</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Energy(System.Int32,System.Int32)">
            <summary>
            Computes energy of a signal fragment.
            </summary>
            <param name="startPos">Index of the first sample (inclusive)</param>
            <param name="endPos">Index of the last sample (exclusive)</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Energy">
            <summary>
            Computes energy of entire signal.
            </summary>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Rms(System.Int32,System.Int32)">
            <summary>
            Computes RMS of a signal fragment.
            </summary>
            <param name="startPos">Index of the first sample (inclusive)</param>
            <param name="endPos">Index of the last sample (exclusive)</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Rms">
            <summary>
            Computes RMS of entire signal.
            </summary>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.ZeroCrossingRate(System.Int32,System.Int32)">
            <summary>
            Computes Zero-crossing rate of a signal fragment.
            </summary>
            <param name="startPos">Index of the first sample (inclusive)</param>
            <param name="endPos">Index of the last sample (exclusive)</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.ZeroCrossingRate">
            <summary>
            Computes Zero-crossing rate of entire signal.
            </summary>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Entropy(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes Shannon entropy of a signal fragment 
            (from bins distributed uniformly between the minimum and maximum values of samples).
            </summary>
            <param name="startPos">Index of the first sample (inclusive)</param>
            <param name="endPos">Index of the last sample (exclusive)</param>
            <param name="binCount">Number of bins</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignal.Entropy(System.Int32)">
            <summary>
            Computes Shannon entropy of entire signal 
            (from bins distributed uniformly between the minimum and maximum values of samples).
            </summary>
            <param name="binCount">Number of bins</param>
        </member>
        <member name="T:NWaves.Signals.DiscreteSignalExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:NWaves.Signals.DiscreteSignal"/> objects.
            </summary>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Delay(NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            Creates the delayed copy of <paramref name="signal"/> 
            by shifting it either to the right (positive <paramref name="delay"/>, e.g. Delay(1000)) 
            or to the left (negative <paramref name="delay"/>, e.g. Delay(-1000)).
            </summary>
            <param name="signal">Signal</param>
            <param name="delay">Delay (positive or negative number of delay samples)</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Superimpose(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Superimposes signals <paramref name="signal1"/> and <paramref name="signal2"/>. 
            If sizes are different then the smaller signal is broadcast to fit the size of the larger signal.
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.SuperimposeMany(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal,System.Int32[])">
            <summary>
            Superimposes <paramref name="signal2"/> and <paramref name="signal1"/> multiple times at given <paramref name="positions"/>.
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
            <param name="positions">Positions (indices) where to insert <paramref name="signal2"/></param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Subtract(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Subtracts <paramref name="signal2"/> from <paramref name="signal1"/>. 
            If sizes are different then the smaller signal is broadcast to fit the size of the larger signal.
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Concatenate(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal)">
            <summary>
            Concatenates <paramref name="signal1"/> and <paramref name="signal2"/>.
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Repeat(NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            Creates the copy of <paramref name="signal"/> repeated <paramref name="n"/> times.
            </summary>
            <param name="signal">Signal</param>
            <param name="n">Number of times to repeat <paramref name="signal"/></param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Amplify(NWaves.Signals.DiscreteSignal,System.Single)">
            <summary>
            Amplifies <paramref name="signal"/> by <paramref name="coeff"/> in-place.
            </summary>
            <param name="signal">Signal</param>
            <param name="coeff">Amplification coefficient</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Attenuate(NWaves.Signals.DiscreteSignal,System.Single)">
            <summary>
            Attenuates <paramref name="signal"/> by <paramref name="coeff"/> in-place.
            </summary>
            <param name="signal">Signal</param>
            <param name="coeff">Attenuation coefficient</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Reverse(NWaves.Signals.DiscreteSignal)">
            <summary>
            Reverses <paramref name="signal"/> in-place.
            </summary>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.First(NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            Creates new signal from first <paramref name="n"/> samples of <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="n">Number of samples to copy</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Last(NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            Creates new signal from last <paramref name="n"/> samples of <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="n">Number of samples to copy</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.FullRectify(NWaves.Signals.DiscreteSignal)">
            <summary>
            Full-rectifies <paramref name="signal"/> in-place.
            </summary>
            <param name="signal">Signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.HalfRectify(NWaves.Signals.DiscreteSignal)">
            <summary>
            Half-rectifies <paramref name="signal"/> in-place.
            </summary>
            <param name="signal">Signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.NormalizeMax(NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            Normalizes <paramref name="signal"/> by its max absolute value (to range [-1, 1]).
            </summary>
            <param name="signal">Signal</param>
            <param name="bitsPerSample">Bit depth</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.ToComplex(NWaves.Signals.DiscreteSignal)">
            <summary>
            Creates <see cref="T:NWaves.Signals.ComplexDiscreteSignal"/> from <see cref="T:NWaves.Signals.DiscreteSignal"/>. 
            Imaginary parts will be filled with zeros.
            </summary>
            <param name="signal">Real-valued signal</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.FadeInFadeOut(NWaves.Signals.DiscreteSignal,System.Double,System.Double)">
            <summary>
            Fades signal in and out linearly (in-place).
            </summary>
            <param name="signal">Signal</param>
            <param name="fadeInDuration">Fade-in duration</param>
            <param name="fadeOutDuration">Fade-out duration</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.FadeIn(NWaves.Signals.DiscreteSignal,System.Double)">
            <summary>
            Fades signal in linearly (in-place).
            </summary>
            <param name="signal">Signal</param>
            <param name="duration">Fade-in duration (in seconds)</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.FadeOut(NWaves.Signals.DiscreteSignal,System.Double)">
            <summary>
            Fades signal out linearly (in-place).
            </summary>
            <param name="signal">Signal</param>
            <param name="duration">Fade-out duration (in seconds)</param>
        </member>
        <member name="M:NWaves.Signals.DiscreteSignalExtensions.Crossfade(NWaves.Signals.DiscreteSignal,NWaves.Signals.DiscreteSignal,System.Double)">
            <summary>
            <para>
            Crossfades linearly between signals and returns crossfaded signal of length 
            equal to sum of signal lengths minus length of crossfade section.
            </para>
            <para>
            The length of crossfade section will be calculated 
            based on the sampling rate of the first signal.
            </para>
            </summary>
            <param name="signal1">First signal</param>
            <param name="signal2">Second signal</param>
            <param name="duration">Crossfade duration (in seconds)</param>
        </member>
        <member name="T:NWaves.Transforms.Base.IComplexTransform">
            <summary>
            Interface for complex-valued transforms.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Base.IComplexTransform.Size">
            <summary>
            Gets transform size.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Base.IComplexTransform.Direct(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does direct transform.
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Base.IComplexTransform.DirectNorm(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does normalized direct transform.
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Base.IComplexTransform.Inverse(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does inverse transform.
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Base.IComplexTransform.InverseNorm(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does normalized inverse transform.
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="T:NWaves.Transforms.Base.ITransform">
            <summary>
            Interface for real-valued transforms.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Base.ITransform.Size">
            <summary>
            Gets transform size.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Base.ITransform.Direct(System.Single[],System.Single[])">
            <summary>
            Does direct transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Base.ITransform.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized direct transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Base.ITransform.Inverse(System.Single[],System.Single[])">
            <summary>
            Does inverse transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Base.ITransform.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized inverse transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.CepstralTransform">
            <summary>
            <para>Represents Cepstral Transform (CT):</para>
            <list type="number">
                <item>Direct Complex CT (complex cepstrum)</item>
                <item>Inverse Complex CT</item>
                <item>Real cepstrum</item>
                <item>Power cepstrum</item>
                <item>Phase cepstrum</item>
            </list>
            <para>1,2) and 3) are identical to MATLAB functions cceps, icceps and rceps, respectively.</para>
            <para><see cref="T:NWaves.Transforms.CepstralTransform"/> operates on real-valued data.</para>
            </summary>
        </member>
        <member name="P:NWaves.Transforms.CepstralTransform.Size">
            <summary>
            Gets cepstrum size.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.CepstralTransform._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.CepstralTransform._logBase">
            <summary>
            Logarithm base (E or 10).
            </summary>
        </member>
        <member name="F:NWaves.Transforms.CepstralTransform._re">
            <summary>
            Internal array for real parts of spectrum.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.CepstralTransform._im">
            <summary>
            Internal array for imaginary parts of spectrum.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.CepstralTransform._unwrapped">
            <summary>
            Internal array for storing the unwrapped phase.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Constructs cepstral transformer. 
            If <paramref name="cepstrumSize"/> exceeds <paramref name="fftSize"/>, 
            FFT size will be recalculated as the nearest power of 2 to cepstrum size.
            </summary>
            <param name="cepstrumSize">Cepstrum size</param>
            <param name="fftSize">FFT size</param>
            <param name="logBase">Logarithm base</param>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.ComplexCepstrum(System.Single[],System.Single[],System.Boolean)">
            <summary>
            Evaluates complex cepstrum as:
            <code>
               Real{IFFT(log(abs(FFT(x)) + unwrapped_phase))}
            </code>
            </summary>
            <param name="input">Input data</param>
            <param name="cepstrum">Complex cepstrum</param>
            <param name="normalize">Normalize cepstrum by FFT size</param>
            <returns>Circular delay (number of samples) added to <paramref name="input"/></returns>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.InverseComplexCepstrum(System.Single[],System.Single[],System.Boolean,System.Double)">
            <summary>
            Evaluates inverse complex cepstrum of <paramref name="input"/> (removing <paramref name="delay"/> samples).
            </summary>
            <param name="input">Input data</param>
            <param name="cepstrum">Inverse complex cepstrum</param>
            <param name="normalize">Normalize result by FFT size</param>
            <param name="delay">Delay (usually, returned by function <see cref="M:NWaves.Transforms.CepstralTransform.ComplexCepstrum(System.Single[],System.Single[],System.Boolean)"/>)</param>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.RealCepstrum(System.Single[],System.Single[],System.Boolean)">
            <summary>
            Evaluates real cepstrum as:
            <code>
               real{IFFT(log(abs(FFT(x))))}
            </code>
            </summary>
            <param name="input">Input data</param>
            <param name="cepstrum">Real cesptrum</param>
            <param name="normalize">Normalize cepstrum by FFT size</param>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.PowerCepstrum(System.Single[],System.Single[],System.Boolean)">
            <summary>
            Evaluates power cepstrum as: 
            <code>
               power_cepstrum = 4 * real_cepstrum ^ 2
            </code>
            </summary>
            <param name="input"></param>
            <param name="cepstrum"></param>
            <param name="normalize"></param>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.PhaseCepstrum(System.Single[],System.Single[],System.Boolean)">
            <summary>
            Evaluates phase cepstrum as: 
            <code>
                phase_cepstrum = (complex_cepstrum - reversed_complex_cepstrum) ^ 2
            </code>
            </summary>
            <param name="input">Input data</param>
            <param name="cepstrum">Phase cepstrum</param>
            <param name="normalize">Normalize cepstrum by FFT size</param>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.Direct(System.Single[],System.Single[])">
            <summary>
            Does cepstral transform. 
            It simply calls <see cref="M:NWaves.Transforms.CepstralTransform.ComplexCepstrum(System.Single[],System.Single[],System.Boolean)"/> ignoring the delay parameter.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized cepstral transform. 
            It simply calls <see cref="M:NWaves.Transforms.CepstralTransform.ComplexCepstrum(System.Single[],System.Single[],System.Boolean)"/> ignoring the delay parameter.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.Inverse(System.Single[],System.Single[])">
            <summary>
            Does inverse cepstral transform. 
            It simply calls <see cref="M:NWaves.Transforms.CepstralTransform.InverseComplexCepstrum(System.Single[],System.Single[],System.Boolean,System.Double)"/> ignoring the delay parameter.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.CepstralTransform.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized inverse cepstral transform. 
            It simply calls <see cref="M:NWaves.Transforms.CepstralTransform.InverseComplexCepstrum(System.Single[],System.Single[],System.Boolean,System.Double)"/> ignoring the delay parameter.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.Dct1">
            <summary>
            Represents Discrete Cosine Transform of Type-I.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Dct1._dctMtx">
            <summary>
            DCT-I precalculated cosine matrix. 
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Dct1.Size">
            <summary>
            Gets size of DCT-I.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Dct1.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.Dct1"/> of given <paramref name="dctSize"/> and precalculates DCT matrices.
            </summary>
            <param name="dctSize">Size of DCT-I</param>
        </member>
        <member name="M:NWaves.Transforms.Dct1.Direct(System.Single[],System.Single[])">
            <summary>
            Does DCT-I.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct1.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized DCT-I.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct1.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse DCT-I.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct1.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse DCT-I.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.Dct2">
            <summary>
            Represents Discrete Cosine Transform of Type-II.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Dct2._dctMtx">
            <summary>
            DCT-II precalculated cosine matrix. 
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Dct2._dctMtxInv">
            <summary>
            IDCT-II precalculated cosine matrix.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Dct2.Size">
            <summary>
            Gets size of DCT-II.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Dct2.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.Dct2"/> of given <paramref name="dctSize"/> and precalculates DCT matrices.
            </summary>
            <param name="dctSize">Size of DCT-II</param>
        </member>
        <member name="M:NWaves.Transforms.Dct2.Direct(System.Single[],System.Single[])">
            <summary>
            Does DCT-II.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct2.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized DCT-II.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct2.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse DCT-II.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct2.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse DCT-II.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.Dct3">
            <summary>
            Represents Discrete Cosine Transform of Type-III.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Dct3._dctMtx">
            <summary>
            DCT-III precalculated cosine matrix.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Dct3._dctMtxInv">
            <summary>
            IDCT-III precalculated cosine matrix.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Dct3.Size">
            <summary>
            Gets size of DCT-III.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Dct3.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.Dct3"/> of given <paramref name="dctSize"/> and precalculates DCT matrices.
            </summary>
            <param name="dctSize">Size of DCT-III</param>
        </member>
        <member name="M:NWaves.Transforms.Dct3.Direct(System.Single[],System.Single[])">
            <summary>
            Does DCT-III.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct3.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized DCT-III.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct3.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse DCT-III.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct3.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse DCT-III.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.Dct4">
            <summary>
            Represents Discrete Cosine Transform of Type-IV.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Dct4._dctMtx">
            <summary>
            DCT-IV precalculated cosine matrix.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Dct4.Size">
            <summary>
            Gets size of DCT-IV.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Dct4.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.Dct4"/> of given <paramref name="dctSize"/> and precalculates DCT matrices.
            </summary>
            <param name="dctSize">Size of DCT-IV</param>
        </member>
        <member name="M:NWaves.Transforms.Dct4.Direct(System.Single[],System.Single[])">
            <summary>
            Does DCT-IV.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct4.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized DCT-IV.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct4.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse DCT-IV.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Dct4.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse DCT-IV.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.FastDct2">
            <summary>
            Represents Discrete Cosine Transform of Type-II. 
            This FFT-based implementation of DCT-II is faster for bigger DCT sizes.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.FastDct2._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.FastDct2._temp">
            <summary>
            Internal temporary buffer.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.FastDct2.Size">
            <summary>
            Gets size of DCT-II.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.FastDct2.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.FastDct2"/> of given <paramref name="dctSize"/>.
            </summary>
            <param name="dctSize">Size of DCT-II</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct2.Direct(System.Single[],System.Single[])">
            <summary>
            Does DCT-II.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct2.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized DCT-II.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct2.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse DCT-II.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct2.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse DCT-II.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.FastDct3">
            <summary>
            Represents Discrete Cosine Transform of Type-III. 
            This FFT-based implementation of DCT-III is faster for bigger DCT sizes.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.FastDct3._dct2">
            <summary>
            Internal fast DCT-II transformer.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.FastDct3.Size">
            <summary>
            Gets size of DCT-III.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.FastDct3.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.FastDct3"/> of given <paramref name="dctSize"/>.
            </summary>
            <param name="dctSize">Size of DCT-III</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct3.Direct(System.Single[],System.Single[])">
            <summary>
            Does DCT-III.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct3.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized DCT-III.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct3.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse DCT-III.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct3.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse DCT-III.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.FastDct4">
            <summary>
            Represents Discrete Cosine Transform of Type-IV. 
            This FFT-based implementation of DCT-IV is faster for bigger DCT sizes.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.FastDct4._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.FastDct4.Size">
            <summary>
            Gets size of DCT-IV.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.FastDct4.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.FastDct4"/> of given <paramref name="dctSize"/>.
            </summary>
            <param name="dctSize">Size of DCT-IV</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct4.Direct(System.Single[],System.Single[])">
            <summary>
            Does DCT-IV.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct4.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized DCT-IV.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct4.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse DCT-IV.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.FastDct4.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse DCT-IV.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.FastMdct">
            <summary>
            Represents Modified Discrete Cosine Transform (MDCT). 
            This FFT-based implementation of MDCT is faster for bigger DCT sizes.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.FastMdct.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.FastMdct"/> of given <paramref name="dctSize"/>.
            </summary>
            <param name="dctSize">Size of MDCT</param>
        </member>
        <member name="T:NWaves.Transforms.IDct">
            <summary>
            Separate interface for DCT transforms.
            </summary>
        </member>
        <member name="T:NWaves.Transforms.Mdct">
            <summary>
            Represents Modified Discrete Cosine Transform (MDCT).
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Mdct._dct">
            <summary>
            Internal DCT-IV transformer.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Mdct._temp">
            <summary>
            Internal temporary buffer.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Mdct.Size">
            <summary>
            Gets size of MDCT.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Mdct.#ctor(System.Int32,NWaves.Transforms.IDct)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.Mdct"/> of given <paramref name="dctSize"/>.
            </summary>
            <param name="dctSize">Size of MDCT</param>
            <param name="dct">Internal DCT transformer (by default, <see cref="T:NWaves.Transforms.Dct4"/>)</param>
        </member>
        <member name="M:NWaves.Transforms.Mdct.Direct(System.Single[],System.Single[])">
            <summary>
            Does MDCT. 
            Length of <paramref name="input"/> must be equal to 2*<see cref="P:NWaves.Transforms.Mdct.Size"/>. 
            Length of <paramref name="output"/> must be equal to <see cref="P:NWaves.Transforms.Mdct.Size"/>. 
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Mdct.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized MDCT.
            Length of <paramref name="input"/> must be equal to 2*<see cref="P:NWaves.Transforms.Mdct.Size"/>. 
            Length of <paramref name="output"/> must be equal to <see cref="P:NWaves.Transforms.Mdct.Size"/>. 
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Mdct.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse MDCT.
            Length of <paramref name="input"/> must be equal to <see cref="P:NWaves.Transforms.Mdct.Size"/>. 
            Length of <paramref name="output"/> must be equal to 2*<see cref="P:NWaves.Transforms.Mdct.Size"/>. 
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Mdct.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse MDCT.
            Length of <paramref name="input"/> must be equal to <see cref="P:NWaves.Transforms.Mdct.Size"/>. 
            Length of <paramref name="output"/> must be equal to 2*<see cref="P:NWaves.Transforms.Mdct.Size"/>. 
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.Fft">
            <summary>
            <para>Represents Complex Fast Fourier Transform:</para>
            <list type="bullet">
                <item>Direct FFT</item>
                <item>Inverse FFT</item>
                <item>Magnitude spectrum</item>
                <item>Power spectrum</item>
            </list>
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Fft.Size">
            <summary>
            Gets FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Fft._cosTbl">
            <summary>
            Precomputed cosines.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Fft._sinTbl">
            <summary>
            Precomputed sines.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Fft._realSpectrum">
            <summary>
            Intermediate buffer storing real parts of spectrum.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Fft._imagSpectrum">
            <summary>
            Intermediate buffer storing imaginary parts of spectrum.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Fft.#ctor(System.Int32)">
            <summary>
            Constructs FFT transformer with given <paramref name="fftSize"/>. FFT size must be a power of two.
            </summary>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.Direct(System.Single[],System.Single[])">
            <summary>
            Does Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.Direct(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.DirectNorm(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does normalized Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.Inverse(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.InverseNorm(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.MagnitudeSpectrum(System.Single[],System.Single[],System.Boolean)">
            <summary>
            <para>Computes magnitude spectrum from <paramref name="samples"/>:</para>
            <code>
                spectrum = sqrt(re * re + im * im)
            </code>
            <para>Method fills array <paramref name="spectrum"/>. It must have size at least fftSize/2+1.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="spectrum">Magnitude spectrum</param>
            <param name="normalize">Normalize by FFT size or not</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.PowerSpectrum(System.Single[],System.Single[],System.Boolean)">
            <summary>
            <para>Computes power spectrum from <paramref name="samples"/>:</para>
            <code>
                spectrum = (re * re + im * im)
            </code>
            <para>Method fills array <paramref name="spectrum"/>. It must have size at least fftSize/2+1.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="spectrum">Magnitude spectrum</param>
            <param name="normalize">Normalize by FFT size or not</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.MagnitudeSpectrum(NWaves.Signals.DiscreteSignal,System.Boolean)">
            <summary>
            <para>Computes and returns magnitude spectrum from <paramref name="signal"/>:</para>
            <code>
                spectrum = sqrt(re * re + im * im)
            </code>
            </summary>
            <param name="signal">Signal</param>
            <param name="normalize">Normalize by FFT size or not</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.PowerSpectrum(NWaves.Signals.DiscreteSignal,System.Boolean)">
            <summary>
            <para>Computes and returns power spectrum from <paramref name="signal"/>:</para>
            <code>
                spectrum = (re * re + im * im)
            </code>
            </summary>
            <param name="signal">Signal</param>
            <param name="normalize">Normalize by FFT size or not</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.Shift(System.Single[])">
            <summary>
            FFT shift in-place. Throws <see cref="T:System.ArgumentException"/> if array of <paramref name="samples"/> has odd length.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Fft.Direct(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Does Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.Inverse(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Does Inverse Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.InverseNorm(System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Does normalized Inverse Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.Direct(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Does Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Array of real parts (input)</param>
            <param name="inIm">Array of imaginary parts (input)</param>
            <param name="outRe">Array of real parts (output)</param>
            <param name="outIm">Array of imaginary parts (output)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.Inverse(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Array of real parts (input)</param>
            <param name="inIm">Array of imaginary parts (input)</param>
            <param name="outRe">Array of real parts (output)</param>
            <param name="outIm">Array of imaginary parts (output)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft.InverseNorm(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Array of real parts (input)</param>
            <param name="inIm">Array of imaginary parts (input)</param>
            <param name="outRe">Array of real parts (output)</param>
            <param name="outIm">Array of imaginary parts (output)</param>
        </member>
        <member name="T:NWaves.Transforms.Fft64">
            <summary>
            <para>Represents Complex Fast Fourier Transform for 64-bit data:</para>
            <list type="bullet">
                <item>Direct FFT</item>
                <item>Inverse FFT</item>
                <item>Magnitude spectrum</item>
                <item>Power spectrum</item>
            </list>
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Fft64.Size">
            <summary>
            Gets FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Fft64._cosTbl">
            <summary>
            Precomputed cosines.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Fft64._sinTbl">
            <summary>
            Precomputed sines.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Fft64.#ctor(System.Int32)">
            <summary>
            Constructs FFT transformer with given <paramref name="fftSize"/>. FFT size must be a power of two.
            </summary>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.Direct(System.Double[],System.Double[])">
            <summary>
            Does Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.Inverse(System.Double[],System.Double[])">
            <summary>
            Does Inverse Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.InverseNorm(System.Double[],System.Double[])">
            <summary>
            Does normalized Inverse Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.Direct(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Does Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.DirectNorm(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Does normalized Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.Inverse(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.InverseNorm(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.Direct(System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Does Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.Inverse(System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Does Inverse Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.InverseNorm(System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Does normalized Inverse Fast Fourier Transform in-place.
            </summary>
            <param name="re">Array of real parts</param>
            <param name="im">Array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.Direct(System.ReadOnlySpan{System.Double},System.ReadOnlySpan{System.Double},System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Does Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Array of real parts (input)</param>
            <param name="inIm">Array of imaginary parts (input)</param>
            <param name="outRe">Array of real parts (output)</param>
            <param name="outIm">Array of imaginary parts (output)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.Inverse(System.ReadOnlySpan{System.Double},System.ReadOnlySpan{System.Double},System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Array of real parts (input)</param>
            <param name="inIm">Array of imaginary parts (input)</param>
            <param name="outRe">Array of real parts (output)</param>
            <param name="outIm">Array of imaginary parts (output)</param>
        </member>
        <member name="M:NWaves.Transforms.Fft64.InverseNorm(System.ReadOnlySpan{System.Double},System.ReadOnlySpan{System.Double},System.Span{System.Double},System.Span{System.Double})">
            <summary>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </summary>
            <param name="inRe">Array of real parts (input)</param>
            <param name="inIm">Array of imaginary parts (input)</param>
            <param name="outRe">Array of real parts (output)</param>
            <param name="outIm">Array of imaginary parts (output)</param>
        </member>
        <member name="T:NWaves.Transforms.Goertzel">
            <summary>
            Provides implementation of Goertzel algorithm.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Goertzel._fftSize">
            <summary>
            FFT size.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Goertzel.#ctor(System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Transforms.Goertzel"/>.
            </summary>
            <param name="fftSize">FFT size</param>
        </member>
        <member name="M:NWaves.Transforms.Goertzel.Direct(System.Single[],System.Int32)">
            <summary>
            Computes <paramref name="n"/>-th component of a spectrum using Goertzel algorithm.
            </summary>
            <param name="input">Input array of samples</param>
            <param name="n">Number of the frequency component</param>
        </member>
        <member name="M:NWaves.Transforms.Goertzel.Direct(NWaves.Signals.DiscreteSignal,System.Int32)">
            <summary>
            Computes <paramref name="n"/>-th component of a spectrum using Goertzel algorithm.
            </summary>
            <param name="input">Input signal</param>
            <param name="n">Number of the frequency component</param>
        </member>
        <member name="T:NWaves.Transforms.HartleyTransform">
            <summary>
            Represents Fast Hartley Transform.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.HartleyTransform.Size">
            <summary>
            Gets size of Hartley transform.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.HartleyTransform._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.HartleyTransform._im">
            <summary>
            Internal array for imaginary parts.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.HartleyTransform.#ctor(System.Int32)">
            <summary>
            Constructs Hartley transformer. Transform <paramref name="size"/> must be a power of 2.
            </summary>
            <param name="size">Size of Hartley transform</param>
        </member>
        <member name="M:NWaves.Transforms.HartleyTransform.Direct(System.Single[])">
            <summary>
            Does Fast Hartley Transform in-place.
            </summary>
            <param name="re">Input/output data</param>
        </member>
        <member name="M:NWaves.Transforms.HartleyTransform.Inverse(System.Single[])">
            <summary>
            Does inverse Hartley transform in-place.
            </summary>
            <param name="re">Input/output data</param>
        </member>
        <member name="M:NWaves.Transforms.HartleyTransform.InverseNorm(System.Single[])">
            <summary>
            Does normalized Inverse Fast Hartley transform in-place.
            </summary>
            <param name="re">Input/output data</param>
        </member>
        <member name="M:NWaves.Transforms.HartleyTransform.Direct(System.Single[],System.Single[])">
            <summary>
            Does Fast Hartley Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HartleyTransform.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Fast Hartley Transform. 
            Identical to <see cref="M:NWaves.Transforms.HartleyTransform.Direct(System.Single[],System.Single[])"/>.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HartleyTransform.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse Fast Hartley Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HartleyTransform.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse Fast Hartley Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.HilbertTransform">
            <summary>
            Represents Fast Hilbert Transform.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.HilbertTransform.Size">
            <summary>
            Gets size of Hilbert transform.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.HilbertTransform._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.HilbertTransform._re">
            <summary>
            Intermediate buffer for real parts.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.HilbertTransform._im">
            <summary>
            Intermediate buffer for imaginary parts.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform.#ctor(System.Int32)">
            <summary>
            Constructs Hilbert transformer. Transform <paramref name="size"/> must be a power of 2.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform.AnalyticSignal(System.Single[])">
            <summary>
            Computes complex analytic signal (real and imaginary parts) from <paramref name="input"/>.
            </summary>
            <param name="input">Input data</param>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform.Direct(System.Single[],System.Single[])">
            <summary>
            Does Fast Hilbert Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Fast Hilbert Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform.Inverse(System.Single[],System.Single[])">
            <summary>
            Does Inverse Fast Hilbert Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Inverse Fast Hilbert Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.HilbertTransform64">
            <summary>
            Represents Fast Hilbert Transform (for 64-bit data).
            </summary>
        </member>
        <member name="P:NWaves.Transforms.HilbertTransform64.Size">
            <summary>
            Gets size of Hilbert transform.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.HilbertTransform64._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.HilbertTransform64._re">
            <summary>
            Intermediate buffer for real parts.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.HilbertTransform64._im">
            <summary>
            Intermediate buffer for imaginary parts.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform64.#ctor(System.Int32)">
            <summary>
            Constructs Hilbert transformer. Transform <paramref name="size"/> must be a power of 2.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform64.AnalyticSignal(System.Double[])">
            <summary>
            Computes complex analytic signal (real and imaginary parts) from <paramref name="input"/>.
            </summary>
            <param name="input">Input data</param>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform64.Direct(System.Double[],System.Double[])">
            <summary>
            Does Fast Hilbert Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform64.DirectNorm(System.Double[],System.Double[])">
            <summary>
            Does normalized Fast Hilbert Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform64.Inverse(System.Double[],System.Double[])">
            <summary>
            Does Inverse Fast Hilbert Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.HilbertTransform64.InverseNorm(System.Double[],System.Double[])">
            <summary>
            Does normalized Inverse Fast Hilbert Transform.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="T:NWaves.Transforms.MellinTransform">
            <summary>
            Represents Fast Mellin Transform.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.MellinTransform.InputSize">
            <summary>
            Gets the size of input data for Mellin transform.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.MellinTransform.Size">
            <summary>
            Gets the size of Mellin transform.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.MellinTransform._beta">
            <summary>
            Beta coefficient (0.5 by default, which corresponds to Scale transform).
            </summary>
        </member>
        <member name="F:NWaves.Transforms.MellinTransform._linScale">
            <summary>
            Time points on linear scale.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.MellinTransform._expScale">
            <summary>
            Time points on exponential scale.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.MellinTransform._fft">
            <summary>
            FFT transformer.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.MellinTransform.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Constructs Mellin transformer. 
            Parameter <paramref name="size"/> must be a power of 2.
            </summary>
            <param name="inputSize">Expected size of input data</param>
            <param name="size">Size of output data</param>
            <param name="beta">Beta coefficient (0.5 by default, which corresponds to Scale transform)</param>
        </member>
        <member name="M:NWaves.Transforms.MellinTransform.Direct(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does Fast Mellin Transform.
            </summary>
            <param name="input">Input array of samples</param>
            <param name="outRe">Output array of real parts</param>
            <param name="outIm">Output array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.MellinTransform.DirectNorm(System.Single[],System.Single[],System.Single[])">
            <summary>
            Does normalized Fast Mellin Transform.
            </summary>
            <param name="input">Input array of samples</param>
            <param name="outRe">Output array of real parts</param>
            <param name="outIm">Output array of imaginary parts</param>
        </member>
        <member name="M:NWaves.Transforms.MellinTransform.Direct(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does Fast Mellin Transform.
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.MellinTransform.DirectNorm(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does normalized Fast Mellin Transform.
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.MellinTransform.Inverse(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Inverse Fast Mellin Transform is not implemented.
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.MellinTransform.InverseNorm(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Inverse normalized Fast Mellin Transform is not implemented.
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="T:NWaves.Transforms.RealFft">
            <summary>
            <para>Represents Complex Fast Fourier Transform (for real-valued input):</para>
            <list type="bullet">
                <item>Direct FFT for real-valued input</item>
                <item>Inverse FFT with real-valued output</item>
                <item>Magnitude spectrum</item>
                <item>Power spectrum</item>
            </list>
            </summary>
        </member>
        <member name="P:NWaves.Transforms.RealFft.Size">
            <summary>
            Gets FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft._fftSize">
            <summary>
            Half of FFT size (for calculations).
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft._cosTbl">
            <summary>
            Precomputed cosines.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft._sinTbl">
            <summary>
            Precomputed sines.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft._ar">
            <summary>
            Precomputed coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft._br">
            <summary>
            Precomputed coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft._ai">
            <summary>
            Precomputed coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft._bi">
            <summary>
            Precomputed coefficients.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.RealFft.#ctor(System.Int32)">
            <summary>
            Constructs FFT transformer with given <paramref name="size"/>. FFT size must be a power of two.
            </summary>
            <param name="size">FFT size</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.Direct(System.Single[],System.Single[],System.Single[])">
            <summary>
            <para>
            Does Fast Fourier Transform: 
            real <paramref name="input"/> -> complex (<paramref name="re"/>, <paramref name="im"/>).
            </para>
            </summary>
            <param name="input">Input data (real)</param>
            <param name="re">Output data (real parts)</param>
            <param name="im">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.Inverse(System.Single[],System.Single[],System.Single[])">
            <summary>
            <para>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="re"/>, <paramref name="im"/>) -> real <paramref name="output"/>.
            </para>
            </summary>
            <param name="re">Input data (real parts)</param>
            <param name="im">Input data (imaginary parts)</param>
            <param name="output">Output data (real)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.InverseNorm(System.Single[],System.Single[],System.Single[])">
            <summary>
            <para>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="re"/>, <paramref name="im"/>) -> real <paramref name="output"/>.
            </para>
            </summary>
            <param name="re">Input data (real parts)</param>
            <param name="im">Input data (imaginary parts)</param>
            <param name="output">Output data (real)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.Direct(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            <para>
            Does Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </para>
            <para><paramref name="inIm"/> is ignored.</para>
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.DirectNorm(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            <para>
            Does normalized Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </para>
            <para><paramref name="inIm"/> is ignored.</para>
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.Inverse(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            <para>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </para>
            <para><paramref name="outIm"/> is ignored.</para>
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.InverseNorm(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            <para>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </para>
            <para><paramref name="outIm"/> is ignored.</para>
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.MagnitudeSpectrum(System.Single[],System.Single[],System.Boolean)">
            <summary>
            <para>Computes magnitude spectrum from <paramref name="samples"/>:</para>
            <code>
                spectrum = sqrt(re * re + im * im)
            </code>
            <para>Method fills array <paramref name="spectrum"/>. It must have size at least fftSize/2+1.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="spectrum">Magnitude spectrum</param>
            <param name="normalize">Normalize by FFT size or not</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.PowerSpectrum(System.Single[],System.Single[],System.Boolean)">
            <summary>
            <para>Computes power spectrum from <paramref name="samples"/>:</para>
            <code>
                spectrum = sqrt(re * re + im * im)
            </code>
            <para>Method fills array <paramref name="spectrum"/>. It must have size at least fftSize/2+1.</para>
            </summary>
            <param name="samples">Array of samples</param>
            <param name="spectrum">Magnitude spectrum</param>
            <param name="normalize">Normalize by FFT size or not</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.MagnitudeSpectrum(NWaves.Signals.DiscreteSignal,System.Boolean)">
            <summary>
            <para>Computes and returns magnitude spectrum from <paramref name="signal"/>:</para>
            <code>
                spectrum = sqrt(re * re + im * im)
            </code>
            </summary>
            <param name="signal">Signal</param>
            <param name="normalize">Normalize by FFT size or not</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.PowerSpectrum(NWaves.Signals.DiscreteSignal,System.Boolean)">
            <summary>
            <para>Computes and returns power spectrum from <paramref name="signal"/>:</para>
            <code>
                spectrum = (re * re + im * im)
            </code>
            </summary>
            <param name="signal">Signal</param>
            <param name="normalize">Normalize by FFT size or not</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.Shift(System.Single[])">
            <summary>
            FFT shift in-place. Throws <see cref="T:System.ArgumentException"/> if array of <paramref name="samples"/> has odd length.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.RealFft.Direct(System.ReadOnlySpan{System.Single},System.Span{System.Single},System.Span{System.Single})">
            <summary>
            <para>
            Does Fast Fourier Transform: 
            real <paramref name="input"/> -> complex (<paramref name="re"/>, <paramref name="im"/>).
            </para>
            </summary>
            <param name="input">Input data (real)</param>
            <param name="re">Output data (real parts)</param>
            <param name="im">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.Inverse(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            <para>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="re"/>, <paramref name="im"/>) -> real <paramref name="output"/>.
            </para>
            </summary>
            <param name="re">Input data (real parts)</param>
            <param name="im">Input data (imaginary parts)</param>
            <param name="output">Output data (real)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft.InverseNorm(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            <para>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="re"/>, <paramref name="im"/>) -> real <paramref name="output"/>.
            </para>
            </summary>
            <param name="re">Input data (real parts)</param>
            <param name="im">Input data (imaginary parts)</param>
            <param name="output">Output data (real)</param>
        </member>
        <member name="T:NWaves.Transforms.RealFft64">
            <summary>
            <para>Represents Complex Fast Fourier Transform (for real-valued input, 64-bit):</para>
            <list type="bullet">
                <item>Direct FFT for real-valued input</item>
                <item>Inverse FFT with real-valued output</item>
                <item>Magnitude spectrum</item>
                <item>Power spectrum</item>
            </list>
            </summary>
        </member>
        <member name="P:NWaves.Transforms.RealFft64.Size">
            <summary>
            Gets FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft64._fftSize">
            <summary>
            Half of FFT size (for calculations).
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft64._cosTbl">
            <summary>
            Precomputed cosines.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft64._sinTbl">
            <summary>
            Precomputed sines.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft64._ar">
            <summary>
            Precomputed coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft64._br">
            <summary>
            Precomputed coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft64._ai">
            <summary>
            Precomputed coefficients.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.RealFft64._bi">
            <summary>
            Precomputed coefficients.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.#ctor(System.Int32)">
            <summary>
            Constructs FFT transformer with given <paramref name="size"/>. FFT size must be a power of two.
            </summary>
            <param name="size">FFT size</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.Direct(System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>
            Does Fast Fourier Transform: 
            real <paramref name="input"/> -> complex (<paramref name="re"/>, <paramref name="im"/>).
            </para>
            </summary>
            <param name="input">Input data (real)</param>
            <param name="re">Output data (real parts)</param>
            <param name="im">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.Inverse(System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="re"/>, <paramref name="im"/>) -> real <paramref name="output"/>.
            </para>
            </summary>
            <param name="re">Input data (real parts)</param>
            <param name="im">Input data (imaginary parts)</param>
            <param name="output">Output data (real)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.InverseNorm(System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="re"/>, <paramref name="im"/>) -> real <paramref name="output"/>.
            </para>
            </summary>
            <param name="re">Input data (real parts)</param>
            <param name="im">Input data (imaginary parts)</param>
            <param name="output">Output data (real)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.Direct(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>
            Does Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </para>
            <para><paramref name="inIm"/> is ignored.</para>
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.DirectNorm(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>
            Does normalized Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </para>
            <para><paramref name="inIm"/> is ignored.</para>
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.Inverse(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </para>
            <para><paramref name="outIm"/> is ignored.</para>
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.InverseNorm(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            <para>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="inRe"/>, <paramref name="inIm"/>) -> complex(<paramref name="outRe"/>, <paramref name="outIm"/>).
            </para>
            <para><paramref name="outIm"/> is ignored.</para>
            </summary>
            <param name="inRe">Input data (real parts)</param>
            <param name="inIm">Input data (imaginary parts)</param>
            <param name="outRe">Output data (real parts)</param>
            <param name="outIm">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.Direct(System.ReadOnlySpan{System.Double},System.Span{System.Double},System.Span{System.Double})">
            <summary>
            <para>
            Does Fast Fourier Transform: 
            real <paramref name="input"/> -> complex (<paramref name="re"/>, <paramref name="im"/>).
            </para>
            </summary>
            <param name="input">Input data (real)</param>
            <param name="re">Output data (real parts)</param>
            <param name="im">Output data (imaginary parts)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.Inverse(System.ReadOnlySpan{System.Double},System.ReadOnlySpan{System.Double},System.Span{System.Double})">
            <summary>
            <para>
            Does Inverse Fast Fourier Transform: 
            complex (<paramref name="re"/>, <paramref name="im"/>) -> real <paramref name="output"/>.
            </para>
            </summary>
            <param name="re">Input data (real parts)</param>
            <param name="im">Input data (imaginary parts)</param>
            <param name="output">Output data (real)</param>
        </member>
        <member name="M:NWaves.Transforms.RealFft64.InverseNorm(System.ReadOnlySpan{System.Double},System.ReadOnlySpan{System.Double},System.Span{System.Double})">
            <summary>
            <para>
            Does normalized Inverse Fast Fourier Transform: 
            complex (<paramref name="re"/>, <paramref name="im"/>) -> real <paramref name="output"/>.
            </para>
            </summary>
            <param name="re">Input data (real parts)</param>
            <param name="im">Input data (imaginary parts)</param>
            <param name="output">Output data (real)</param>
        </member>
        <member name="T:NWaves.Transforms.Stft">
            <summary>
            Represents Short-Time Fourier Transform.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Stft.Size">
            <summary>
            Gets FFT size.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Stft._fft">
            <summary>
            Internal FFT transformer.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Stft._hopSize">
            <summary>
            Overlap size (number of samples).
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Stft._windowSize">
            <summary>
            Window size (number of samples).
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Stft._window">
            <summary>
            Window type.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Stft._windowSamples">
            <summary>
            Pre-computed samples of the window function.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Stft.#ctor(System.Int32,System.Int32,NWaves.Windows.WindowType,System.Int32)">
            <summary>
            Constructs STFT transformer.
            </summary>
            <param name="windowSize">Size of analysis window</param>
            <param name="hopSize">Hop (overlap) size</param>
            <param name="window">Type of the window function to apply</param>
            <param name="fftSize">Size of FFT</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.Direct(System.Single[])">
            <summary>
            Does STFT of an <paramref name="input"/>. 
            Returns list of computed spectra (real and imaginary parts) in time.
            </summary>
            <param name="input">Input data</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.Direct(NWaves.Signals.DiscreteSignal)">
            <summary>
            Does STFT of a <paramref name="signal"/>. 
            Returns list of computed spectra (real and imaginary parts) in time.
            </summary>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.Inverse(System.Collections.Generic.List{System.ValueTuple{System.Single[],System.Single[]}},System.Boolean)">
            <summary>
            Does Inverse STFT from list of spectra <paramref name="stft"/>.
            </summary>
            <param name="stft">List of spectra (real and imaginary parts)</param>
            <param name="perfectReconstruction">Perfect reconstruction mode</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.ComputeWindowSummed">
            <summary>
            Helper method for ISTFT in 'perfect reconstruction' mode.
            </summary>
            <returns>Summed window coefficients</returns>
        </member>
        <member name="M:NWaves.Transforms.Stft.Spectrogram(System.Single[],System.Boolean)">
            <summary>
            Computes spectrogram. 
            The spectrogram is essentially a list of power spectra in time.
            </summary>
            <param name="input">Input data</param>
            <param name="normalize">Normalize each spectrum</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.Spectrogram(NWaves.Signals.DiscreteSignal,System.Boolean)">
            <summary>
            Computes spectrogram. 
            The spectrogram is essentially a list of power spectra in time.
            </summary>
            <param name="signal">Input signal</param>
            <param name="normalize">Normalize each spectrum</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.AveragePeriodogram(System.Single[])">
            <summary>
            Computes averaged periodogram (used, for example, in Welch method). 
            This method is memory-efficient since it doesn't store all spectra in memory.
            </summary>
            <param name="input">Input data</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.MagnitudePhaseSpectrogram(System.Single[])">
            <summary>
            Computes spectrogram in the form of list of magnitudes and phases from <paramref name="input"/>.
            </summary>
            <param name="input">Input data</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.MagnitudePhaseSpectrogram(NWaves.Signals.DiscreteSignal)">
            <summary>
            Computes spectrogram in the form of list of magnitudes and phases from <paramref name="signal"/>.
            </summary>
            <param name="signal">Input signal</param>
        </member>
        <member name="M:NWaves.Transforms.Stft.ReconstructMagnitudePhase(NWaves.Transforms.MagnitudePhaseList,System.Boolean)">
            <summary>
            Reconstructs samples from <paramref name="spectrogram"/> in the form of list of magnitudes and phases.
            </summary>
            <param name="spectrogram">Spectrogram in the form of list of magnitudes and phases</param>
            <param name="perfectReconstruction">Perfect reconstruction mode</param>
        </member>
        <member name="T:NWaves.Transforms.MagnitudePhaseList">
            <summary>
            Represents spectrogram in the form of list of magnitudes and phases.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.MagnitudePhaseList.Magnitudes">
            <summary>
            Gets or sets list of magnitudes.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.MagnitudePhaseList.Phases">
            <summary>
            Gets or sets list of phases.
            </summary>
        </member>
        <member name="T:NWaves.Transforms.Wavelets.Fwt">
            <summary>
            Represents Fast Wavelet Transform (FWT).
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Wavelets.Fwt.Size">
            <summary>
            Gets FWT size.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Wavelets.Fwt._waveletLength">
            <summary>
            The length of the mother wavelet.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Wavelets.Fwt._loD">
            <summary>
            LP coefficients for decomposition.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Wavelets.Fwt._hiD">
            <summary>
            HP coefficients for decomposition.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Wavelets.Fwt._loR">
            <summary>
            LP coefficients for reconstruction.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Wavelets.Fwt._hiR">
            <summary>
            HP coefficients for reconstruction.
            </summary>
        </member>
        <member name="F:NWaves.Transforms.Wavelets.Fwt._temp">
            <summary>
            Temporary internal buffer.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Fwt.#ctor(System.Int32,NWaves.Transforms.Wavelets.Wavelet)">
            <summary>
            Constructs FWT transformer.
            </summary>
            <param name="size">FWT size</param>
            <param name="wavelet">Mother wavelet</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Fwt.Direct(System.Single[],System.Single[])">
            <summary>
            Does Fast Wavelet Transform (decomposition).
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Fwt.DirectNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized Fast Wavelet Transform (decomposition). 
            Identical to <see cref="M:NWaves.Transforms.Wavelets.Fwt.Direct(System.Single[],System.Single[])"/>.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Fwt.Inverse(System.Single[],System.Single[])">
            <summary>
            Does inverse Fast Wavelet Transform (reconstruction).
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Fwt.InverseNorm(System.Single[],System.Single[])">
            <summary>
            Does normalized inverse Fast Wavelet Transform (reconstruction). 
            Identical to <see cref="M:NWaves.Transforms.Wavelets.Fwt.Inverse(System.Single[],System.Single[])"/>.
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Fwt.Direct(System.Single[],System.Single[],System.Int32)">
            <summary>
            Does Fast Wavelet Transform (decomposition).
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
            <param name="level">FWT level</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Fwt.Inverse(System.Single[],System.Single[],System.Int32)">
            <summary>
            Does inverse Fast Wavelet Transform (reconstruction).
            </summary>
            <param name="input">Input data</param>
            <param name="output">Output data</param>
            <param name="level">FWT level</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Fwt.MaxLevel(System.Int32)">
            <summary>
            Evaluates maximum decomposition level from input <paramref name="length"/>.
            </summary>
            <param name="length">Input length</param>
        </member>
        <member name="T:NWaves.Transforms.Wavelets.Wavelet">
            <summary>
            Represents wavelet.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Wavelets.Wavelet.Name">
            <summary>
            Gets wavelet name.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Wavelets.Wavelet.Length">
            <summary>
            Gets wavelet length.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Wavelets.Wavelet.LoD">
            <summary>
            Gets LP coefficients for decomposition.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Wavelets.Wavelet.HiD">
            <summary>
            Gets HP coefficients for decomposition.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Wavelets.Wavelet.LoR">
            <summary>
            Gets LP coefficients for reconstruction.
            </summary>
        </member>
        <member name="P:NWaves.Transforms.Wavelets.Wavelet.HiR">
            <summary>
            Gets HP coefficients for reconstruction.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.#ctor(NWaves.Transforms.Wavelets.WaveletFamily,System.Int32)">
            <summary>
            Constructs wavelet from <paramref name="waveletFamily"/> and number of <paramref name="taps"/>.
            </summary>
            <param name="waveletFamily">Wavelet family</param>
            <param name="taps">Number of taps</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.#ctor(System.String)">
            <summary>
            Constructs wavelet from <paramref name="name"/>. 
            Supported names: "haar", "db1".."db20", "sym2".."sym20", "coif1".."coif5".
            </summary>
            <param name="name">Wavelet name</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.#ctor(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Constructs wavelet from wavelet coefficients (perhaps, calculated in external software).
            </summary>
            <param name="loD">LP coefficients for decomposition</param>
            <param name="hiD">HP coefficients for decomposition</param>
            <param name="loR">LP coefficients for reconstruction</param>
            <param name="hiR">HP coefficients for reconstruction</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.MakeWavelet(NWaves.Transforms.Wavelets.WaveletFamily,System.Int32)">
            <summary>
            Fills wavelet fields: name, length and coefficients.
            </summary>
            <param name="waveletFamily">Wavelet family</param>
            <param name="taps">Number of taps</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.ComputeOrthonormalCoeffs">
            <summary>
            Computes orthonormal coefficients (from LoD coefficients only).
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.MakeHaarWavelet">
            <summary>
            Setups Haar wavelet.
            </summary>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.MakeDaubechiesWavelet(System.Int32)">
            <summary>
            Setups Daubechies wavelet.
            </summary>
            <param name="taps">Number of taps</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.MakeSymletWavelet(System.Int32)">
            <summary>
            Setups Symlet wavelet.
            </summary>
            <param name="taps">Number of taps</param>
        </member>
        <member name="M:NWaves.Transforms.Wavelets.Wavelet.MakeCoifletWavelet(System.Int32)">
            <summary>
            Setups Coiflet wavelet.
            </summary>
            <param name="taps">Number of taps</param>
        </member>
        <member name="T:NWaves.Utils.FractionalDelayLine">
            <summary>
            Represents fractional delay line.
            </summary>
        </member>
        <member name="P:NWaves.Utils.FractionalDelayLine.InterpolationMode">
            <summary>
            Gets or sets interpolation mode.
            </summary>
        </member>
        <member name="P:NWaves.Utils.FractionalDelayLine.Size">
            <summary>
            Gets the size of delay line (number of samples).
            </summary>
        </member>
        <member name="F:NWaves.Utils.FractionalDelayLine._delayLine">
            <summary>
            Delay line.
            </summary>
        </member>
        <member name="F:NWaves.Utils.FractionalDelayLine._n">
            <summary>
            Current write position.
            </summary>
        </member>
        <member name="F:NWaves.Utils.FractionalDelayLine._prevInterpolated">
            <summary>
            Previously interpolated sample (used with InterpolationMode.Thiran).
            </summary>
        </member>
        <member name="M:NWaves.Utils.FractionalDelayLine.#ctor(System.Int32,NWaves.Utils.InterpolationMode)">
            <summary>
            Constructs <see cref="T:NWaves.Utils.FractionalDelayLine"/> and reserves given <paramref name="size"/> for its samples.
            </summary>
            <param name="size">Delay line size (number of samples)</param>
            <param name="interpolationMode">Interpolation mode</param>
        </member>
        <member name="M:NWaves.Utils.FractionalDelayLine.#ctor(System.Int32,System.Double,NWaves.Utils.InterpolationMode)">
            <summary>
            Constructs <see cref="T:NWaves.Utils.FractionalDelayLine"/> and reserves the size 
            corresponding to <paramref name="maxDelay"/> seconds.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="maxDelay">Max delay (in seconds)</param>
            <param name="interpolationMode">Interpolation mode</param>
        </member>
        <member name="M:NWaves.Utils.FractionalDelayLine.Write(System.Single)">
            <summary>
            Writes (puts) <paramref name="sample"/> to the delay line.
            </summary>
        </member>
        <member name="M:NWaves.Utils.FractionalDelayLine.Read(System.Double)">
            <summary>
            Reads (gets) sample from the delay line corresponding to given time <paramref name="delay"/> (in seconds).
            </summary>
        </member>
        <member name="M:NWaves.Utils.FractionalDelayLine.Reset">
            <summary>
            Resets delay line.
            </summary>
        </member>
        <member name="M:NWaves.Utils.FractionalDelayLine.Ensure(System.Int32)">
            <summary>
            Resizes delay line to ensure new <paramref name="size"/>. 
            If <paramref name="size"/> does not exceed current size of the delay line then nothing happens.
            </summary>
        </member>
        <member name="M:NWaves.Utils.FractionalDelayLine.Ensure(System.Int32,System.Double)">
            <summary>
            Resizes delay line to ensure new size corresponding to <paramref name="maxDelay"/> seconds. 
            If the new size does not exceed current size of the delay line then nothing happens.
            </summary>
            <param name="samplingRate">Sampling rate</param>
            <param name="maxDelay">Max delay (in seconds)</param>
        </member>
        <member name="T:NWaves.Utils.Guard">
            <summary>
            Contains the most widely used contracts / guard clauses.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstNonPositive(System.Double,System.String)">
            <summary>
            Guards against negative number or zero.
            </summary>
            <param name="arg">Argument (number)</param>
            <param name="argName">Argument name</param>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstInequality(System.Double,System.Double,System.String,System.String)">
            <summary>
            Guards against inequality of two arguments.
            </summary>
            <param name="arg1">The first argument</param>
            <param name="arg2">The second argument</param>
            <param name="arg1Name">Name of the first argument</param>
            <param name="arg2Name">Name of the second argument</param>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstInvalidRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Guards against the number being not in the given range.
            </summary>
            <param name="value">Argument (number)</param>
            <param name="low">Lower boundary of the range</param>
            <param name="high">Upper boundary of the range</param>
            <param name="valueName">Argument name</param>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstInvalidRange(System.Double,System.Double,System.String,System.String)">
            <summary>
            Guards against the case when the first and the second arguments are not valid boundaries of a range.
            </summary>
            <param name="low">The first argument</param>
            <param name="high">The second argument</param>
            <param name="lowName">Name of the first argument</param>
            <param name="highName">Name of the second argument</param>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstExceedance(System.Double,System.Double,System.String,System.String)">
            <summary>
            Guards against the first argument exceeding the second argument.
            </summary>
            <param name="low">The first argument</param>
            <param name="high">The second argument</param>
            <param name="lowName">Name of the first argument</param>
            <param name="highName">Name of the second argument</param>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstNotPowerOfTwo(System.Int32,System.String)">
            <summary>
            Guards against integer number being not power of 2 (e.g. 8, 16, 128, etc.)
            </summary>
            <param name="n">Argument (number)</param>
            <param name="argName">Argument name</param>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstEvenNumber(System.Int32,System.String)">
            <summary>
            Guards against even integer number.
            </summary>
            <param name="n">Argument (number)</param>
            <param name="argName">Argument name</param>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstNotOrdered(System.Double[],System.String)">
            <summary>
            Guards against not ordered and not unique array.
            </summary>
            <param name="values">Argument (array of values)</param>
            <param name="argName">Argument name</param>
        </member>
        <member name="M:NWaves.Utils.Guard.AgainstIncorrectFilterParams(System.Double[],System.Double[],System.Double[])">
            <summary>
            Guards against incorrect parameters for (equiripple) filter design.
            </summary>
            <param name="freqs">Frequencies</param>
            <param name="desired">Desired magnitude response (gains)</param>
            <param name="weights">Weights</param>
        </member>
        <member name="T:NWaves.Utils.Lpc">
            <summary>
            Provides functions related to Linear Predictive Coding (LPC).
            </summary>
        </member>
        <member name="M:NWaves.Utils.Lpc.LevinsonDurbin(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Evaluates LP coefficients using Levinson-Durbin algorithm and returns prediction error.
            </summary>
            <param name="input">Auto-correlation vector</param>
            <param name="a">LP coefficients</param>
            <param name="order">Order of LPC</param>
            <param name="offset">Optional offset in auto-correlation vector</param>
        </member>
        <member name="M:NWaves.Utils.Lpc.ToCepstrum(System.Single[],System.Single,System.Single[])">
            <summary>
            Converts LPC coefficients to LPC cepstrum (LPCC).
            </summary>
            <param name="lpc">LPC vector</param>
            <param name="gain">Gain</param>
            <param name="lpcc">LPC cepstrum</param>
        </member>
        <member name="M:NWaves.Utils.Lpc.FromCepstrum(System.Single[],System.Single[])">
            <summary>
            Converts LPC cepstrum to LPC coefficients and returns gain.
            </summary>
            <param name="lpcc">LPC cepstrum</param>
            <param name="lpc">LPC vector</param>
        </member>
        <member name="M:NWaves.Utils.Lpc.EstimateOrder(System.Int32)">
            <summary>
            Estimates LPC order for a given <paramref name="samplingRate"/> according to the best practices.
            </summary>
            <param name="samplingRate">Sampling rate</param>
        </member>
        <member name="M:NWaves.Utils.Lpc.ToLsf(System.Single[],System.Single[])">
            <summary>
            Converts LPC coefficients to Line Spectral Frequencies <paramref name="lsf"/>. 
            The length of <paramref name="lsf"/> must be equal to <paramref name="lpc"/> length. Last element will be PI.
            </summary>
            <param name="lpc">LPC vector</param>
            <param name="lsf">Line spectral frequencies</param>
        </member>
        <member name="M:NWaves.Utils.Lpc.FromLsf(System.Single[],System.Single[])">
            <summary>
            Converts Line Spectral Frequencies <paramref name="lsf"/> to LPC coefficients. 
            The length of <paramref name="lsf"/> must be equal to <paramref name="lpc"/> length. Last element must be PI.
            </summary>
            <param name="lsf">Line spectral frequencies</param>
            <param name="lpc">LPC vector</param>
        </member>
        <member name="T:NWaves.Utils.MathUtils">
            <summary>
            Provides helpful math functions.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.Sinc(System.Double)">
            <summary>
            Returns Sinc of <paramref name="x"/>.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns next power of 2 closest to the given number <paramref name="n"/>.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.Gcd(System.Int32,System.Int32)">
            <summary>
            Finds Greatest Common Divisor.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.Mod(System.Double,System.Double)">
            <summary>
            Modulo function that works correctly with negative numbers (as np.mod).
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.Asinh(System.Double)">
            <summary>
            Computes Inverse Sinh of <paramref name="x"/>.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.Factorial(System.Int32)">
            <summary>
            Computes factorial <paramref name="n"/>!.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Evaluates Binomial coefficient.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.Diff(System.Single[],System.Single[])">
            <summary>
            Evaluate discrete difference of <paramref name="samples"/> (array of the 1st order derivatives).
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.InterpolateLinear(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Does linear interpolation (as numpy.interp).
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.BilinearTransform(System.Double[],System.Double[])">
            <summary>
            Does bilinear transform (in-place).
            </summary>
            <param name="re">Real parts of complex values</param>
            <param name="im">Imaginary parts of complex values</param>
        </member>
        <member name="M:NWaves.Utils.MathUtils.Unwrap(System.Double[],System.Double)">
            <summary>
            Unwraps phase.
            </summary>
            <param name="phase">Phase array</param>
            <param name="tolerance">Jump size</param>
        </member>
        <member name="M:NWaves.Utils.MathUtils.Wrap(System.Double[],System.Double)">
            <summary>
            Wraps phase.
            </summary>
            <param name="phase">Phase array</param>
            <param name="tolerance">Jump size</param>
        </member>
        <member name="M:NWaves.Utils.MathUtils.FindNth(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds <paramref name="n"/>-th order statistics (n-th smallest value in array <paramref name="a"/>).
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.I0(System.Double)">
            <summary>
            Modified Bessel function I0(<paramref name="x"/>) of the 1st kind 
            (using Taylor series, not very precise method).
            </summary>
        </member>
        <member name="F:NWaves.Utils.MathUtils.PolyRootsIterations">
            <summary>
            Number of iterations in Durand-Kerner algorithm for evaluating polynomial roots.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.PolynomialRoots(System.Double[],System.Int32)">
            <summary>
            Evaluates complex roots of polynomials using Durand-Kerner algorithm. 
            Works for polynomials of order up to approx. 50.
            </summary>
            <param name="a">Polynomial coefficients</param>
            <param name="maxIterations">Max number of iterations</param>
        </member>
        <member name="M:NWaves.Utils.MathUtils.ArraysAreEqual(System.Numerics.Complex[],System.Numerics.Complex[],System.Double)">
            <summary>
            Checks if two arrays of complex numbers are essentially identical.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.EvaluatePolynomial(System.Double[],System.Numerics.Complex)">
            <summary>
            Evaluates polynomial according to Horner scheme.
            </summary>
            <param name="a">Polynomial coefficients</param>
            <param name="x">Argument</param>
        </member>
        <member name="M:NWaves.Utils.MathUtils.MultiplyPolynomials(System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Multiplies polynomials.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MathUtils.DividePolynomial(System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Divides polynomials.
            </summary>
        </member>
        <member name="T:NWaves.Utils.Matrix">
            <summary>
            Represents 2D matrix.
            </summary>
        </member>
        <member name="P:NWaves.Utils.Matrix.Rows">
            <summary>
            Gets or sets number of rows.
            </summary>
        </member>
        <member name="P:NWaves.Utils.Matrix.Columns">
            <summary>
            Gets or sets number of columns.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs <see cref="T:NWaves.Utils.Matrix"/> with given number of <paramref name="rows"/> and <paramref name="columns"/>.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Matrix.As2dArray">
            <summary>
            Gets reference to underlying 2D array.
            </summary>
        </member>
        <member name="P:NWaves.Utils.Matrix.T">
            <summary>
            Gets transposed matrix.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Matrix.Companion(System.Double[])">
            <summary>
            Returns companion matrix.
            </summary>
            <param name="a">Input array</param>
        </member>
        <member name="M:NWaves.Utils.Matrix.Eye(System.Int32)">
            <summary>
            Returns identity matrix of given <paramref name="size"/>.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Matrix.op_Addition(NWaves.Utils.Matrix,NWaves.Utils.Matrix)">
            <summary>
            Returns sum of matrices <paramref name="m1"/> and <paramref name="m2"/>.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Matrix.op_Subtraction(NWaves.Utils.Matrix,NWaves.Utils.Matrix)">
            <summary>
            Subtracts matrix <paramref name="m2"/> from matrix <paramref name="m1"/>.
            </summary>
        </member>
        <member name="P:NWaves.Utils.Matrix.Item(System.Int32)">
            <summary>
            Gets row by its index.
            </summary>
            <param name="i">Row index</param>
        </member>
        <member name="T:NWaves.Utils.MemoryOperationExtensions">
            <summary>
            Provides extension methods implementing fast operations with memory buffers.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.ToFloats(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Creates array of single-precision values from enumerable of double-precision values.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.ToDoubles(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates array of double-precision values from enumerable of single-precision values.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.FastCopy(System.Single[])">
            <summary>
            Creates fast copy of array.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.FastCopyTo(System.Single[],System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes fast copy of array (or its part) to existing <paramref name="destination"/> array (or its part).
            </summary>
            <param name="source">Source array</param>
            <param name="destination">Destination array</param>
            <param name="size">Number of elements to copy</param>
            <param name="sourceOffset">Offset in source array</param>
            <param name="destinationOffset">Offset in destination array</param>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.FastCopyFragment(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes fast copy of array fragment starting at specified offset.
            </summary>
            <param name="source">Source array</param>
            <param name="size">Number of elements to copy</param>
            <param name="sourceOffset">Offset in source array</param>
            <param name="destinationOffset">Offset in destination array</param>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.MergeWithArray(System.Single[],System.Single[])">
            <summary>
            Performs fast merging of array with <paramref name="another"/> array.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.RepeatArray(System.Single[],System.Int32)">
            <summary>
            Creates new array containing given array repeated <paramref name="n"/> times.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.PadZeros(System.Single[],System.Int32)">
            <summary>
            Creates new zero-padded array of given <paramref name="size"/> from given array.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.FastCopy(System.Double[])">
            <summary>
            Creates fast copy of array.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.FastCopyTo(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes fast copy of array (or its part) to existing <paramref name="destination"/> array (or its part).
            </summary>
            <param name="source">Source array</param>
            <param name="destination">Destination array</param>
            <param name="size">Number of elements to copy</param>
            <param name="sourceOffset">Offset in source array</param>
            <param name="destinationOffset">Offset in destination array</param>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.FastCopyFragment(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes fast copy of array fragment starting at specified offset.
            </summary>
            <param name="source">Source array</param>
            <param name="size">Number of elements to copy</param>
            <param name="sourceOffset">Offset in source array</param>
            <param name="destinationOffset">Offset in destination array</param>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.MergeWithArray(System.Double[],System.Double[])">
            <summary>
            Performs fast merging of array with <paramref name="another"/> array.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.RepeatArray(System.Double[],System.Int32)">
            <summary>
            Creates new array containing given array repeated <paramref name="n"/> times.
            </summary>
        </member>
        <member name="M:NWaves.Utils.MemoryOperationExtensions.PadZeros(System.Double[],System.Int32)">
            <summary>
            Creates new zero-padded array of given <paramref name="size"/> from given array.
            </summary>
        </member>
        <member name="T:NWaves.Utils.Scale">
            <summary>
            Provides methods for 
            <para>
            1) converting between different scales:
            <list type="bullet">
                <item>decibel</item>
                <item>MIDI pitch</item>
                <item>mel (HTK)</item>
                <item>mel (Slaney)</item>
                <item>bark1 (Traunmueller)</item>
                <item>bark2 (Wang)</item>
                <item>ERB</item>
            </list>
            </para>
            <para>
            2) loudness weighting:
            <list>
                <item>A-weighting</item>
                <item>B-weighting</item>
                <item>C-weighting</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.ToDecibel(System.Double,System.Double)">
            <summary>
            Converts magnitude value to dB level.
            </summary>
            <param name="value">Magnitude</param>
            <param name="valueReference">Reference magnitude</param>
        </member>
        <member name="M:NWaves.Utils.Scale.ToDecibel(System.Double)">
            <summary>
            Converts magnitude value to dB level (simplified version).
            </summary>
            <param name="value">Magnitude</param>
        </member>
        <member name="M:NWaves.Utils.Scale.ToDecibelPower(System.Double,System.Double)">
            <summary>
            Converts power to dB level.
            </summary>
            <param name="value">Power</param>
            <param name="valueReference">Reference power</param>
        </member>
        <member name="M:NWaves.Utils.Scale.FromDecibel(System.Double,System.Double)">
            <summary>
            Converts dB level to magnitude value.
            </summary>
            <param name="level">Decibel level</param>
            <param name="valueReference">Reference magnitude</param>
        </member>
        <member name="M:NWaves.Utils.Scale.FromDecibel(System.Double)">
            <summary>
            Converts dB level to magnitude value (simplified version).
            </summary>
            <param name="level">Decibel level</param>
        </member>
        <member name="M:NWaves.Utils.Scale.FromDecibelPower(System.Double,System.Double)">
            <summary>
            Converts dB level to power.
            </summary>
            <param name="level">Decibel level</param>
            <param name="valueReference">Reference power</param>
        </member>
        <member name="M:NWaves.Utils.Scale.PitchToFreq(System.Int32)">
            <summary>
            Converts MIDI pitch to frequency (in Hz).
            </summary>
            <param name="pitch">Pitch</param>
        </member>
        <member name="M:NWaves.Utils.Scale.FreqToPitch(System.Double)">
            <summary>
            Converts frequency to MIDI pitch.
            </summary>
            <param name="freq">Frequency (in Hz)</param>
        </member>
        <member name="F:NWaves.Utils.Scale.Notes">
            <summary>
            Array of musical notes.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.NoteToFreq(System.String,System.Int32)">
            <summary>
            Converts musical note (in format ("G", 3), ("E", 5), etc.) to frequency in Hz.
            </summary>
            <param name="note">Note (A-G#)</param>
            <param name="octave">Octave (0-8)</param>
        </member>
        <member name="M:NWaves.Utils.Scale.FreqToNote(System.Double)">
            <summary>
            Converts frequency in Hz to note (in tuple format ("G", 3), ("E", 5), etc.).
            </summary>
            <param name="freq">Frequency in Hz</param>
        </member>
        <member name="M:NWaves.Utils.Scale.HerzToMel(System.Double)">
            <summary>
            Converts herz frequency to corresponding mel frequency.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.MelToHerz(System.Double)">
            <summary>
            Converts mel frequency to corresponding herz frequency.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.HerzToMelSlaney(System.Double)">
            <summary>
            Converts herz frequency to mel frequency (suggested by M.Slaney).
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.MelToHerzSlaney(System.Double)">
            <summary>
            Converts mel frequency to herz frequency (suggested by M.Slaney).
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.HerzToBark(System.Double)">
            <summary>
            Converts herz frequency to corresponding bark frequency (according to Traunmüller (1990)).
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.BarkToHerz(System.Double)">
            <summary>
            Converts bark frequency to corresponding herz frequency (according to Traunmüller (1990)).
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.HerzToBarkSlaney(System.Double)">
            <summary>
            Converts herz frequency to corresponding bark frequency (according to Wang (1992)); 
            used in M.Slaney's auditory toolbox.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.BarkToHerzSlaney(System.Double)">
            <summary>
            Converts bark frequency to corresponding herz frequency (according to Wang (1992)); 
            used in M.Slaney's auditory toolbox.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.HerzToErb(System.Double)">
            <summary>
            Converts herz frequency to corresponding ERB frequency.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.ErbToHerz(System.Double)">
            <summary>
            Converts ERB frequency to corresponding herz frequency.
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.HerzToOctave(System.Double,System.Double,System.Int32)">
            <summary>
            Converts Hz frequency to octave (used for constructing librosa-like Chroma filterbanks).
            </summary>
        </member>
        <member name="M:NWaves.Utils.Scale.LoudnessWeighting(System.Double,System.String)">
            <summary>
            Returns perceptual loudness weight (in dB).
            </summary>
            <param name="frequency">Frequency</param>
            <param name="weightingType">Weighting type (A, B, C)</param>
        </member>
        <member name="T:NWaves.Windows.Window">
            <summary>
            Generates window coefficients of various types.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.OfType(NWaves.Windows.WindowType,System.Int32,System.Object[])">
            <summary>
            Generates window coefficients of given <paramref name="type"/> and <paramref name="length"/>.
            </summary>
            <param name="type">Window type</param>
            <param name="length">Window length</param>
            <param name="parameters">Additional optional parameters</param>
        </member>
        <member name="M:NWaves.Windows.Window.Rectangular(System.Int32)">
            <summary>
            Generates rectangular window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Triangular(System.Int32)">
            <summary>
            Generates triangular window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Hamming(System.Int32)">
            <summary>
            Generates Hamming window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Blackman(System.Int32)">
            <summary>
            Generates Blackman window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Hann(System.Int32)">
            <summary>
            Generates Hann window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Gaussian(System.Int32)">
            <summary>
            Generates Gaussian window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Kaiser(System.Int32,System.Double)">
            <summary>
            Generates Kaiser window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Kbd(System.Int32,System.Double)">
            <summary>
            Generates Kaiser-Bessel Derived window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.BartlettHann(System.Int32)">
            <summary>
            Generates Bartlett-Hann window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Lanczos(System.Int32)">
            <summary>
            Generates Lanczos window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.PowerOfSine(System.Int32,System.Double)">
            <summary>
            Generates Sin-beta window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Flattop(System.Int32)">
            <summary>
            Generates Flat-top window of given <paramref name="length"/>.
            </summary>
        </member>
        <member name="M:NWaves.Windows.Window.Liftering(System.Int32,System.Int32)">
            <summary>
            Generates coefficients for cepstrum liftering.
            </summary>
            <param name="length">Length of the window</param>
            <param name="l">Denominator in liftering formula</param>
        </member>
        <member name="T:NWaves.Windows.WindowExtensions">
            <summary>
            Provides extension methods for applying windows to signals and arrays of samples.
            </summary>
        </member>
        <member name="M:NWaves.Windows.WindowExtensions.ApplyWindow(System.Single[],System.Single[])">
            <summary>
            Applies window to array of <paramref name="samples"/>.
            </summary>
            <param name="samples">Samples</param>
            <param name="windowSamples">Window coefficients</param>
        </member>
        <member name="M:NWaves.Windows.WindowExtensions.ApplyWindow(System.Double[],System.Double[])">
            <summary>
            Applies window to array of <paramref name="samples"/>.
            </summary>
            <param name="samples">Samples</param>
            <param name="windowSamples">Window coefficients</param>
        </member>
        <member name="M:NWaves.Windows.WindowExtensions.ApplyWindow(NWaves.Signals.DiscreteSignal,System.Single[])">
            <summary>
            Applies window to <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="windowSamples">Window coefficients</param>
        </member>
        <member name="M:NWaves.Windows.WindowExtensions.ApplyWindow(System.Single[],NWaves.Windows.WindowType,System.Object[])">
            <summary>
            Applies window with optional <paramref name="parameters"/> to array of <paramref name="samples"/>.
            </summary>
            <param name="samples">Samples</param>
            <param name="window">Window type</param>
            <param name="parameters">Window parameters</param>
        </member>
        <member name="M:NWaves.Windows.WindowExtensions.ApplyWindow(System.Double[],NWaves.Windows.WindowType,System.Object[])">
            <summary>
            Applies window with optional <paramref name="parameters"/> to array of <paramref name="samples"/>.
            </summary>
            <param name="samples">Samples</param>
            <param name="window">Window type</param>
            <param name="parameters">Window parameters</param>
        </member>
        <member name="M:NWaves.Windows.WindowExtensions.ApplyWindow(NWaves.Signals.DiscreteSignal,NWaves.Windows.WindowType,System.Object[])">
            <summary>
            Applies window with optional <paramref name="parameters"/> to <paramref name="signal"/>.
            </summary>
            <param name="signal">Signal</param>
            <param name="window">Window type</param>
            <param name="parameters">Window parameters</param>
        </member>
        <member name="T:NWaves.Windows.WindowType">
            <summary>
            Defines the most commonly used window functions.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Rectangular">
            <summary>
            Rectangular window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Triangular">
            <summary>
            Triangular window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Hamming">
            <summary>
            Hamming window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Blackman">
            <summary>
            Blackman window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Hann">
            <summary>
            Hann window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Gaussian">
            <summary>
            Gaussian window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Kaiser">
            <summary>
            Kaiser window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Kbd">
            <summary>
            Kaiser-Bessel Derived window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.BartlettHann">
            <summary>
            Bartlett-Hann window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Lanczos">
            <summary>
            Lanczos window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.PowerOfSine">
            <summary>
            Power-of-sine window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Flattop">
            <summary>
            Flat-top window.
            </summary>
        </member>
        <member name="F:NWaves.Windows.WindowType.Liftering">
            <summary>
            Window for cepstral liftering.
            </summary>
        </member>
    </members>
</doc>
